"""
    Nomad Broker

    Nomad payment provider aggregation, including make payments, and customs declaration for orders and etc.  # noqa: E501

    The version of the OpenAPI document: 1.7.0
    Contact: ben.song@samarkand.global
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from nomad_broker_cli.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from nomad_broker_cli.model.payment_method import PaymentMethod
    from nomad_broker_cli.model.payment_product import PaymentProduct
    from nomad_broker_cli.model.payment_type import PaymentType
    globals()['PaymentMethod'] = PaymentMethod
    globals()['PaymentProduct'] = PaymentProduct
    globals()['PaymentType'] = PaymentType


class PaymentRequest(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'payment_method': (PaymentMethod,),  # noqa: E501
            'payment_type': (PaymentType,),  # noqa: E501
            'order_ref': (str,),  # noqa: E501
            'actual_amount': (int,),  # noqa: E501
            'currency': (str,),  # noqa: E501
            'total': (int,),  # noqa: E501
            'subsidy_amount': (int,),  # noqa: E501
            'cost_price': (int,),  # noqa: E501
            'invoice_id': (str,),  # noqa: E501
            'profit_sharing': (bool,),  # noqa: E501
            'products': ([PaymentProduct], none_type,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'attach': (str,),  # noqa: E501
            'time_expire': (str,),  # noqa: E501
            'goods_tag': (str,),  # noqa: E501
            'payer_id': (str,),  # noqa: E501
            'merchant_payer_id': (str,),  # noqa: E501
            'notify_url': (str,),  # noqa: E501
            'success_url': (str,),  # noqa: E501
            'cancel_url': (str,),  # noqa: E501
            'sp_app_id': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'payment_method': 'paymentMethod',  # noqa: E501
        'payment_type': 'paymentType',  # noqa: E501
        'order_ref': 'orderRef',  # noqa: E501
        'actual_amount': 'actualAmount',  # noqa: E501
        'currency': 'currency',  # noqa: E501
        'total': 'total',  # noqa: E501
        'subsidy_amount': 'subsidyAmount',  # noqa: E501
        'cost_price': 'costPrice',  # noqa: E501
        'invoice_id': 'invoiceId',  # noqa: E501
        'profit_sharing': 'profitSharing',  # noqa: E501
        'products': 'products',  # noqa: E501
        'description': 'description',  # noqa: E501
        'attach': 'attach',  # noqa: E501
        'time_expire': 'timeExpire',  # noqa: E501
        'goods_tag': 'goodsTag',  # noqa: E501
        'payer_id': 'payerId',  # noqa: E501
        'merchant_payer_id': 'merchantPayerId',  # noqa: E501
        'notify_url': 'notifyUrl',  # noqa: E501
        'success_url': 'successUrl',  # noqa: E501
        'cancel_url': 'cancelUrl',  # noqa: E501
        'sp_app_id': 'spAppId',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, payment_method, payment_type, order_ref, actual_amount, currency, *args, **kwargs):  # noqa: E501
        """PaymentRequest - a model defined in OpenAPI

        Args:
            payment_method (PaymentMethod):
            payment_type (PaymentType):
            order_ref (str): Merchant system order number
            actual_amount (int): Order actual amount, which uses the base unit of current currency
            currency (str): Must be `CNY` or `GBP`

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            total (int): Order total amount, which uses the base unit of current currency. [optional]  # noqa: E501
            subsidy_amount (int): Subsidy amount, only works when profitSharing is True. [optional]  # noqa: E501
            cost_price (int): When the original order price is not equal to the payment amount, the discount will not be enjoyed. This field is mainly used to prevent the same invoice from being paid multiple times to enjoy multiple discounts.. [optional]  # noqa: E501
            invoice_id (str): Merchant invoice ID, need to use with products data. [optional]  # noqa: E501
            profit_sharing (bool): Whether the order is going to share profit. [optional] if omitted the server will use the default value of True  # noqa: E501
            products ([PaymentProduct], none_type): All products data for current order, used when the order includes discounts. [optional]  # noqa: E501
            description (str): Order product description. [optional]  # noqa: E501
            attach (str): Payment attach data, which could be used by payment notifies. [optional]  # noqa: E501
            time_expire (str): Payment due time. [optional]  # noqa: E501
            goods_tag (str): Coupon goods tag. [optional]  # noqa: E501
            payer_id (str): Payer ID of customer in service provider side.. [optional]  # noqa: E501
            merchant_payer_id (str): Payer ID of customer in merchant side.. [optional]  # noqa: E501
            notify_url (str): Notify url, that is used by payment company.. [optional]  # noqa: E501
            success_url (str): Success url, that is used by alipay company.. [optional]  # noqa: E501
            cancel_url (str): Cancel url, that is used by alipay company.. [optional]  # noqa: E501
            sp_app_id (str): App ID of payment company.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.payment_method = payment_method
        self.payment_type = payment_type
        self.order_ref = order_ref
        self.actual_amount = actual_amount
        self.currency = currency
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
