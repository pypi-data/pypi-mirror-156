# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: loopgrpc/compiled/client.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from loopgrpc.compiled import common_pb2 as loopgrpc_dot_compiled_dot_common__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x1eloopgrpc/compiled/client.proto\x12\x07looprpc\x1a\x1eloopgrpc/compiled/common.proto\"\xe3\x02\n\x0eLoopOutRequest\x12\x0b\n\x03\x61mt\x18\x01 \x01(\x03\x12\x0c\n\x04\x64\x65st\x18\x02 \x01(\t\x12\x1c\n\x14max_swap_routing_fee\x18\x03 \x01(\x03\x12\x1e\n\x16max_prepay_routing_fee\x18\x04 \x01(\x03\x12\x14\n\x0cmax_swap_fee\x18\x05 \x01(\x03\x12\x16\n\x0emax_prepay_amt\x18\x06 \x01(\x03\x12\x15\n\rmax_miner_fee\x18\x07 \x01(\x03\x12\x1c\n\x10loop_out_channel\x18\x08 \x01(\x04\x42\x02\x18\x01\x12\x19\n\x11outgoing_chan_set\x18\x0b \x03(\x04\x12\x19\n\x11sweep_conf_target\x18\t \x01(\x05\x12\x1a\n\x12htlc_confirmations\x18\r \x01(\x05\x12!\n\x19swap_publication_deadline\x18\n \x01(\x04\x12\r\n\x05label\x18\x0c \x01(\t\x12\x11\n\tinitiator\x18\x0e \x01(\t\"\xe8\x01\n\rLoopInRequest\x12\x0b\n\x03\x61mt\x18\x01 \x01(\x03\x12\x14\n\x0cmax_swap_fee\x18\x02 \x01(\x03\x12\x15\n\rmax_miner_fee\x18\x03 \x01(\x03\x12\x10\n\x08last_hop\x18\x04 \x01(\x0c\x12\x15\n\rexternal_htlc\x18\x05 \x01(\x08\x12\x18\n\x10htlc_conf_target\x18\x06 \x01(\x05\x12\r\n\x05label\x18\x07 \x01(\t\x12\x11\n\tinitiator\x18\x08 \x01(\t\x12\'\n\x0broute_hints\x18\t \x03(\x0b\x32\x12.looprpc.RouteHint\x12\x0f\n\x07private\x18\n \x01(\x08\"\x9b\x01\n\x0cSwapResponse\x12\x0e\n\x02id\x18\x01 \x01(\tB\x02\x18\x01\x12\x10\n\x08id_bytes\x18\x03 \x01(\x0c\x12\x18\n\x0chtlc_address\x18\x02 \x01(\tB\x02\x18\x01\x12\x1b\n\x13htlc_address_np2wsh\x18\x04 \x01(\t\x12\x1a\n\x12htlc_address_p2wsh\x18\x05 \x01(\t\x12\x16\n\x0eserver_message\x18\x06 \x01(\t\"\x10\n\x0eMonitorRequest\"\xb3\x03\n\nSwapStatus\x12\x0b\n\x03\x61mt\x18\x01 \x01(\x03\x12\x0e\n\x02id\x18\x02 \x01(\tB\x02\x18\x01\x12\x10\n\x08id_bytes\x18\x0b \x01(\x0c\x12\x1f\n\x04type\x18\x03 \x01(\x0e\x32\x11.looprpc.SwapType\x12!\n\x05state\x18\x04 \x01(\x0e\x32\x12.looprpc.SwapState\x12.\n\x0e\x66\x61ilure_reason\x18\x0e \x01(\x0e\x32\x16.looprpc.FailureReason\x12\x17\n\x0finitiation_time\x18\x05 \x01(\x03\x12\x18\n\x10last_update_time\x18\x06 \x01(\x03\x12\x18\n\x0chtlc_address\x18\x07 \x01(\tB\x02\x18\x01\x12\x1a\n\x12htlc_address_p2wsh\x18\x0c \x01(\t\x12\x1b\n\x13htlc_address_np2wsh\x18\r \x01(\t\x12\x13\n\x0b\x63ost_server\x18\x08 \x01(\x03\x12\x14\n\x0c\x63ost_onchain\x18\t \x01(\x03\x12\x15\n\rcost_offchain\x18\n \x01(\x03\x12\x10\n\x08last_hop\x18\x10 \x01(\x0c\x12\x19\n\x11outgoing_chan_set\x18\x11 \x03(\x04\x12\r\n\x05label\x18\x0f \x01(\t\"\x12\n\x10ListSwapsRequest\"7\n\x11ListSwapsResponse\x12\"\n\x05swaps\x18\x01 \x03(\x0b\x32\x13.looprpc.SwapStatus\"\x1d\n\x0fSwapInfoRequest\x12\n\n\x02id\x18\x01 \x01(\x0c\"\x0e\n\x0cTermsRequest\"a\n\x0fInTermsResponse\x12\x17\n\x0fmin_swap_amount\x18\x05 \x01(\x03\x12\x17\n\x0fmax_swap_amount\x18\x06 \x01(\x03J\x04\x08\x01\x10\x02J\x04\x08\x02\x10\x03J\x04\x08\x03\x10\x04J\x04\x08\x04\x10\x05J\x04\x08\x07\x10\x08\"\x92\x01\n\x10OutTermsResponse\x12\x17\n\x0fmin_swap_amount\x18\x05 \x01(\x03\x12\x17\n\x0fmax_swap_amount\x18\x06 \x01(\x03\x12\x16\n\x0emin_cltv_delta\x18\x08 \x01(\x05\x12\x16\n\x0emax_cltv_delta\x18\t \x01(\x05J\x04\x08\x01\x10\x02J\x04\x08\x02\x10\x03J\x04\x08\x03\x10\x04J\x04\x08\x04\x10\x05J\x04\x08\x07\x10\x08\"\xc6\x01\n\x0cQuoteRequest\x12\x0b\n\x03\x61mt\x18\x01 \x01(\x03\x12\x13\n\x0b\x63onf_target\x18\x02 \x01(\x05\x12\x15\n\rexternal_htlc\x18\x03 \x01(\x08\x12!\n\x19swap_publication_deadline\x18\x04 \x01(\x04\x12\x18\n\x10loop_in_last_hop\x18\x05 \x01(\x0c\x12/\n\x13loop_in_route_hints\x18\x06 \x03(\x0b\x32\x12.looprpc.RouteHint\x12\x0f\n\x07private\x18\x07 \x01(\x08\"z\n\x0fInQuoteResponse\x12\x14\n\x0cswap_fee_sat\x18\x01 \x01(\x03\x12\x1c\n\x14htlc_publish_fee_sat\x18\x03 \x01(\x03\x12\x12\n\ncltv_delta\x18\x05 \x01(\x05\x12\x13\n\x0b\x63onf_target\x18\x06 \x01(\x05J\x04\x08\x02\x10\x03J\x04\x08\x04\x10\x05\"\xa0\x01\n\x10OutQuoteResponse\x12\x14\n\x0cswap_fee_sat\x18\x01 \x01(\x03\x12\x16\n\x0eprepay_amt_sat\x18\x02 \x01(\x03\x12\x1a\n\x12htlc_sweep_fee_sat\x18\x03 \x01(\x03\x12\x19\n\x11swap_payment_dest\x18\x04 \x01(\x0c\x12\x12\n\ncltv_delta\x18\x05 \x01(\x05\x12\x13\n\x0b\x63onf_target\x18\x06 \x01(\x05\"V\n\x0cProbeRequest\x12\x0b\n\x03\x61mt\x18\x01 \x01(\x03\x12\x10\n\x08last_hop\x18\x02 \x01(\x0c\x12\'\n\x0broute_hints\x18\x03 \x03(\x0b\x32\x12.looprpc.RouteHint\"\x0f\n\rProbeResponse\"\x0f\n\rTokensRequest\"4\n\x0eTokensResponse\x12\"\n\x06tokens\x18\x01 \x03(\x0b\x32\x12.looprpc.LsatToken\"\xc8\x01\n\tLsatToken\x12\x15\n\rbase_macaroon\x18\x01 \x01(\x0c\x12\x14\n\x0cpayment_hash\x18\x02 \x01(\x0c\x12\x18\n\x10payment_preimage\x18\x03 \x01(\x0c\x12\x18\n\x10\x61mount_paid_msat\x18\x04 \x01(\x03\x12\x1d\n\x15routing_fee_paid_msat\x18\x05 \x01(\x03\x12\x14\n\x0ctime_created\x18\x06 \x01(\x03\x12\x0f\n\x07\x65xpired\x18\x07 \x01(\x08\x12\x14\n\x0cstorage_name\x18\x08 \x01(\t\"\x1b\n\x19GetLiquidityParamsRequest\"\xf3\x03\n\x13LiquidityParameters\x12%\n\x05rules\x18\x01 \x03(\x0b\x32\x16.looprpc.LiquidityRule\x12\x0f\n\x07\x66\x65\x65_ppm\x18\x10 \x01(\x04\x12$\n\x1csweep_fee_rate_sat_per_vbyte\x18\x02 \x01(\x04\x12\x18\n\x10max_swap_fee_ppm\x18\x03 \x01(\x04\x12\x1b\n\x13max_routing_fee_ppm\x18\x04 \x01(\x04\x12\"\n\x1amax_prepay_routing_fee_ppm\x18\x05 \x01(\x04\x12\x16\n\x0emax_prepay_sat\x18\x06 \x01(\x04\x12\x19\n\x11max_miner_fee_sat\x18\x07 \x01(\x04\x12\x19\n\x11sweep_conf_target\x18\x08 \x01(\x05\x12\x1b\n\x13\x66\x61ilure_backoff_sec\x18\t \x01(\x04\x12\x10\n\x08\x61utoloop\x18\n \x01(\x08\x12\x1b\n\x13\x61utoloop_budget_sat\x18\x0b \x01(\x04\x12!\n\x19\x61utoloop_budget_start_sec\x18\x0c \x01(\x04\x12\x1a\n\x12\x61uto_max_in_flight\x18\r \x01(\x04\x12\x17\n\x0fmin_swap_amount\x18\x0e \x01(\x04\x12\x17\n\x0fmax_swap_amount\x18\x0f \x01(\x04\x12\x18\n\x10htlc_conf_target\x18\x11 \x01(\x05\"\xbb\x01\n\rLiquidityRule\x12\x12\n\nchannel_id\x18\x01 \x01(\x04\x12$\n\tswap_type\x18\x06 \x01(\x0e\x32\x11.looprpc.SwapType\x12\x0e\n\x06pubkey\x18\x05 \x01(\x0c\x12(\n\x04type\x18\x02 \x01(\x0e\x32\x1a.looprpc.LiquidityRuleType\x12\x1a\n\x12incoming_threshold\x18\x03 \x01(\r\x12\x1a\n\x12outgoing_threshold\x18\x04 \x01(\r\"M\n\x19SetLiquidityParamsRequest\x12\x30\n\nparameters\x18\x01 \x01(\x0b\x32\x1c.looprpc.LiquidityParameters\"\x1c\n\x1aSetLiquidityParamsResponse\"\x15\n\x13SuggestSwapsRequest\"W\n\x0c\x44isqualified\x12\x12\n\nchannel_id\x18\x01 \x01(\x04\x12\x0e\n\x06pubkey\x18\x03 \x01(\x0c\x12#\n\x06reason\x18\x02 \x01(\x0e\x32\x13.looprpc.AutoReason\"\x97\x01\n\x14SuggestSwapsResponse\x12)\n\x08loop_out\x18\x01 \x03(\x0b\x32\x17.looprpc.LoopOutRequest\x12\'\n\x07loop_in\x18\x03 \x03(\x0b\x32\x16.looprpc.LoopInRequest\x12+\n\x0c\x64isqualified\x18\x02 \x03(\x0b\x32\x15.looprpc.Disqualified*%\n\x08SwapType\x12\x0c\n\x08LOOP_OUT\x10\x00\x12\x0b\n\x07LOOP_IN\x10\x01*s\n\tSwapState\x12\r\n\tINITIATED\x10\x00\x12\x15\n\x11PREIMAGE_REVEALED\x10\x01\x12\x12\n\x0eHTLC_PUBLISHED\x10\x02\x12\x0b\n\x07SUCCESS\x10\x03\x12\n\n\x06\x46\x41ILED\x10\x04\x12\x13\n\x0fINVOICE_SETTLED\x10\x05*\xed\x01\n\rFailureReason\x12\x17\n\x13\x46\x41ILURE_REASON_NONE\x10\x00\x12\x1b\n\x17\x46\x41ILURE_REASON_OFFCHAIN\x10\x01\x12\x1a\n\x16\x46\x41ILURE_REASON_TIMEOUT\x10\x02\x12 \n\x1c\x46\x41ILURE_REASON_SWEEP_TIMEOUT\x10\x03\x12%\n!FAILURE_REASON_INSUFFICIENT_VALUE\x10\x04\x12\x1c\n\x18\x46\x41ILURE_REASON_TEMPORARY\x10\x05\x12#\n\x1f\x46\x41ILURE_REASON_INCORRECT_AMOUNT\x10\x06*/\n\x11LiquidityRuleType\x12\x0b\n\x07UNKNOWN\x10\x00\x12\r\n\tTHRESHOLD\x10\x01*\xa6\x03\n\nAutoReason\x12\x17\n\x13\x41UTO_REASON_UNKNOWN\x10\x00\x12\"\n\x1e\x41UTO_REASON_BUDGET_NOT_STARTED\x10\x01\x12\x1a\n\x16\x41UTO_REASON_SWEEP_FEES\x10\x02\x12\x1e\n\x1a\x41UTO_REASON_BUDGET_ELAPSED\x10\x03\x12\x19\n\x15\x41UTO_REASON_IN_FLIGHT\x10\x04\x12\x18\n\x14\x41UTO_REASON_SWAP_FEE\x10\x05\x12\x19\n\x15\x41UTO_REASON_MINER_FEE\x10\x06\x12\x16\n\x12\x41UTO_REASON_PREPAY\x10\x07\x12\x1f\n\x1b\x41UTO_REASON_FAILURE_BACKOFF\x10\x08\x12\x18\n\x14\x41UTO_REASON_LOOP_OUT\x10\t\x12\x17\n\x13\x41UTO_REASON_LOOP_IN\x10\n\x12\x1c\n\x18\x41UTO_REASON_LIQUIDITY_OK\x10\x0b\x12#\n\x1f\x41UTO_REASON_BUDGET_INSUFFICIENT\x10\x0c\x12 \n\x1c\x41UTO_REASON_FEE_INSUFFICIENT\x10\r2\xc2\x07\n\nSwapClient\x12\x39\n\x07LoopOut\x12\x17.looprpc.LoopOutRequest\x1a\x15.looprpc.SwapResponse\x12\x37\n\x06LoopIn\x12\x16.looprpc.LoopInRequest\x1a\x15.looprpc.SwapResponse\x12\x39\n\x07Monitor\x12\x17.looprpc.MonitorRequest\x1a\x13.looprpc.SwapStatus0\x01\x12\x42\n\tListSwaps\x12\x19.looprpc.ListSwapsRequest\x1a\x1a.looprpc.ListSwapsResponse\x12\x39\n\x08SwapInfo\x12\x18.looprpc.SwapInfoRequest\x1a\x13.looprpc.SwapStatus\x12@\n\x0cLoopOutTerms\x12\x15.looprpc.TermsRequest\x1a\x19.looprpc.OutTermsResponse\x12@\n\x0cLoopOutQuote\x12\x15.looprpc.QuoteRequest\x1a\x19.looprpc.OutQuoteResponse\x12\x41\n\x0eGetLoopInTerms\x12\x15.looprpc.TermsRequest\x1a\x18.looprpc.InTermsResponse\x12\x41\n\x0eGetLoopInQuote\x12\x15.looprpc.QuoteRequest\x1a\x18.looprpc.InQuoteResponse\x12\x36\n\x05Probe\x12\x15.looprpc.ProbeRequest\x1a\x16.looprpc.ProbeResponse\x12@\n\rGetLsatTokens\x12\x16.looprpc.TokensRequest\x1a\x17.looprpc.TokensResponse\x12V\n\x12GetLiquidityParams\x12\".looprpc.GetLiquidityParamsRequest\x1a\x1c.looprpc.LiquidityParameters\x12]\n\x12SetLiquidityParams\x12\".looprpc.SetLiquidityParamsRequest\x1a#.looprpc.SetLiquidityParamsResponse\x12K\n\x0cSuggestSwaps\x12\x1c.looprpc.SuggestSwapsRequest\x1a\x1d.looprpc.SuggestSwapsResponseB\'Z%github.com/lightninglabs/loop/looprpcb\x06proto3')

_SWAPTYPE = DESCRIPTOR.enum_types_by_name['SwapType']
SwapType = enum_type_wrapper.EnumTypeWrapper(_SWAPTYPE)
_SWAPSTATE = DESCRIPTOR.enum_types_by_name['SwapState']
SwapState = enum_type_wrapper.EnumTypeWrapper(_SWAPSTATE)
_FAILUREREASON = DESCRIPTOR.enum_types_by_name['FailureReason']
FailureReason = enum_type_wrapper.EnumTypeWrapper(_FAILUREREASON)
_LIQUIDITYRULETYPE = DESCRIPTOR.enum_types_by_name['LiquidityRuleType']
LiquidityRuleType = enum_type_wrapper.EnumTypeWrapper(_LIQUIDITYRULETYPE)
_AUTOREASON = DESCRIPTOR.enum_types_by_name['AutoReason']
AutoReason = enum_type_wrapper.EnumTypeWrapper(_AUTOREASON)
LOOP_OUT = 0
LOOP_IN = 1
INITIATED = 0
PREIMAGE_REVEALED = 1
HTLC_PUBLISHED = 2
SUCCESS = 3
FAILED = 4
INVOICE_SETTLED = 5
FAILURE_REASON_NONE = 0
FAILURE_REASON_OFFCHAIN = 1
FAILURE_REASON_TIMEOUT = 2
FAILURE_REASON_SWEEP_TIMEOUT = 3
FAILURE_REASON_INSUFFICIENT_VALUE = 4
FAILURE_REASON_TEMPORARY = 5
FAILURE_REASON_INCORRECT_AMOUNT = 6
UNKNOWN = 0
THRESHOLD = 1
AUTO_REASON_UNKNOWN = 0
AUTO_REASON_BUDGET_NOT_STARTED = 1
AUTO_REASON_SWEEP_FEES = 2
AUTO_REASON_BUDGET_ELAPSED = 3
AUTO_REASON_IN_FLIGHT = 4
AUTO_REASON_SWAP_FEE = 5
AUTO_REASON_MINER_FEE = 6
AUTO_REASON_PREPAY = 7
AUTO_REASON_FAILURE_BACKOFF = 8
AUTO_REASON_LOOP_OUT = 9
AUTO_REASON_LOOP_IN = 10
AUTO_REASON_LIQUIDITY_OK = 11
AUTO_REASON_BUDGET_INSUFFICIENT = 12
AUTO_REASON_FEE_INSUFFICIENT = 13


_LOOPOUTREQUEST = DESCRIPTOR.message_types_by_name['LoopOutRequest']
_LOOPINREQUEST = DESCRIPTOR.message_types_by_name['LoopInRequest']
_SWAPRESPONSE = DESCRIPTOR.message_types_by_name['SwapResponse']
_MONITORREQUEST = DESCRIPTOR.message_types_by_name['MonitorRequest']
_SWAPSTATUS = DESCRIPTOR.message_types_by_name['SwapStatus']
_LISTSWAPSREQUEST = DESCRIPTOR.message_types_by_name['ListSwapsRequest']
_LISTSWAPSRESPONSE = DESCRIPTOR.message_types_by_name['ListSwapsResponse']
_SWAPINFOREQUEST = DESCRIPTOR.message_types_by_name['SwapInfoRequest']
_TERMSREQUEST = DESCRIPTOR.message_types_by_name['TermsRequest']
_INTERMSRESPONSE = DESCRIPTOR.message_types_by_name['InTermsResponse']
_OUTTERMSRESPONSE = DESCRIPTOR.message_types_by_name['OutTermsResponse']
_QUOTEREQUEST = DESCRIPTOR.message_types_by_name['QuoteRequest']
_INQUOTERESPONSE = DESCRIPTOR.message_types_by_name['InQuoteResponse']
_OUTQUOTERESPONSE = DESCRIPTOR.message_types_by_name['OutQuoteResponse']
_PROBEREQUEST = DESCRIPTOR.message_types_by_name['ProbeRequest']
_PROBERESPONSE = DESCRIPTOR.message_types_by_name['ProbeResponse']
_TOKENSREQUEST = DESCRIPTOR.message_types_by_name['TokensRequest']
_TOKENSRESPONSE = DESCRIPTOR.message_types_by_name['TokensResponse']
_LSATTOKEN = DESCRIPTOR.message_types_by_name['LsatToken']
_GETLIQUIDITYPARAMSREQUEST = DESCRIPTOR.message_types_by_name['GetLiquidityParamsRequest']
_LIQUIDITYPARAMETERS = DESCRIPTOR.message_types_by_name['LiquidityParameters']
_LIQUIDITYRULE = DESCRIPTOR.message_types_by_name['LiquidityRule']
_SETLIQUIDITYPARAMSREQUEST = DESCRIPTOR.message_types_by_name['SetLiquidityParamsRequest']
_SETLIQUIDITYPARAMSRESPONSE = DESCRIPTOR.message_types_by_name['SetLiquidityParamsResponse']
_SUGGESTSWAPSREQUEST = DESCRIPTOR.message_types_by_name['SuggestSwapsRequest']
_DISQUALIFIED = DESCRIPTOR.message_types_by_name['Disqualified']
_SUGGESTSWAPSRESPONSE = DESCRIPTOR.message_types_by_name['SuggestSwapsResponse']
LoopOutRequest = _reflection.GeneratedProtocolMessageType('LoopOutRequest', (_message.Message,), {
  'DESCRIPTOR' : _LOOPOUTREQUEST,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.LoopOutRequest)
  })
_sym_db.RegisterMessage(LoopOutRequest)

LoopInRequest = _reflection.GeneratedProtocolMessageType('LoopInRequest', (_message.Message,), {
  'DESCRIPTOR' : _LOOPINREQUEST,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.LoopInRequest)
  })
_sym_db.RegisterMessage(LoopInRequest)

SwapResponse = _reflection.GeneratedProtocolMessageType('SwapResponse', (_message.Message,), {
  'DESCRIPTOR' : _SWAPRESPONSE,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.SwapResponse)
  })
_sym_db.RegisterMessage(SwapResponse)

MonitorRequest = _reflection.GeneratedProtocolMessageType('MonitorRequest', (_message.Message,), {
  'DESCRIPTOR' : _MONITORREQUEST,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.MonitorRequest)
  })
_sym_db.RegisterMessage(MonitorRequest)

SwapStatus = _reflection.GeneratedProtocolMessageType('SwapStatus', (_message.Message,), {
  'DESCRIPTOR' : _SWAPSTATUS,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.SwapStatus)
  })
_sym_db.RegisterMessage(SwapStatus)

ListSwapsRequest = _reflection.GeneratedProtocolMessageType('ListSwapsRequest', (_message.Message,), {
  'DESCRIPTOR' : _LISTSWAPSREQUEST,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.ListSwapsRequest)
  })
_sym_db.RegisterMessage(ListSwapsRequest)

ListSwapsResponse = _reflection.GeneratedProtocolMessageType('ListSwapsResponse', (_message.Message,), {
  'DESCRIPTOR' : _LISTSWAPSRESPONSE,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.ListSwapsResponse)
  })
_sym_db.RegisterMessage(ListSwapsResponse)

SwapInfoRequest = _reflection.GeneratedProtocolMessageType('SwapInfoRequest', (_message.Message,), {
  'DESCRIPTOR' : _SWAPINFOREQUEST,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.SwapInfoRequest)
  })
_sym_db.RegisterMessage(SwapInfoRequest)

TermsRequest = _reflection.GeneratedProtocolMessageType('TermsRequest', (_message.Message,), {
  'DESCRIPTOR' : _TERMSREQUEST,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.TermsRequest)
  })
_sym_db.RegisterMessage(TermsRequest)

InTermsResponse = _reflection.GeneratedProtocolMessageType('InTermsResponse', (_message.Message,), {
  'DESCRIPTOR' : _INTERMSRESPONSE,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.InTermsResponse)
  })
_sym_db.RegisterMessage(InTermsResponse)

OutTermsResponse = _reflection.GeneratedProtocolMessageType('OutTermsResponse', (_message.Message,), {
  'DESCRIPTOR' : _OUTTERMSRESPONSE,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.OutTermsResponse)
  })
_sym_db.RegisterMessage(OutTermsResponse)

QuoteRequest = _reflection.GeneratedProtocolMessageType('QuoteRequest', (_message.Message,), {
  'DESCRIPTOR' : _QUOTEREQUEST,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.QuoteRequest)
  })
_sym_db.RegisterMessage(QuoteRequest)

InQuoteResponse = _reflection.GeneratedProtocolMessageType('InQuoteResponse', (_message.Message,), {
  'DESCRIPTOR' : _INQUOTERESPONSE,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.InQuoteResponse)
  })
_sym_db.RegisterMessage(InQuoteResponse)

OutQuoteResponse = _reflection.GeneratedProtocolMessageType('OutQuoteResponse', (_message.Message,), {
  'DESCRIPTOR' : _OUTQUOTERESPONSE,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.OutQuoteResponse)
  })
_sym_db.RegisterMessage(OutQuoteResponse)

ProbeRequest = _reflection.GeneratedProtocolMessageType('ProbeRequest', (_message.Message,), {
  'DESCRIPTOR' : _PROBEREQUEST,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.ProbeRequest)
  })
_sym_db.RegisterMessage(ProbeRequest)

ProbeResponse = _reflection.GeneratedProtocolMessageType('ProbeResponse', (_message.Message,), {
  'DESCRIPTOR' : _PROBERESPONSE,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.ProbeResponse)
  })
_sym_db.RegisterMessage(ProbeResponse)

TokensRequest = _reflection.GeneratedProtocolMessageType('TokensRequest', (_message.Message,), {
  'DESCRIPTOR' : _TOKENSREQUEST,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.TokensRequest)
  })
_sym_db.RegisterMessage(TokensRequest)

TokensResponse = _reflection.GeneratedProtocolMessageType('TokensResponse', (_message.Message,), {
  'DESCRIPTOR' : _TOKENSRESPONSE,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.TokensResponse)
  })
_sym_db.RegisterMessage(TokensResponse)

LsatToken = _reflection.GeneratedProtocolMessageType('LsatToken', (_message.Message,), {
  'DESCRIPTOR' : _LSATTOKEN,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.LsatToken)
  })
_sym_db.RegisterMessage(LsatToken)

GetLiquidityParamsRequest = _reflection.GeneratedProtocolMessageType('GetLiquidityParamsRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETLIQUIDITYPARAMSREQUEST,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.GetLiquidityParamsRequest)
  })
_sym_db.RegisterMessage(GetLiquidityParamsRequest)

LiquidityParameters = _reflection.GeneratedProtocolMessageType('LiquidityParameters', (_message.Message,), {
  'DESCRIPTOR' : _LIQUIDITYPARAMETERS,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.LiquidityParameters)
  })
_sym_db.RegisterMessage(LiquidityParameters)

LiquidityRule = _reflection.GeneratedProtocolMessageType('LiquidityRule', (_message.Message,), {
  'DESCRIPTOR' : _LIQUIDITYRULE,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.LiquidityRule)
  })
_sym_db.RegisterMessage(LiquidityRule)

SetLiquidityParamsRequest = _reflection.GeneratedProtocolMessageType('SetLiquidityParamsRequest', (_message.Message,), {
  'DESCRIPTOR' : _SETLIQUIDITYPARAMSREQUEST,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.SetLiquidityParamsRequest)
  })
_sym_db.RegisterMessage(SetLiquidityParamsRequest)

SetLiquidityParamsResponse = _reflection.GeneratedProtocolMessageType('SetLiquidityParamsResponse', (_message.Message,), {
  'DESCRIPTOR' : _SETLIQUIDITYPARAMSRESPONSE,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.SetLiquidityParamsResponse)
  })
_sym_db.RegisterMessage(SetLiquidityParamsResponse)

SuggestSwapsRequest = _reflection.GeneratedProtocolMessageType('SuggestSwapsRequest', (_message.Message,), {
  'DESCRIPTOR' : _SUGGESTSWAPSREQUEST,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.SuggestSwapsRequest)
  })
_sym_db.RegisterMessage(SuggestSwapsRequest)

Disqualified = _reflection.GeneratedProtocolMessageType('Disqualified', (_message.Message,), {
  'DESCRIPTOR' : _DISQUALIFIED,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.Disqualified)
  })
_sym_db.RegisterMessage(Disqualified)

SuggestSwapsResponse = _reflection.GeneratedProtocolMessageType('SuggestSwapsResponse', (_message.Message,), {
  'DESCRIPTOR' : _SUGGESTSWAPSRESPONSE,
  '__module__' : 'loopgrpc.compiled.client_pb2'
  # @@protoc_insertion_point(class_scope:looprpc.SuggestSwapsResponse)
  })
_sym_db.RegisterMessage(SuggestSwapsResponse)

_SWAPCLIENT = DESCRIPTOR.services_by_name['SwapClient']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'Z%github.com/lightninglabs/loop/looprpc'
  _LOOPOUTREQUEST.fields_by_name['loop_out_channel']._options = None
  _LOOPOUTREQUEST.fields_by_name['loop_out_channel']._serialized_options = b'\030\001'
  _SWAPRESPONSE.fields_by_name['id']._options = None
  _SWAPRESPONSE.fields_by_name['id']._serialized_options = b'\030\001'
  _SWAPRESPONSE.fields_by_name['htlc_address']._options = None
  _SWAPRESPONSE.fields_by_name['htlc_address']._serialized_options = b'\030\001'
  _SWAPSTATUS.fields_by_name['id']._options = None
  _SWAPSTATUS.fields_by_name['id']._serialized_options = b'\030\001'
  _SWAPSTATUS.fields_by_name['htlc_address']._options = None
  _SWAPSTATUS.fields_by_name['htlc_address']._serialized_options = b'\030\001'
  _SWAPTYPE._serialized_start=3617
  _SWAPTYPE._serialized_end=3654
  _SWAPSTATE._serialized_start=3656
  _SWAPSTATE._serialized_end=3771
  _FAILUREREASON._serialized_start=3774
  _FAILUREREASON._serialized_end=4011
  _LIQUIDITYRULETYPE._serialized_start=4013
  _LIQUIDITYRULETYPE._serialized_end=4060
  _AUTOREASON._serialized_start=4063
  _AUTOREASON._serialized_end=4485
  _LOOPOUTREQUEST._serialized_start=76
  _LOOPOUTREQUEST._serialized_end=431
  _LOOPINREQUEST._serialized_start=434
  _LOOPINREQUEST._serialized_end=666
  _SWAPRESPONSE._serialized_start=669
  _SWAPRESPONSE._serialized_end=824
  _MONITORREQUEST._serialized_start=826
  _MONITORREQUEST._serialized_end=842
  _SWAPSTATUS._serialized_start=845
  _SWAPSTATUS._serialized_end=1280
  _LISTSWAPSREQUEST._serialized_start=1282
  _LISTSWAPSREQUEST._serialized_end=1300
  _LISTSWAPSRESPONSE._serialized_start=1302
  _LISTSWAPSRESPONSE._serialized_end=1357
  _SWAPINFOREQUEST._serialized_start=1359
  _SWAPINFOREQUEST._serialized_end=1388
  _TERMSREQUEST._serialized_start=1390
  _TERMSREQUEST._serialized_end=1404
  _INTERMSRESPONSE._serialized_start=1406
  _INTERMSRESPONSE._serialized_end=1503
  _OUTTERMSRESPONSE._serialized_start=1506
  _OUTTERMSRESPONSE._serialized_end=1652
  _QUOTEREQUEST._serialized_start=1655
  _QUOTEREQUEST._serialized_end=1853
  _INQUOTERESPONSE._serialized_start=1855
  _INQUOTERESPONSE._serialized_end=1977
  _OUTQUOTERESPONSE._serialized_start=1980
  _OUTQUOTERESPONSE._serialized_end=2140
  _PROBEREQUEST._serialized_start=2142
  _PROBEREQUEST._serialized_end=2228
  _PROBERESPONSE._serialized_start=2230
  _PROBERESPONSE._serialized_end=2245
  _TOKENSREQUEST._serialized_start=2247
  _TOKENSREQUEST._serialized_end=2262
  _TOKENSRESPONSE._serialized_start=2264
  _TOKENSRESPONSE._serialized_end=2316
  _LSATTOKEN._serialized_start=2319
  _LSATTOKEN._serialized_end=2519
  _GETLIQUIDITYPARAMSREQUEST._serialized_start=2521
  _GETLIQUIDITYPARAMSREQUEST._serialized_end=2548
  _LIQUIDITYPARAMETERS._serialized_start=2551
  _LIQUIDITYPARAMETERS._serialized_end=3050
  _LIQUIDITYRULE._serialized_start=3053
  _LIQUIDITYRULE._serialized_end=3240
  _SETLIQUIDITYPARAMSREQUEST._serialized_start=3242
  _SETLIQUIDITYPARAMSREQUEST._serialized_end=3319
  _SETLIQUIDITYPARAMSRESPONSE._serialized_start=3321
  _SETLIQUIDITYPARAMSRESPONSE._serialized_end=3349
  _SUGGESTSWAPSREQUEST._serialized_start=3351
  _SUGGESTSWAPSREQUEST._serialized_end=3372
  _DISQUALIFIED._serialized_start=3374
  _DISQUALIFIED._serialized_end=3461
  _SUGGESTSWAPSRESPONSE._serialized_start=3464
  _SUGGESTSWAPSRESPONSE._serialized_end=3615
  _SWAPCLIENT._serialized_start=4488
  _SWAPCLIENT._serialized_end=5450
# @@protoc_insertion_point(module_scope)
