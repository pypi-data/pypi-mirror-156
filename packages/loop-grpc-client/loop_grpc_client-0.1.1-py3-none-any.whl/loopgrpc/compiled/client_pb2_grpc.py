# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from loopgrpc.compiled import client_pb2 as loopgrpc_dot_compiled_dot_client__pb2


class SwapClientStub(object):
    """
    SwapClient is a service that handles the client side process of onchain/offchain
    swaps. The service is designed for a single client.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LoopOut = channel.unary_unary(
                '/looprpc.SwapClient/LoopOut',
                request_serializer=loopgrpc_dot_compiled_dot_client__pb2.LoopOutRequest.SerializeToString,
                response_deserializer=loopgrpc_dot_compiled_dot_client__pb2.SwapResponse.FromString,
                )
        self.LoopIn = channel.unary_unary(
                '/looprpc.SwapClient/LoopIn',
                request_serializer=loopgrpc_dot_compiled_dot_client__pb2.LoopInRequest.SerializeToString,
                response_deserializer=loopgrpc_dot_compiled_dot_client__pb2.SwapResponse.FromString,
                )
        self.Monitor = channel.unary_stream(
                '/looprpc.SwapClient/Monitor',
                request_serializer=loopgrpc_dot_compiled_dot_client__pb2.MonitorRequest.SerializeToString,
                response_deserializer=loopgrpc_dot_compiled_dot_client__pb2.SwapStatus.FromString,
                )
        self.ListSwaps = channel.unary_unary(
                '/looprpc.SwapClient/ListSwaps',
                request_serializer=loopgrpc_dot_compiled_dot_client__pb2.ListSwapsRequest.SerializeToString,
                response_deserializer=loopgrpc_dot_compiled_dot_client__pb2.ListSwapsResponse.FromString,
                )
        self.SwapInfo = channel.unary_unary(
                '/looprpc.SwapClient/SwapInfo',
                request_serializer=loopgrpc_dot_compiled_dot_client__pb2.SwapInfoRequest.SerializeToString,
                response_deserializer=loopgrpc_dot_compiled_dot_client__pb2.SwapStatus.FromString,
                )
        self.LoopOutTerms = channel.unary_unary(
                '/looprpc.SwapClient/LoopOutTerms',
                request_serializer=loopgrpc_dot_compiled_dot_client__pb2.TermsRequest.SerializeToString,
                response_deserializer=loopgrpc_dot_compiled_dot_client__pb2.OutTermsResponse.FromString,
                )
        self.LoopOutQuote = channel.unary_unary(
                '/looprpc.SwapClient/LoopOutQuote',
                request_serializer=loopgrpc_dot_compiled_dot_client__pb2.QuoteRequest.SerializeToString,
                response_deserializer=loopgrpc_dot_compiled_dot_client__pb2.OutQuoteResponse.FromString,
                )
        self.GetLoopInTerms = channel.unary_unary(
                '/looprpc.SwapClient/GetLoopInTerms',
                request_serializer=loopgrpc_dot_compiled_dot_client__pb2.TermsRequest.SerializeToString,
                response_deserializer=loopgrpc_dot_compiled_dot_client__pb2.InTermsResponse.FromString,
                )
        self.GetLoopInQuote = channel.unary_unary(
                '/looprpc.SwapClient/GetLoopInQuote',
                request_serializer=loopgrpc_dot_compiled_dot_client__pb2.QuoteRequest.SerializeToString,
                response_deserializer=loopgrpc_dot_compiled_dot_client__pb2.InQuoteResponse.FromString,
                )
        self.Probe = channel.unary_unary(
                '/looprpc.SwapClient/Probe',
                request_serializer=loopgrpc_dot_compiled_dot_client__pb2.ProbeRequest.SerializeToString,
                response_deserializer=loopgrpc_dot_compiled_dot_client__pb2.ProbeResponse.FromString,
                )
        self.GetLsatTokens = channel.unary_unary(
                '/looprpc.SwapClient/GetLsatTokens',
                request_serializer=loopgrpc_dot_compiled_dot_client__pb2.TokensRequest.SerializeToString,
                response_deserializer=loopgrpc_dot_compiled_dot_client__pb2.TokensResponse.FromString,
                )
        self.GetLiquidityParams = channel.unary_unary(
                '/looprpc.SwapClient/GetLiquidityParams',
                request_serializer=loopgrpc_dot_compiled_dot_client__pb2.GetLiquidityParamsRequest.SerializeToString,
                response_deserializer=loopgrpc_dot_compiled_dot_client__pb2.LiquidityParameters.FromString,
                )
        self.SetLiquidityParams = channel.unary_unary(
                '/looprpc.SwapClient/SetLiquidityParams',
                request_serializer=loopgrpc_dot_compiled_dot_client__pb2.SetLiquidityParamsRequest.SerializeToString,
                response_deserializer=loopgrpc_dot_compiled_dot_client__pb2.SetLiquidityParamsResponse.FromString,
                )
        self.SuggestSwaps = channel.unary_unary(
                '/looprpc.SwapClient/SuggestSwaps',
                request_serializer=loopgrpc_dot_compiled_dot_client__pb2.SuggestSwapsRequest.SerializeToString,
                response_deserializer=loopgrpc_dot_compiled_dot_client__pb2.SuggestSwapsResponse.FromString,
                )


class SwapClientServicer(object):
    """
    SwapClient is a service that handles the client side process of onchain/offchain
    swaps. The service is designed for a single client.
    """

    def LoopOut(self, request, context):
        """loop: `out`
        LoopOut initiates an loop out swap with the given parameters. The call
        returns after the swap has been set up with the swap server. From that
        point onwards, progress can be tracked via the SwapStatus stream that is
        returned from Monitor().
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoopIn(self, request, context):
        """loop: `in`
        LoopIn initiates a loop in swap with the given parameters. The call
        returns after the swap has been set up with the swap server. From that
        point onwards, progress can be tracked via the SwapStatus stream
        that is returned from Monitor().
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Monitor(self, request, context):
        """loop: `monitor`
        Monitor will return a stream of swap updates for currently active swaps.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSwaps(self, request, context):
        """loop: `listswaps`
        ListSwaps returns a list of all currently known swaps and their current
        status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SwapInfo(self, request, context):
        """loop: `swapinfo`
        SwapInfo returns all known details about a single swap.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoopOutTerms(self, request, context):
        """loop: `terms`
        LoopOutTerms returns the terms that the server enforces for a loop out swap.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoopOutQuote(self, request, context):
        """loop: `quote`
        LoopOutQuote returns a quote for a loop out swap with the provided
        parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLoopInTerms(self, request, context):
        """loop: `terms`
        GetTerms returns the terms that the server enforces for swaps.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLoopInQuote(self, request, context):
        """loop: `quote`
        GetQuote returns a quote for a swap with the provided parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Probe(self, request, context):
        """
        Probe asks he sever to probe the route to us to have a better upfront
        estimate about routing fees when loopin-in.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLsatTokens(self, request, context):
        """loop: `listauth`
        GetLsatTokens returns all LSAT tokens the daemon ever paid for.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLiquidityParams(self, request, context):
        """loop: `getparams`
        GetLiquidityParams gets the parameters that the daemon's liquidity manager
        is currently configured with. This may be nil if nothing is configured.
        [EXPERIMENTAL]: endpoint is subject to change.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetLiquidityParams(self, request, context):
        """loop: `setparams`
        SetLiquidityParams sets a new set of parameters for the daemon's liquidity
        manager. Note that the full set of parameters must be provided, because
        this call fully overwrites our existing parameters.
        [EXPERIMENTAL]: endpoint is subject to change.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SuggestSwaps(self, request, context):
        """loop: `suggestswaps`
        SuggestSwaps returns a list of recommended swaps based on the current
        state of your node's channels and it's liquidity manager parameters.
        Note that only loop out suggestions are currently supported.
        [EXPERIMENTAL]: endpoint is subject to change.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SwapClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LoopOut': grpc.unary_unary_rpc_method_handler(
                    servicer.LoopOut,
                    request_deserializer=loopgrpc_dot_compiled_dot_client__pb2.LoopOutRequest.FromString,
                    response_serializer=loopgrpc_dot_compiled_dot_client__pb2.SwapResponse.SerializeToString,
            ),
            'LoopIn': grpc.unary_unary_rpc_method_handler(
                    servicer.LoopIn,
                    request_deserializer=loopgrpc_dot_compiled_dot_client__pb2.LoopInRequest.FromString,
                    response_serializer=loopgrpc_dot_compiled_dot_client__pb2.SwapResponse.SerializeToString,
            ),
            'Monitor': grpc.unary_stream_rpc_method_handler(
                    servicer.Monitor,
                    request_deserializer=loopgrpc_dot_compiled_dot_client__pb2.MonitorRequest.FromString,
                    response_serializer=loopgrpc_dot_compiled_dot_client__pb2.SwapStatus.SerializeToString,
            ),
            'ListSwaps': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSwaps,
                    request_deserializer=loopgrpc_dot_compiled_dot_client__pb2.ListSwapsRequest.FromString,
                    response_serializer=loopgrpc_dot_compiled_dot_client__pb2.ListSwapsResponse.SerializeToString,
            ),
            'SwapInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SwapInfo,
                    request_deserializer=loopgrpc_dot_compiled_dot_client__pb2.SwapInfoRequest.FromString,
                    response_serializer=loopgrpc_dot_compiled_dot_client__pb2.SwapStatus.SerializeToString,
            ),
            'LoopOutTerms': grpc.unary_unary_rpc_method_handler(
                    servicer.LoopOutTerms,
                    request_deserializer=loopgrpc_dot_compiled_dot_client__pb2.TermsRequest.FromString,
                    response_serializer=loopgrpc_dot_compiled_dot_client__pb2.OutTermsResponse.SerializeToString,
            ),
            'LoopOutQuote': grpc.unary_unary_rpc_method_handler(
                    servicer.LoopOutQuote,
                    request_deserializer=loopgrpc_dot_compiled_dot_client__pb2.QuoteRequest.FromString,
                    response_serializer=loopgrpc_dot_compiled_dot_client__pb2.OutQuoteResponse.SerializeToString,
            ),
            'GetLoopInTerms': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLoopInTerms,
                    request_deserializer=loopgrpc_dot_compiled_dot_client__pb2.TermsRequest.FromString,
                    response_serializer=loopgrpc_dot_compiled_dot_client__pb2.InTermsResponse.SerializeToString,
            ),
            'GetLoopInQuote': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLoopInQuote,
                    request_deserializer=loopgrpc_dot_compiled_dot_client__pb2.QuoteRequest.FromString,
                    response_serializer=loopgrpc_dot_compiled_dot_client__pb2.InQuoteResponse.SerializeToString,
            ),
            'Probe': grpc.unary_unary_rpc_method_handler(
                    servicer.Probe,
                    request_deserializer=loopgrpc_dot_compiled_dot_client__pb2.ProbeRequest.FromString,
                    response_serializer=loopgrpc_dot_compiled_dot_client__pb2.ProbeResponse.SerializeToString,
            ),
            'GetLsatTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLsatTokens,
                    request_deserializer=loopgrpc_dot_compiled_dot_client__pb2.TokensRequest.FromString,
                    response_serializer=loopgrpc_dot_compiled_dot_client__pb2.TokensResponse.SerializeToString,
            ),
            'GetLiquidityParams': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLiquidityParams,
                    request_deserializer=loopgrpc_dot_compiled_dot_client__pb2.GetLiquidityParamsRequest.FromString,
                    response_serializer=loopgrpc_dot_compiled_dot_client__pb2.LiquidityParameters.SerializeToString,
            ),
            'SetLiquidityParams': grpc.unary_unary_rpc_method_handler(
                    servicer.SetLiquidityParams,
                    request_deserializer=loopgrpc_dot_compiled_dot_client__pb2.SetLiquidityParamsRequest.FromString,
                    response_serializer=loopgrpc_dot_compiled_dot_client__pb2.SetLiquidityParamsResponse.SerializeToString,
            ),
            'SuggestSwaps': grpc.unary_unary_rpc_method_handler(
                    servicer.SuggestSwaps,
                    request_deserializer=loopgrpc_dot_compiled_dot_client__pb2.SuggestSwapsRequest.FromString,
                    response_serializer=loopgrpc_dot_compiled_dot_client__pb2.SuggestSwapsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'looprpc.SwapClient', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SwapClient(object):
    """
    SwapClient is a service that handles the client side process of onchain/offchain
    swaps. The service is designed for a single client.
    """

    @staticmethod
    def LoopOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/looprpc.SwapClient/LoopOut',
            loopgrpc_dot_compiled_dot_client__pb2.LoopOutRequest.SerializeToString,
            loopgrpc_dot_compiled_dot_client__pb2.SwapResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoopIn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/looprpc.SwapClient/LoopIn',
            loopgrpc_dot_compiled_dot_client__pb2.LoopInRequest.SerializeToString,
            loopgrpc_dot_compiled_dot_client__pb2.SwapResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Monitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/looprpc.SwapClient/Monitor',
            loopgrpc_dot_compiled_dot_client__pb2.MonitorRequest.SerializeToString,
            loopgrpc_dot_compiled_dot_client__pb2.SwapStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSwaps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/looprpc.SwapClient/ListSwaps',
            loopgrpc_dot_compiled_dot_client__pb2.ListSwapsRequest.SerializeToString,
            loopgrpc_dot_compiled_dot_client__pb2.ListSwapsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SwapInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/looprpc.SwapClient/SwapInfo',
            loopgrpc_dot_compiled_dot_client__pb2.SwapInfoRequest.SerializeToString,
            loopgrpc_dot_compiled_dot_client__pb2.SwapStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoopOutTerms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/looprpc.SwapClient/LoopOutTerms',
            loopgrpc_dot_compiled_dot_client__pb2.TermsRequest.SerializeToString,
            loopgrpc_dot_compiled_dot_client__pb2.OutTermsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoopOutQuote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/looprpc.SwapClient/LoopOutQuote',
            loopgrpc_dot_compiled_dot_client__pb2.QuoteRequest.SerializeToString,
            loopgrpc_dot_compiled_dot_client__pb2.OutQuoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLoopInTerms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/looprpc.SwapClient/GetLoopInTerms',
            loopgrpc_dot_compiled_dot_client__pb2.TermsRequest.SerializeToString,
            loopgrpc_dot_compiled_dot_client__pb2.InTermsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLoopInQuote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/looprpc.SwapClient/GetLoopInQuote',
            loopgrpc_dot_compiled_dot_client__pb2.QuoteRequest.SerializeToString,
            loopgrpc_dot_compiled_dot_client__pb2.InQuoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Probe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/looprpc.SwapClient/Probe',
            loopgrpc_dot_compiled_dot_client__pb2.ProbeRequest.SerializeToString,
            loopgrpc_dot_compiled_dot_client__pb2.ProbeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLsatTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/looprpc.SwapClient/GetLsatTokens',
            loopgrpc_dot_compiled_dot_client__pb2.TokensRequest.SerializeToString,
            loopgrpc_dot_compiled_dot_client__pb2.TokensResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLiquidityParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/looprpc.SwapClient/GetLiquidityParams',
            loopgrpc_dot_compiled_dot_client__pb2.GetLiquidityParamsRequest.SerializeToString,
            loopgrpc_dot_compiled_dot_client__pb2.LiquidityParameters.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetLiquidityParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/looprpc.SwapClient/SetLiquidityParams',
            loopgrpc_dot_compiled_dot_client__pb2.SetLiquidityParamsRequest.SerializeToString,
            loopgrpc_dot_compiled_dot_client__pb2.SetLiquidityParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SuggestSwaps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/looprpc.SwapClient/SuggestSwaps',
            loopgrpc_dot_compiled_dot_client__pb2.SuggestSwapsRequest.SerializeToString,
            loopgrpc_dot_compiled_dot_client__pb2.SuggestSwapsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
