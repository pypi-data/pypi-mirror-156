{"version":3,"file":"changeform.ef17e576ecb97afa00e1.js","mappings":"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","sources":["webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-formset/_management-form.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-formset/_formset.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-formset/_inline-formset.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/scroll-top-button/scroll-top-button.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/js/changeform.js"],"sourcesContent":["const TOTAL_FORMS_SELECTOR = 'input[name$=\"-TOTAL_FORMS\"]';\nconst INITIAL_FORMS_SELECTOR = 'input[name$=\"-INITIAL_FORMS\"]';\nconst MIN_NUM_FORMS_SELECTOR = 'input[name$=\"-MIN_NUM_FORMS\"]';\nconst MAX_NUM_FORMS_SELECTOR = 'input[name$=\"-MAX_NUM_FORMS\"]';\n\nclass ManagementForm {\n    constructor(root) {\n        this.root = root;\n    }\n\n    get totalForms() {\n        const input = this.root.querySelector(TOTAL_FORMS_SELECTOR);\n        return parseInt(input.value.toString());\n    }\n\n    set totalForms(value) {\n        const intValue = parseInt(value);\n        if (isNaN(intValue) || intValue < 0) {\n            throw new Error(`Invalid value: ${value}`);\n        }\n\n        const input = this.root.querySelector(TOTAL_FORMS_SELECTOR);\n        input.value = intValue;\n    }\n\n    get initialForms() {\n        const input = this.root.querySelector(INITIAL_FORMS_SELECTOR);\n        return parseInt(input.value.toString());\n    }\n\n    set initialForms(value) {\n        const intValue = parseInt(value);\n        if (isNaN(intValue) || intValue < 0) {\n            throw new Error(`Invalid value: ${value}`);\n        }\n\n        const input = this.root.querySelector(INITIAL_FORMS_SELECTOR);\n        input.value = intValue;\n    }\n\n    get minForms() {\n        const input = this.root.querySelector(MIN_NUM_FORMS_SELECTOR);\n        if (input) {\n            return parseInt(input.value.toString());\n        } else {\n            return 0;\n        }\n    }\n\n    set minForms(value) {\n        const intValue = parseInt(value);\n        if (isNaN(intValue) || intValue < 0) {\n            throw new Error(`Invalid value: ${value}`);\n        }\n\n        const input = this.root.querySelector(MIN_NUM_FORMS_SELECTOR);\n        input.value = intValue;\n    }\n\n    get maxForms() {\n        const input = this.root.querySelector(MAX_NUM_FORMS_SELECTOR);\n        if (input) {\n            return parseInt(input.value.toString());\n        } else {\n            return Infinity;\n        }\n    }\n\n    set maxForms(value) {\n        const intValue = parseInt(value);\n        if (isNaN(intValue) || intValue < 0) {\n            throw new Error(`Invalid value: ${value}`);\n        }\n\n        const input = this.root.querySelector(MAX_NUM_FORMS_SELECTOR);\n        input.value = intValue;\n    }\n}\n\nexport default ManagementForm;\n","import ManagementForm from \"./_management-form.js\";\n\n/**\n * Базовый класс для Django-формсетов.\n *\n * Основные приципы работы:\n * 1) Желательно задать корневому элементу форсета уникальный ID, чтобы иметь\n *    возможность указать зависимым элементам, с каким именно формсетом они будут работать.\n *\n * 2) Префикс формсета задается через атрибут \"data-formset-prefix\".\n *\n * 3) Контейнер для форм задается атрибутом \"data-formset-form-container\".\n *\n * 4) Селектор форм формсета задается атрибутом \"data-formset-form-selector\".\n *\n * 5) Шаблонный элемент для новых форм задается через атрибут \"data-formset-form-template\".\n *\n *      <div id=\"example-formset\"\n *           data-formset-prefix=\"example\"\n *           data-formset-form-container=\".example-forms\"\n *           data-formset-form-selector=\".example-form\"\n *           data-formset-form-template=\"example-form-template\">\n *        <div class=\"example-forms\">\n *          ...\n *        </div>\n *      </div>\n *\n *      <template id=\"example-form-template\">\n *        <div class=\"example-form\">\n *          ...\n *        </div>\n *      </template>\n *\n * 6) Кнопки добавления формы должна иметь атрибут data-formset-toggle=\"add\".\n *    Если кнопка находится за пределами корневого элемента формсета, необходимо\n *    добавить атрибут \"data-formset\" с ID формсета.\n *\n *      <button data-formset-toggle=\"add\" data-formset=\"example-formset\">\n *        Add form\n *      </button>\n *\n * 7) Кнопка удаления ещё не сохраненной формы должна иметь атрибут\n *    data-formset-toggle=\"delete\" и располагаться в пределах формы.\n *\n *      <button data-formset-toggle=\"delete\">\n *        Delete this form\n *      </button>\n *\n * 8) Кнопки сортировки форм должны иметь атрибут \"data-formset-toggle\" со\n *    значениями \"up\" либо \"down\" и располагаться в пределах формы.\n *\n */\nclass Formset {\n    constructor(root) {\n        this.root = root;\n        this.management_form = new ManagementForm(root);\n\n        this._initAddFormButtons();\n        this._initDeleteFormButtons();\n        this._initSortFormButtons();\n    }\n\n    get prefix() {\n        const prefix = this.root.dataset.formsetPrefix;\n        if (!prefix) {\n            throw new Error(\"formset prefix required\");\n        }\n\n        return prefix;\n    }\n\n    get formContainer() {\n        const selector = this.root.dataset.formsetFormContainer;\n        if (!selector) {\n            throw new Error(\"container selector required\");\n        }\n\n        const container = this.root.querySelector(selector);\n        if (!container) {\n            throw new Error(\"container not found\");\n        }\n\n        return container;\n    }\n\n    get formSelector() {\n        const formSelector = this.root.dataset.formsetFormSelector;\n        if (!formSelector) {\n            throw new Error(\"form selector required\");\n        }\n\n        return formSelector;\n    }\n\n    get templateId() {\n        const templateId = this.root.dataset.formsetFormTemplate;\n        if (!templateId) {\n            throw new Error(\"form template ID required\");\n        }\n\n        return templateId;\n    }\n\n    get formTemplate() {\n        const templateElement = document.getElementById(this.templateId);\n        if (!templateElement) {\n            throw new Error(\"form template element not found\");\n        }\n\n        return templateElement;\n    }\n\n    /**\n     * Возвращает текущие формы формсета.\n     * @returns {NodeListOf<HTMLElement>}\n     */\n    getForms() {\n        return this.formContainer.querySelectorAll(this.formSelector);\n    }\n\n    /**\n     * Возвращает порядковый номер формы в формсете.\n     * !! Внимание !! Это не тот же индекс, что передается в setFormIndex !!\n     * @param {HTMLElement} form\n     * @returns {number}\n     */\n    getFormIndex(form) {\n        return Array.from(this.getForms()).indexOf(form);\n    }\n\n    /**\n     * Возвращает массив кнопок добавления формы в формсет.\n     * @returns {HTMLElement[]}\n     */\n    getAddFormButtons() {\n        const buttons = [];\n\n        document.querySelectorAll('[data-formset-toggle=\"add\"]').forEach(\n            function (button) {\n                if (this.root.id && button.dataset.formset === this.root.id) {\n                    buttons.push(button);\n                } else if (this.root.contains(button) && !button.dataset.formset) {\n                    buttons.push(button);\n                }\n            }.bind(this)\n        );\n\n        return buttons;\n    }\n\n    /**\n     * Возвращает массив кнопок удаления форм.\n     * @returns {HTMLElement[]}\n     */\n    getDeleteFormButtons() {\n        let buttons = [];\n\n        this.getForms().forEach(\n            function (form) {\n                const deleteFormButtons = form.querySelectorAll('[data-formset-toggle=\"delete\"]');\n                if (deleteFormButtons.length) {\n                    buttons = buttons.concat(Array.from(deleteFormButtons));\n                }\n            }.bind(this)\n        );\n\n        return buttons;\n    }\n\n    /**\n     * Возвращает массив кнопок сортировки форм.\n     * @returns {HTMLElement[]}\n     */\n    getSortFormButtons() {\n        let buttons = [];\n\n        this.getForms().forEach(\n            function (form) {\n                const moveUpButtons = form.querySelectorAll('[data-formset-toggle=\"up\"]');\n                if (moveUpButtons.length) {\n                    buttons = buttons.concat(Array.from(moveUpButtons));\n                }\n\n                const moveDownButtons = form.querySelectorAll('[data-formset-toggle=\"down\"]');\n                if (moveDownButtons.length) {\n                    buttons = buttons.concat(Array.from(moveDownButtons));\n                }\n            }.bind(this)\n        );\n\n        return buttons;\n    }\n\n    /**\n     * Включение/выключение кнопки добавления формы.\n     * @param {HTMLElement} button\n     * @param {Boolean} state\n     */\n    setAddFormButtonState(button, state) {\n        button.disabled = !state;\n    }\n\n    /**\n     * Включение/выключение кнопки удаления формы.\n     * @param {HTMLElement} button\n     * @param {Boolean} state\n     */\n    setDeleteFormButtonState(button, state) {\n        button.disabled = !state;\n    }\n\n    /**\n     * Включение/выключение кнопки сортировки форм.\n     * @param {HTMLElement} button\n     * @param {Boolean} state\n     */\n    setSortFormButtonState(button, state) {\n        button.disabled = !state;\n    }\n\n    _initAddFormButtons() {\n        document.addEventListener(\n            \"click\",\n            function (event) {\n                const button = event.target.closest('[data-formset-toggle=\"add\"]');\n                if (button) {\n                    if (this.root.id && button.dataset.formset === this.root.id) {\n                        this.addForm();\n                    } else if (this.root.contains(button) && !button.dataset.formset) {\n                        this.addForm();\n                    }\n                }\n            }.bind(this)\n        );\n    }\n\n    _initDeleteFormButtons() {\n        document.addEventListener(\n            \"click\",\n            function (event) {\n                const button = event.target.closest('[data-formset-toggle=\"delete\"]');\n                if (button && this.root.contains(button)) {\n                    const form = button.closest(this.formSelector);\n                    if (form) {\n                        this.deleteForm(form);\n                    }\n                }\n            }.bind(this)\n        );\n    }\n\n    _initSortFormButtons() {\n        document.addEventListener(\n            \"click\",\n            function (event) {\n                const moveUpButton = event.target.closest('[data-formset-toggle=\"up\"]');\n                const moveDownButton = event.target.closest('[data-formset-toggle=\"down\"]');\n\n                if (moveUpButton && this.root.contains(moveUpButton)) {\n                    const form = moveUpButton.closest(this.formSelector);\n                    if (form) {\n                        this.moveFormUp(form);\n                    }\n                } else if (moveDownButton && this.root.contains(moveDownButton)) {\n                    const form = moveDownButton.closest(this.formSelector);\n                    if (form) {\n                        this.moveFormDown(form);\n                    }\n                }\n            }.bind(this)\n        );\n    }\n\n    addForm() {\n        if (this.management_form.totalForms >= this.management_form.maxForms) {\n            throw new Error(\"Maximum number of forms is reached\");\n        }\n\n        const formFragment = this.formTemplate.content.cloneNode(true);\n        const form = formFragment.children[0];\n\n        this.formContainer.appendChild(formFragment);\n\n        this.management_form.totalForms++;\n\n        this.updateFormIndexes();\n        this.updateFormOrder();\n        this.updateButtonsState();\n\n        return form;\n    }\n\n    deleteForm(form) {\n        if (this.management_form.totalForms <= this.management_form.minForms) {\n            throw new Error(\"Minimum number of forms is reached\");\n        }\n\n        this.management_form.totalForms--;\n\n        form.remove();\n\n        this.updateFormIndexes();\n        this.updateFormOrder();\n        this.updateButtonsState();\n    }\n\n    moveFormUp(form) {\n        const formIndex = this.getFormIndex(form);\n        if (formIndex === 0) {\n            throw new Error(\"form is already first\");\n        }\n\n        const previousForm = this.getForms()[formIndex - 1];\n        form.after(previousForm);\n\n        this.updateFormIndexes();\n        this.updateFormOrder();\n        this.updateButtonsState();\n    }\n\n    moveFormDown(form) {\n        const formCount = this.getForms().length;\n        const formIndex = this.getFormIndex(form);\n        if (formIndex === formCount - 1) {\n            throw new Error(\"form is already last\");\n        }\n\n        const nextForm = this.getForms()[formIndex + 1];\n        form.before(nextForm);\n\n        this.updateFormIndexes();\n        this.updateFormOrder();\n        this.updateButtonsState();\n    }\n\n    /**\n     * Установка Django-индекса для всех форм в соответствии с их порядком в DOM.\n     * Можно указать форму, которую следует пропустить при обходе. Это позволит\n     * указать корректные Django-индексы при удалении, не дожидаясь физического\n     * удаления формы из DOM.\n     * @param {HTMLElement} skip\n     */\n    updateFormIndexes(skip = null) {\n        let index = 0;\n        this.getForms().forEach(\n            function (form) {\n                if (form !== skip) {\n                    this.setFormIndex(form, index++);\n                }\n            }.bind(this)\n        );\n    }\n\n    /**\n     * Установка Django-индекса формы для всех элементов в пределах формы.\n     * @param {HTMLElement} form\n     * @param {Number} index\n     */\n    setFormIndex(form, index) {\n        this._setElementIndex(form, index);\n        form.querySelectorAll(\"*\").forEach(\n            function (element) {\n                this._setElementIndex(element, index);\n            }.bind(this)\n        );\n    }\n\n    /**\n     * Установка Django-индекса формы в атрибутах указанного элемента.\n     * @param {HTMLElement} element\n     * @param {Number} index\n     * @private\n     */\n    _setElementIndex(element, index) {\n        const regex = new RegExp(\"(\" + this.prefix + \"-(\\\\d+|__prefix__))\");\n        const replacement = this.prefix + \"-\" + index;\n\n        if (element.htmlFor) {\n            element.htmlFor = element.htmlFor.replace(regex, replacement);\n        }\n\n        if (element.id) {\n            element.id = element.id.replace(regex, replacement);\n        }\n\n        if (element.name) {\n            element.name = element.name.replace(regex, replacement);\n        }\n    }\n\n    /**\n     * Установка поля сортировки для всех форм в соответствии с их порядком в DOM.\n     * Можно указать форму, которую следует пропустить при обходе. Это позволит\n     * указать корректную сортировку при удалении, не дожидаясь физического\n     * удаления формы из DOM.\n     * @param {HTMLElement} skip\n     */\n    updateFormOrder(skip = null) {\n        let index = 0;\n        this.getForms().forEach(\n            function (form) {\n                if (form !== skip) {\n                    this.setFormOrder(form, index++);\n                }\n            }.bind(this)\n        );\n    }\n\n    /**\n     * Установка значения в поле сортровки формы.\n     * @param {HTMLElement} form\n     * @param {Number} value\n     */\n    setFormOrder(form, value) {}\n\n    /**\n     * Обновление стостояния всех кнопок формсета.\n     */\n    updateButtonsState() {\n        const disableAdd = this.management_form.totalForms >= this.management_form.maxForms;\n        this.getAddFormButtons().forEach(\n            function (button) {\n                this.setAddFormButtonState(button, !disableAdd);\n            }.bind(this)\n        );\n\n        const disableDelete = this.management_form.totalForms <= this.management_form.minForms;\n        this.getDeleteFormButtons().forEach(\n            function (button) {\n                this.setDeleteFormButtonState(button, !disableDelete);\n            }.bind(this)\n        );\n\n        const formCount = this.getForms().length;\n        this.getSortFormButtons().forEach(\n            function (button) {\n                const form = button.closest(this.formSelector);\n                const formIndex = this.getFormIndex(form);\n                const direction = button.dataset.formsetToggle;\n                let state = true;\n\n                if (formIndex === 0 && direction === \"up\") {\n                    state = false;\n                }\n\n                if (formIndex === formCount - 1 && direction === \"down\") {\n                    state = false;\n                }\n\n                this.setSortFormButtonState(button, state);\n            }.bind(this)\n        );\n    }\n}\n\nexport default Formset;\n","import emitters from \"js/utilities/emitters.js\";\nimport { gsap } from \"gsap\";\nimport { ScrollToPlugin } from \"gsap/ScrollToPlugin\";\nimport Formset from \"./_formset.js\";\n\ngsap.registerPlugin(ScrollToPlugin);\n\nclass InlineFormset extends Formset {\n    constructor(root) {\n        super(root);\n        this._isTransitioning = false;\n    }\n\n    setAddFormButtonState(button, state) {\n        // отключение кнопок во время анимации\n        const finalState = !this._isTransitioning && state;\n        super.setAddFormButtonState(button, finalState);\n        button.classList.toggle(\"disabled\", !finalState);\n    }\n\n    setDeleteFormButtonState(button, state) {\n        // отключение кнопок во время анимации\n        const finalState = !this._isTransitioning && state;\n        super.setDeleteFormButtonState(button, finalState);\n        button.classList.toggle(\"disabled\", !finalState);\n    }\n\n    setSortFormButtonState(button, state) {\n        // отключение кнопок во время анимации\n        const finalState = !this._isTransitioning && state;\n        super.setSortFormButtonState(button, finalState);\n        button.classList.toggle(\"disabled\", !finalState);\n    }\n\n    addForm() {\n        this._isTransitioning = true;\n        const form = super.addForm();\n\n        // Events\n        emitters.dom.trigger(\"mutate\", [form]);\n        emitters.inlines.trigger(\"add\", [form, this.prefix]);\n\n        // Animation\n        const onAddCallback = function () {\n            this._isTransitioning = false;\n            this.updateButtonsState();\n\n            // Events\n            emitters.inlines.trigger(\"added\", [form, this.prefix]);\n\n            // Django compatible\n            $(document).trigger(\"formset:added\", [$(form), this.prefix]);\n        }.bind(this);\n\n        const animationOptions = {\n            onComplete: onAddCallback\n        };\n\n        if (this.root.classList.contains(\"paper-formset--tabular\")) {\n            animationOptions.duration = 0.2;\n            animationOptions.opacity = 0;\n            animationOptions.clearProps = \"opacity\";\n        } else {\n            animationOptions.duration = 0.3;\n            animationOptions.height = 0;\n            animationOptions.clearProps = \"height\";\n        }\n\n        gsap.from(form, animationOptions);\n\n        return form;\n    }\n\n    deleteForm(form) {\n        if (this.management_form.totalForms <= this.management_form.minForms) {\n            throw new Error(\"Minimum number of forms is reached\");\n        }\n\n        this.management_form.totalForms--;\n\n        // Устанавливаем корректные индексы форм, не дожидаясь анимаций.\n        this.setFormIndex(form, this.management_form.totalForms);\n        this.updateFormIndexes(form);\n\n        // Устанавливаем коректную сортировку форм, не дожидаясь анимаций.\n        this.updateFormOrder(form);\n\n        // Events\n        emitters.inlines.trigger(\"remove\", [form, this.prefix]);\n\n        // Animation\n        this._isTransitioning = true;\n        this.updateButtonsState();\n\n        const onDeleteCallback = function () {\n            emitters.dom.trigger(\"release\", [form]);\n\n            form.remove();\n\n            this._isTransitioning = false;\n            this.updateButtonsState();\n\n            // Events\n            emitters.inlines.trigger(\"removed\", [form, this.prefix]);\n\n            // Django compatible\n            $(document).trigger(\"formset:removed\", [$(form), this.prefix]);\n        }.bind(this);\n\n        const animationOptions = {\n            onComplete: onDeleteCallback\n        };\n\n        if (this.root.classList.contains(\"paper-formset--tabular\")) {\n            animationOptions.duration = 0.2;\n            animationOptions.opacity = 0;\n        } else {\n            animationOptions.duration = 0.3;\n            animationOptions.height = 0;\n        }\n\n        gsap.to(form, animationOptions);\n    }\n\n    moveFormUp(form) {\n        const formIndex = this.getFormIndex(form);\n        if (formIndex === 0) {\n            throw new Error(\"the form is first already\");\n        }\n\n        const previousForm = this.getForms()[formIndex - 1];\n        this._swapForms(previousForm, form, \"up\");\n    }\n\n    moveFormDown(form) {\n        const formCount = this.getForms().length;\n        const formIndex = this.getFormIndex(form);\n        if (formIndex === formCount - 1) {\n            throw new Error(\"the form is last already\");\n        }\n\n        const nextForm = this.getForms()[formIndex + 1];\n        this._swapForms(form, nextForm, \"down\");\n    }\n\n    /**\n     * Меняет местами формы form1 и form2.\n     * Порядок указания форм должен совпадать с их порядком в DOM, т.е. form1\n     * должна быть выше form2.\n     * @param {HTMLElement} form1\n     * @param {HTMLElement} form2\n     * @param {string} direction\n     * @private\n     */\n    _swapForms(form1, form2, direction) {\n        const initialRect1 = form1.getBoundingClientRect();\n        const initialRect2 = form2.getBoundingClientRect();\n\n        // TIP: при изменении форм местами может проскроллиться страница\n        // (возможно из-за фокуса). Это внесет ошибку в дальнейшие рассчеты.\n        // Поэтому фиксируем вертикальное расположение окна браузера.\n        const currentPageOffset = window.pageYOffset || document.documentElement.scrollTop;\n        form2.after(form1);\n        window.scrollTo(0, currentPageOffset);\n\n        const swappedRect1 = form1.getBoundingClientRect();\n        const swappedRect2 = form2.getBoundingClientRect();\n\n        this.updateFormIndexes();\n        this.updateFormOrder();\n\n        // Имитация начального расположения форм с помощью CSS-трансформаций.\n        this.formContainer.style.transformStyle = \"preserve-3d\";\n        if (direction === \"up\") {\n            form1.style.transform = `translate3d(0, ${initialRect1.top - swappedRect1.top}px, 0)`;\n            form2.style.transform = `translate3d(0, ${initialRect2.top - swappedRect2.top}px, 1px)`;\n        } else {\n            form1.style.transform = `translate3d(0, ${initialRect1.top - swappedRect1.top}px, 1px)`;\n            form2.style.transform = `translate3d(0, ${initialRect2.top - swappedRect2.top}px, 0)`;\n        }\n\n        // Animation\n        this._isTransitioning = true;\n        this.updateButtonsState();\n\n        const onSwapCallback = function () {\n            this._isTransitioning = false;\n            this.updateButtonsState();\n\n            this.formContainer.style.transformStyle = \"\";\n        }.bind(this);\n\n        const animationOptions = {\n            y: 0,\n            clearProps: \"transform\"\n        };\n\n        if (this.root.classList.contains(\"paper-formset--tabular\")) {\n            animationOptions.duration = 0.25;\n        } else {\n            animationOptions.duration = 0.5;\n        }\n\n        const tl = gsap\n            .timeline({\n                onComplete: onSwapCallback\n            })\n            .to(form1, animationOptions)\n            .to(form2, animationOptions, 0);\n\n        // Перемещение окна вместе с формой.\n        let finalPageOffset;\n        let preventScroll;\n        if (direction === \"up\") {\n            finalPageOffset = currentPageOffset + (swappedRect2.top - initialRect2.top);\n            preventScroll = initialRect2.top > 0.5 * window.innerHeight && swappedRect2.top > 0.5 * window.innerHeight;\n        } else {\n            finalPageOffset = currentPageOffset + (swappedRect1.top - initialRect1.top);\n            preventScroll = initialRect1.top < 0.5 * window.innerHeight && swappedRect1.top < 0.5 * window.innerHeight;\n        }\n\n        if (!preventScroll) {\n            tl.to(\n                window,\n                {\n                    duration: animationOptions.duration,\n                    scrollTo: {\n                        y: Math.max(0, finalPageOffset)\n                    }\n                },\n                0\n            );\n        }\n    }\n\n    setFormOrder(form, value) {\n        super.setFormOrder(form, value);\n\n        const input = form.querySelector(\".paper-formset__order\");\n        if (input) {\n            input.value = value;\n        }\n    }\n\n    setFormIndex(form, index) {\n        super.setFormIndex(form, index);\n\n        // Обновление индекса в заголовке stacked-формы.\n        const caption = form.querySelector(\".paper-formset__form-caption\");\n        if (caption) {\n            caption.innerHTML = caption.innerHTML.replace(/#(\\d+|__prefix__)/g, \"#\" + (index + 1));\n        }\n\n        // Обновление кнопки удаления\n        const deleteFormButton = form.querySelector('[data-formset-toggle=\"delete\"]');\n        if (deleteFormButton && deleteFormButton.dataset.formsetForm) {\n            const regex = new RegExp(\"(\" + this.prefix + \"-(\\\\d+|__prefix__))\");\n            const replacement = this.prefix + \"-\" + index;\n            const formId = deleteFormButton.dataset.formsetForm.replace(regex, replacement);\n            deleteFormButton.setAttribute(\"data-formset-form\", formId);\n        }\n    }\n}\n\nexport default InlineFormset;\n","import { gsap } from \"gsap\";\nimport { ScrollToPlugin } from \"gsap/ScrollToPlugin\";\n\nimport \"./scroll-top-button.scss\";\n\ngsap.registerPlugin(ScrollToPlugin);\n\ndocument.addEventListener(\"click\", function (event) {\n    const button = event.target.closest(\".scroll-top-button\");\n    if (button) {\n        gsap.to(window, {\n            duration: 0.3,\n            scrollTo: {\n                y: 0\n            }\n        });\n    }\n});\n\nwindow.addEventListener(\"scroll\", function () {\n    const button = document.querySelector(\".scroll-top-button\");\n    if (button) {\n        button.classList.toggle(\"show\", window.pageYOffset >= document.documentElement.clientHeight * 0.75);\n    }\n});\n","import formUtils from \"js/utilities/form_utils.js\";\nimport { Select2Widget } from \"components/select2\";\nimport { InlineFormset } from \"bem/paper-formset/paper-formset.js\";\nimport \"bem/scroll-top-button/scroll-top-button.js\";\n\n// Select2 для выпадающих списков\nconst select2_changeform = new Select2Widget({\n    width: \"\",\n    allowClear: true\n});\nselect2_changeform.observe(\".select-field select\");\nselect2_changeform.initAll(\".select-field select\");\n\n// Инициализация inline-форм\nlet formsets = [];\ndocument.querySelectorAll(\".paper-formset\").forEach(function (element) {\n    const formset = new InlineFormset(element);\n    formset.updateButtonsState();\n    formsets.push(formset);\n});\n\n// Установка значения поля сортировки перед сохранением.\n// Назначить сортировку сразу нельзя из-за того, что extra-формы не должны меняться.\ndocument.addEventListener(\"submit\", function () {\n    formsets.forEach(function (formset) {\n        let index = 0;\n        formset.getForms().forEach(\n            function (form) {\n                if (form.classList.contains(\"has_original\") || formUtils.containsChangedField(form)) {\n                    this.setFormOrder(form, index++);\n                }\n            }.bind(formset)\n        );\n    });\n});\n"],"names":["TOTAL_FORMS_SELECTOR","INITIAL_FORMS_SELECTOR","MIN_NUM_FORMS_SELECTOR","MAX_NUM_FORMS_SELECTOR","constructor","root","this","totalForms","input","querySelector","parseInt","value","toString","intValue","isNaN","Error","initialForms","minForms","maxForms","Infinity","management_form","ManagementForm","_initAddFormButtons","_initDeleteFormButtons","_initSortFormButtons","prefix","dataset","formsetPrefix","formContainer","selector","formsetFormContainer","container","formSelector","formsetFormSelector","templateId","formsetFormTemplate","formTemplate","templateElement","document","getElementById","getForms","querySelectorAll","getFormIndex","form","Array","from","indexOf","getAddFormButtons","buttons","forEach","button","id","formset","contains","push","bind","getDeleteFormButtons","deleteFormButtons","length","concat","getSortFormButtons","moveUpButtons","moveDownButtons","setAddFormButtonState","state","disabled","setDeleteFormButtonState","setSortFormButtonState","addEventListener","event","target","closest","addForm","deleteForm","moveUpButton","moveDownButton","moveFormUp","moveFormDown","formFragment","content","cloneNode","children","appendChild","updateFormIndexes","updateFormOrder","updateButtonsState","remove","formIndex","previousForm","after","formCount","nextForm","before","skip","index","setFormIndex","_setElementIndex","element","regex","RegExp","replacement","htmlFor","replace","name","setFormOrder","disableAdd","disableDelete","direction","formsetToggle","gsap","ScrollToPlugin","Formset","super","_isTransitioning","finalState","classList","toggle","emitters","animationOptions","onComplete","$","trigger","duration","opacity","clearProps","height","_swapForms","form1","form2","initialRect1","getBoundingClientRect","initialRect2","currentPageOffset","window","pageYOffset","documentElement","scrollTop","scrollTo","swappedRect1","swappedRect2","style","transformStyle","transform","top","onSwapCallback","y","tl","to","finalPageOffset","preventScroll","innerHeight","Math","max","caption","innerHTML","deleteFormButton","formsetForm","formId","setAttribute","clientHeight","select2_changeform","Select2Widget","width","allowClear","observe","initAll","formsets","InlineFormset","formUtils"],"sourceRoot":""}