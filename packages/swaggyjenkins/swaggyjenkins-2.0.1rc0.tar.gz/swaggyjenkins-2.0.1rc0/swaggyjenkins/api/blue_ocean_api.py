"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification  # noqa: E501

    The version of the OpenAPI document: 2.0.1-pre.0
    Contact: blah@cliffano.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from swaggyjenkins.api_client import ApiClient, Endpoint as _Endpoint
from swaggyjenkins.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from swaggyjenkins.model.branch_impl import BranchImpl
from swaggyjenkins.model.favorite_impl import FavoriteImpl
from swaggyjenkins.model.github_scm import GithubScm
from swaggyjenkins.model.multibranch_pipeline import MultibranchPipeline
from swaggyjenkins.model.organisation import Organisation
from swaggyjenkins.model.organisations import Organisations
from swaggyjenkins.model.pipeline import Pipeline
from swaggyjenkins.model.pipeline_activities import PipelineActivities
from swaggyjenkins.model.pipeline_folder_impl import PipelineFolderImpl
from swaggyjenkins.model.pipeline_impl import PipelineImpl
from swaggyjenkins.model.pipeline_queue import PipelineQueue
from swaggyjenkins.model.pipeline_run import PipelineRun
from swaggyjenkins.model.pipeline_run_node import PipelineRunNode
from swaggyjenkins.model.pipeline_run_node_steps import PipelineRunNodeSteps
from swaggyjenkins.model.pipeline_run_nodes import PipelineRunNodes
from swaggyjenkins.model.pipeline_runs import PipelineRuns
from swaggyjenkins.model.pipeline_step_impl import PipelineStepImpl
from swaggyjenkins.model.pipelines import Pipelines
from swaggyjenkins.model.queue_item_impl import QueueItemImpl
from swaggyjenkins.model.scm_organisations import ScmOrganisations
from swaggyjenkins.model.user import User
from swaggyjenkins.model.user_favorites import UserFavorites


class BlueOceanApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.delete_pipeline_queue_item_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}',
                'operation_id': 'delete_pipeline_queue_item',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                    'queue',
                ],
                'required': [
                    'organization',
                    'pipeline',
                    'queue',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                    'queue':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                    'queue': 'queue',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                    'queue': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_authenticated_user_endpoint = _Endpoint(
            settings={
                'response_type': (User,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/user/',
                'operation_id': 'get_authenticated_user',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                ],
                'required': [
                    'organization',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                },
                'location_map': {
                    'organization': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_classes_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/classes/{class}',
                'operation_id': 'get_classes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    '_class',
                ],
                'required': [
                    '_class',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    '_class':
                        (str,),
                },
                'attribute_map': {
                    '_class': 'class',
                },
                'location_map': {
                    '_class': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_json_web_key_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/jwt-auth/jwks/{key}',
                'operation_id': 'get_json_web_key',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'key',
                ],
                'required': [
                    'key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'key':
                        (int,),
                },
                'attribute_map': {
                    'key': 'key',
                },
                'location_map': {
                    'key': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_json_web_token_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/jwt-auth/token',
                'operation_id': 'get_json_web_token',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'expiry_time_in_mins',
                    'max_expiry_time_in_mins',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'expiry_time_in_mins':
                        (int,),
                    'max_expiry_time_in_mins':
                        (int,),
                },
                'attribute_map': {
                    'expiry_time_in_mins': 'expiryTimeInMins',
                    'max_expiry_time_in_mins': 'maxExpiryTimeInMins',
                },
                'location_map': {
                    'expiry_time_in_mins': 'query',
                    'max_expiry_time_in_mins': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_organisation_endpoint = _Endpoint(
            settings={
                'response_type': (Organisation,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}',
                'operation_id': 'get_organisation',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                ],
                'required': [
                    'organization',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                },
                'location_map': {
                    'organization': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_organisations_endpoint = _Endpoint(
            settings={
                'response_type': (Organisations,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/',
                'operation_id': 'get_organisations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pipeline_endpoint = _Endpoint(
            settings={
                'response_type': (Pipeline,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}',
                'operation_id': 'get_pipeline',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                ],
                'required': [
                    'organization',
                    'pipeline',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pipeline_activities_endpoint = _Endpoint(
            settings={
                'response_type': (PipelineActivities,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities',
                'operation_id': 'get_pipeline_activities',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                ],
                'required': [
                    'organization',
                    'pipeline',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pipeline_branch_endpoint = _Endpoint(
            settings={
                'response_type': (BranchImpl,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/',
                'operation_id': 'get_pipeline_branch',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                    'branch',
                ],
                'required': [
                    'organization',
                    'pipeline',
                    'branch',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                    'branch':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                    'branch': 'branch',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                    'branch': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pipeline_branch_run_endpoint = _Endpoint(
            settings={
                'response_type': (PipelineRun,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}',
                'operation_id': 'get_pipeline_branch_run',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                    'branch',
                    'run',
                ],
                'required': [
                    'organization',
                    'pipeline',
                    'branch',
                    'run',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                    'branch':
                        (str,),
                    'run':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                    'branch': 'branch',
                    'run': 'run',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                    'branch': 'path',
                    'run': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pipeline_branches_endpoint = _Endpoint(
            settings={
                'response_type': (MultibranchPipeline,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches',
                'operation_id': 'get_pipeline_branches',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                ],
                'required': [
                    'organization',
                    'pipeline',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pipeline_folder_endpoint = _Endpoint(
            settings={
                'response_type': (PipelineFolderImpl,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{folder}/',
                'operation_id': 'get_pipeline_folder',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'folder',
                ],
                'required': [
                    'organization',
                    'folder',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'folder':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'folder': 'folder',
                },
                'location_map': {
                    'organization': 'path',
                    'folder': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pipeline_folder_pipeline_endpoint = _Endpoint(
            settings={
                'response_type': (PipelineImpl,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}',
                'operation_id': 'get_pipeline_folder_pipeline',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                    'folder',
                ],
                'required': [
                    'organization',
                    'pipeline',
                    'folder',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                    'folder':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                    'folder': 'folder',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                    'folder': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pipeline_queue_endpoint = _Endpoint(
            settings={
                'response_type': (PipelineQueue,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue',
                'operation_id': 'get_pipeline_queue',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                ],
                'required': [
                    'organization',
                    'pipeline',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pipeline_run_endpoint = _Endpoint(
            settings={
                'response_type': (PipelineRun,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}',
                'operation_id': 'get_pipeline_run',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                    'run',
                ],
                'required': [
                    'organization',
                    'pipeline',
                    'run',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                    'run':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                    'run': 'run',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                    'run': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pipeline_run_log_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log',
                'operation_id': 'get_pipeline_run_log',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                    'run',
                    'start',
                    'download',
                ],
                'required': [
                    'organization',
                    'pipeline',
                    'run',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                    'run':
                        (str,),
                    'start':
                        (int,),
                    'download':
                        (bool,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                    'run': 'run',
                    'start': 'start',
                    'download': 'download',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                    'run': 'path',
                    'start': 'query',
                    'download': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pipeline_run_node_endpoint = _Endpoint(
            settings={
                'response_type': (PipelineRunNode,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}',
                'operation_id': 'get_pipeline_run_node',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                    'run',
                    'node',
                ],
                'required': [
                    'organization',
                    'pipeline',
                    'run',
                    'node',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                    'run':
                        (str,),
                    'node':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                    'run': 'run',
                    'node': 'node',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                    'run': 'path',
                    'node': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pipeline_run_node_step_endpoint = _Endpoint(
            settings={
                'response_type': (PipelineStepImpl,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}',
                'operation_id': 'get_pipeline_run_node_step',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                    'run',
                    'node',
                    'step',
                ],
                'required': [
                    'organization',
                    'pipeline',
                    'run',
                    'node',
                    'step',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                    'run':
                        (str,),
                    'node':
                        (str,),
                    'step':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                    'run': 'run',
                    'node': 'node',
                    'step': 'step',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                    'run': 'path',
                    'node': 'path',
                    'step': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pipeline_run_node_step_log_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log',
                'operation_id': 'get_pipeline_run_node_step_log',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                    'run',
                    'node',
                    'step',
                ],
                'required': [
                    'organization',
                    'pipeline',
                    'run',
                    'node',
                    'step',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                    'run':
                        (str,),
                    'node':
                        (str,),
                    'step':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                    'run': 'run',
                    'node': 'node',
                    'step': 'step',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                    'run': 'path',
                    'node': 'path',
                    'step': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pipeline_run_node_steps_endpoint = _Endpoint(
            settings={
                'response_type': (PipelineRunNodeSteps,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps',
                'operation_id': 'get_pipeline_run_node_steps',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                    'run',
                    'node',
                ],
                'required': [
                    'organization',
                    'pipeline',
                    'run',
                    'node',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                    'run':
                        (str,),
                    'node':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                    'run': 'run',
                    'node': 'node',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                    'run': 'path',
                    'node': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pipeline_run_nodes_endpoint = _Endpoint(
            settings={
                'response_type': (PipelineRunNodes,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes',
                'operation_id': 'get_pipeline_run_nodes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                    'run',
                ],
                'required': [
                    'organization',
                    'pipeline',
                    'run',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                    'run':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                    'run': 'run',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                    'run': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pipeline_runs_endpoint = _Endpoint(
            settings={
                'response_type': (PipelineRuns,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs',
                'operation_id': 'get_pipeline_runs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                ],
                'required': [
                    'organization',
                    'pipeline',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_pipelines_endpoint = _Endpoint(
            settings={
                'response_type': (Pipelines,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/',
                'operation_id': 'get_pipelines',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                ],
                'required': [
                    'organization',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                },
                'location_map': {
                    'organization': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_scm_endpoint = _Endpoint(
            settings={
                'response_type': (GithubScm,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/scm/{scm}',
                'operation_id': 'get_scm',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'scm',
                ],
                'required': [
                    'organization',
                    'scm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'scm':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'scm': 'scm',
                },
                'location_map': {
                    'organization': 'path',
                    'scm': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_scm_organisation_repositories_endpoint = _Endpoint(
            settings={
                'response_type': (ScmOrganisations,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories',
                'operation_id': 'get_scm_organisation_repositories',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'scm',
                    'scm_organisation',
                    'credential_id',
                    'page_size',
                    'page_number',
                ],
                'required': [
                    'organization',
                    'scm',
                    'scm_organisation',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'scm':
                        (str,),
                    'scm_organisation':
                        (str,),
                    'credential_id':
                        (str,),
                    'page_size':
                        (int,),
                    'page_number':
                        (int,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'scm': 'scm',
                    'scm_organisation': 'scmOrganisation',
                    'credential_id': 'credentialId',
                    'page_size': 'pageSize',
                    'page_number': 'pageNumber',
                },
                'location_map': {
                    'organization': 'path',
                    'scm': 'path',
                    'scm_organisation': 'path',
                    'credential_id': 'query',
                    'page_size': 'query',
                    'page_number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_scm_organisation_repository_endpoint = _Endpoint(
            settings={
                'response_type': (ScmOrganisations,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}',
                'operation_id': 'get_scm_organisation_repository',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'scm',
                    'scm_organisation',
                    'repository',
                    'credential_id',
                ],
                'required': [
                    'organization',
                    'scm',
                    'scm_organisation',
                    'repository',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'scm':
                        (str,),
                    'scm_organisation':
                        (str,),
                    'repository':
                        (str,),
                    'credential_id':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'scm': 'scm',
                    'scm_organisation': 'scmOrganisation',
                    'repository': 'repository',
                    'credential_id': 'credentialId',
                },
                'location_map': {
                    'organization': 'path',
                    'scm': 'path',
                    'scm_organisation': 'path',
                    'repository': 'path',
                    'credential_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_scm_organisations_endpoint = _Endpoint(
            settings={
                'response_type': (ScmOrganisations,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/scm/{scm}/organizations',
                'operation_id': 'get_scm_organisations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'scm',
                    'credential_id',
                ],
                'required': [
                    'organization',
                    'scm',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'scm':
                        (str,),
                    'credential_id':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'scm': 'scm',
                    'credential_id': 'credentialId',
                },
                'location_map': {
                    'organization': 'path',
                    'scm': 'path',
                    'credential_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_user_endpoint = _Endpoint(
            settings={
                'response_type': (User,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/users/{user}',
                'operation_id': 'get_user',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'user',
                ],
                'required': [
                    'organization',
                    'user',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'user':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'user': 'user',
                },
                'location_map': {
                    'organization': 'path',
                    'user': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_user_favorites_endpoint = _Endpoint(
            settings={
                'response_type': (UserFavorites,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/users/{user}/favorites',
                'operation_id': 'get_user_favorites',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user',
                ],
                'required': [
                    'user',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user':
                        (str,),
                },
                'attribute_map': {
                    'user': 'user',
                },
                'location_map': {
                    'user': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_users_endpoint = _Endpoint(
            settings={
                'response_type': (User,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/users/',
                'operation_id': 'get_users',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                ],
                'required': [
                    'organization',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                },
                'location_map': {
                    'organization': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.post_pipeline_run_endpoint = _Endpoint(
            settings={
                'response_type': (QueueItemImpl,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay',
                'operation_id': 'post_pipeline_run',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                    'run',
                ],
                'required': [
                    'organization',
                    'pipeline',
                    'run',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                    'run':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                    'run': 'run',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                    'run': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.post_pipeline_runs_endpoint = _Endpoint(
            settings={
                'response_type': (QueueItemImpl,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs',
                'operation_id': 'post_pipeline_runs',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                ],
                'required': [
                    'organization',
                    'pipeline',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.put_pipeline_favorite_endpoint = _Endpoint(
            settings={
                'response_type': (FavoriteImpl,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite',
                'operation_id': 'put_pipeline_favorite',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                    'body',
                ],
                'required': [
                    'organization',
                    'pipeline',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                    'body':
                        (bool,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.put_pipeline_run_endpoint = _Endpoint(
            settings={
                'response_type': (PipelineRun,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop',
                'operation_id': 'put_pipeline_run',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'organization',
                    'pipeline',
                    'run',
                    'blocking',
                    'time_out_in_secs',
                ],
                'required': [
                    'organization',
                    'pipeline',
                    'run',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'organization':
                        (str,),
                    'pipeline':
                        (str,),
                    'run':
                        (str,),
                    'blocking':
                        (str,),
                    'time_out_in_secs':
                        (int,),
                },
                'attribute_map': {
                    'organization': 'organization',
                    'pipeline': 'pipeline',
                    'run': 'run',
                    'blocking': 'blocking',
                    'time_out_in_secs': 'timeOutInSecs',
                },
                'location_map': {
                    'organization': 'path',
                    'pipeline': 'path',
                    'run': 'path',
                    'blocking': 'query',
                    'time_out_in_secs': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/search/',
                'operation_id': 'search',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'q',
                ],
                'required': [
                    'q',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'q':
                        (str,),
                },
                'attribute_map': {
                    'q': 'q',
                },
                'location_map': {
                    'q': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_classes_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'jenkins_auth'
                ],
                'endpoint_path': '/blue/rest/classes/',
                'operation_id': 'search_classes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'q',
                ],
                'required': [
                    'q',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'q':
                        (str,),
                },
                'attribute_map': {
                    'q': 'q',
                },
                'location_map': {
                    'q': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def delete_pipeline_queue_item(
        self,
        organization,
        pipeline,
        queue,
        **kwargs
    ):
        """delete_pipeline_queue_item  # noqa: E501

        Delete queue item from an organization pipeline queue  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_pipeline_queue_item(organization, pipeline, queue, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline
            queue (str): Name of the queue item

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        kwargs['queue'] = \
            queue
        return self.delete_pipeline_queue_item_endpoint.call_with_http_info(**kwargs)

    def get_authenticated_user(
        self,
        organization,
        **kwargs
    ):
        """get_authenticated_user  # noqa: E501

        Retrieve authenticated user details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_authenticated_user(organization, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            User
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        return self.get_authenticated_user_endpoint.call_with_http_info(**kwargs)

    def get_classes(
        self,
        _class,
        **kwargs
    ):
        """get_classes  # noqa: E501

        Get a list of class names supported by a given class  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_classes(_class, async_req=True)
        >>> result = thread.get()

        Args:
            _class (str): Name of the class

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['_class'] = \
            _class
        return self.get_classes_endpoint.call_with_http_info(**kwargs)

    def get_json_web_key(
        self,
        key,
        **kwargs
    ):
        """get_json_web_key  # noqa: E501

        Retrieve JSON Web Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_json_web_key(key, async_req=True)
        >>> result = thread.get()

        Args:
            key (int): Key ID received as part of JWT header field kid

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['key'] = \
            key
        return self.get_json_web_key_endpoint.call_with_http_info(**kwargs)

    def get_json_web_token(
        self,
        **kwargs
    ):
        """get_json_web_token  # noqa: E501

        Retrieve JSON Web Token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_json_web_token(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            expiry_time_in_mins (int): Token expiry time in minutes, default: 30 minutes. [optional]
            max_expiry_time_in_mins (int): Maximum token expiry time in minutes, default: 480 minutes. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_json_web_token_endpoint.call_with_http_info(**kwargs)

    def get_organisation(
        self,
        organization,
        **kwargs
    ):
        """get_organisation  # noqa: E501

        Retrieve organization details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organisation(organization, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Organisation
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        return self.get_organisation_endpoint.call_with_http_info(**kwargs)

    def get_organisations(
        self,
        **kwargs
    ):
        """get_organisations  # noqa: E501

        Retrieve all organizations details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organisations(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Organisations
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_organisations_endpoint.call_with_http_info(**kwargs)

    def get_pipeline(
        self,
        organization,
        pipeline,
        **kwargs
    ):
        """get_pipeline  # noqa: E501

        Retrieve pipeline details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline(organization, pipeline, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Pipeline
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        return self.get_pipeline_endpoint.call_with_http_info(**kwargs)

    def get_pipeline_activities(
        self,
        organization,
        pipeline,
        **kwargs
    ):
        """get_pipeline_activities  # noqa: E501

        Retrieve all activities details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_activities(organization, pipeline, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PipelineActivities
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        return self.get_pipeline_activities_endpoint.call_with_http_info(**kwargs)

    def get_pipeline_branch(
        self,
        organization,
        pipeline,
        branch,
        **kwargs
    ):
        """get_pipeline_branch  # noqa: E501

        Retrieve branch details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_branch(organization, pipeline, branch, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline
            branch (str): Name of the branch

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BranchImpl
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        kwargs['branch'] = \
            branch
        return self.get_pipeline_branch_endpoint.call_with_http_info(**kwargs)

    def get_pipeline_branch_run(
        self,
        organization,
        pipeline,
        branch,
        run,
        **kwargs
    ):
        """get_pipeline_branch_run  # noqa: E501

        Retrieve branch run details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_branch_run(organization, pipeline, branch, run, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline
            branch (str): Name of the branch
            run (str): Name of the run

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PipelineRun
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        kwargs['branch'] = \
            branch
        kwargs['run'] = \
            run
        return self.get_pipeline_branch_run_endpoint.call_with_http_info(**kwargs)

    def get_pipeline_branches(
        self,
        organization,
        pipeline,
        **kwargs
    ):
        """get_pipeline_branches  # noqa: E501

        Retrieve all branches details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_branches(organization, pipeline, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MultibranchPipeline
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        return self.get_pipeline_branches_endpoint.call_with_http_info(**kwargs)

    def get_pipeline_folder(
        self,
        organization,
        folder,
        **kwargs
    ):
        """get_pipeline_folder  # noqa: E501

        Retrieve pipeline folder for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_folder(organization, folder, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            folder (str): Name of the folder

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PipelineFolderImpl
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['folder'] = \
            folder
        return self.get_pipeline_folder_endpoint.call_with_http_info(**kwargs)

    def get_pipeline_folder_pipeline(
        self,
        organization,
        pipeline,
        folder,
        **kwargs
    ):
        """get_pipeline_folder_pipeline  # noqa: E501

        Retrieve pipeline details for an organization folder  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_folder_pipeline(organization, pipeline, folder, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline
            folder (str): Name of the folder

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PipelineImpl
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        kwargs['folder'] = \
            folder
        return self.get_pipeline_folder_pipeline_endpoint.call_with_http_info(**kwargs)

    def get_pipeline_queue(
        self,
        organization,
        pipeline,
        **kwargs
    ):
        """get_pipeline_queue  # noqa: E501

        Retrieve queue details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_queue(organization, pipeline, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PipelineQueue
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        return self.get_pipeline_queue_endpoint.call_with_http_info(**kwargs)

    def get_pipeline_run(
        self,
        organization,
        pipeline,
        run,
        **kwargs
    ):
        """get_pipeline_run  # noqa: E501

        Retrieve run details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run(organization, pipeline, run, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline
            run (str): Name of the run

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PipelineRun
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        kwargs['run'] = \
            run
        return self.get_pipeline_run_endpoint.call_with_http_info(**kwargs)

    def get_pipeline_run_log(
        self,
        organization,
        pipeline,
        run,
        **kwargs
    ):
        """get_pipeline_run_log  # noqa: E501

        Get log for a pipeline run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_log(organization, pipeline, run, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline
            run (str): Name of the run

        Keyword Args:
            start (int): Start position of the log. [optional]
            download (bool): Set to true in order to download the file, otherwise it's passed as a response body. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        kwargs['run'] = \
            run
        return self.get_pipeline_run_log_endpoint.call_with_http_info(**kwargs)

    def get_pipeline_run_node(
        self,
        organization,
        pipeline,
        run,
        node,
        **kwargs
    ):
        """get_pipeline_run_node  # noqa: E501

        Retrieve run node details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_node(organization, pipeline, run, node, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline
            run (str): Name of the run
            node (str): Name of the node

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PipelineRunNode
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        kwargs['run'] = \
            run
        kwargs['node'] = \
            node
        return self.get_pipeline_run_node_endpoint.call_with_http_info(**kwargs)

    def get_pipeline_run_node_step(
        self,
        organization,
        pipeline,
        run,
        node,
        step,
        **kwargs
    ):
        """get_pipeline_run_node_step  # noqa: E501

        Retrieve run node details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_node_step(organization, pipeline, run, node, step, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline
            run (str): Name of the run
            node (str): Name of the node
            step (str): Name of the step

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PipelineStepImpl
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        kwargs['run'] = \
            run
        kwargs['node'] = \
            node
        kwargs['step'] = \
            step
        return self.get_pipeline_run_node_step_endpoint.call_with_http_info(**kwargs)

    def get_pipeline_run_node_step_log(
        self,
        organization,
        pipeline,
        run,
        node,
        step,
        **kwargs
    ):
        """get_pipeline_run_node_step_log  # noqa: E501

        Get log for a pipeline run node step  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_node_step_log(organization, pipeline, run, node, step, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline
            run (str): Name of the run
            node (str): Name of the node
            step (str): Name of the step

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        kwargs['run'] = \
            run
        kwargs['node'] = \
            node
        kwargs['step'] = \
            step
        return self.get_pipeline_run_node_step_log_endpoint.call_with_http_info(**kwargs)

    def get_pipeline_run_node_steps(
        self,
        organization,
        pipeline,
        run,
        node,
        **kwargs
    ):
        """get_pipeline_run_node_steps  # noqa: E501

        Retrieve run node steps details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_node_steps(organization, pipeline, run, node, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline
            run (str): Name of the run
            node (str): Name of the node

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PipelineRunNodeSteps
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        kwargs['run'] = \
            run
        kwargs['node'] = \
            node
        return self.get_pipeline_run_node_steps_endpoint.call_with_http_info(**kwargs)

    def get_pipeline_run_nodes(
        self,
        organization,
        pipeline,
        run,
        **kwargs
    ):
        """get_pipeline_run_nodes  # noqa: E501

        Retrieve run nodes details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_run_nodes(organization, pipeline, run, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline
            run (str): Name of the run

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PipelineRunNodes
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        kwargs['run'] = \
            run
        return self.get_pipeline_run_nodes_endpoint.call_with_http_info(**kwargs)

    def get_pipeline_runs(
        self,
        organization,
        pipeline,
        **kwargs
    ):
        """get_pipeline_runs  # noqa: E501

        Retrieve all runs details for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipeline_runs(organization, pipeline, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PipelineRuns
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        return self.get_pipeline_runs_endpoint.call_with_http_info(**kwargs)

    def get_pipelines(
        self,
        organization,
        **kwargs
    ):
        """get_pipelines  # noqa: E501

        Retrieve all pipelines details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pipelines(organization, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Pipelines
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        return self.get_pipelines_endpoint.call_with_http_info(**kwargs)

    def get_scm(
        self,
        organization,
        scm,
        **kwargs
    ):
        """get_scm  # noqa: E501

        Retrieve SCM details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_scm(organization, scm, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            scm (str): Name of SCM

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GithubScm
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['scm'] = \
            scm
        return self.get_scm_endpoint.call_with_http_info(**kwargs)

    def get_scm_organisation_repositories(
        self,
        organization,
        scm,
        scm_organisation,
        **kwargs
    ):
        """get_scm_organisation_repositories  # noqa: E501

        Retrieve SCM organization repositories details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_scm_organisation_repositories(organization, scm, scm_organisation, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            scm (str): Name of SCM
            scm_organisation (str): Name of the SCM organization

        Keyword Args:
            credential_id (str): Credential ID. [optional]
            page_size (int): Number of items in a page. [optional]
            page_number (int): Page number. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScmOrganisations
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['scm'] = \
            scm
        kwargs['scm_organisation'] = \
            scm_organisation
        return self.get_scm_organisation_repositories_endpoint.call_with_http_info(**kwargs)

    def get_scm_organisation_repository(
        self,
        organization,
        scm,
        scm_organisation,
        repository,
        **kwargs
    ):
        """get_scm_organisation_repository  # noqa: E501

        Retrieve SCM organization repository details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_scm_organisation_repository(organization, scm, scm_organisation, repository, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            scm (str): Name of SCM
            scm_organisation (str): Name of the SCM organization
            repository (str): Name of the SCM repository

        Keyword Args:
            credential_id (str): Credential ID. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScmOrganisations
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['scm'] = \
            scm
        kwargs['scm_organisation'] = \
            scm_organisation
        kwargs['repository'] = \
            repository
        return self.get_scm_organisation_repository_endpoint.call_with_http_info(**kwargs)

    def get_scm_organisations(
        self,
        organization,
        scm,
        **kwargs
    ):
        """get_scm_organisations  # noqa: E501

        Retrieve SCM organizations details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_scm_organisations(organization, scm, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            scm (str): Name of SCM

        Keyword Args:
            credential_id (str): Credential ID. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ScmOrganisations
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['scm'] = \
            scm
        return self.get_scm_organisations_endpoint.call_with_http_info(**kwargs)

    def get_user(
        self,
        organization,
        user,
        **kwargs
    ):
        """get_user  # noqa: E501

        Retrieve user details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user(organization, user, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            user (str): Name of the user

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            User
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['user'] = \
            user
        return self.get_user_endpoint.call_with_http_info(**kwargs)

    def get_user_favorites(
        self,
        user,
        **kwargs
    ):
        """get_user_favorites  # noqa: E501

        Retrieve user favorites details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_favorites(user, async_req=True)
        >>> result = thread.get()

        Args:
            user (str): Name of the user

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            UserFavorites
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['user'] = \
            user
        return self.get_user_favorites_endpoint.call_with_http_info(**kwargs)

    def get_users(
        self,
        organization,
        **kwargs
    ):
        """get_users  # noqa: E501

        Retrieve users details for an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_users(organization, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            User
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        return self.get_users_endpoint.call_with_http_info(**kwargs)

    def post_pipeline_run(
        self,
        organization,
        pipeline,
        run,
        **kwargs
    ):
        """post_pipeline_run  # noqa: E501

        Replay an organization pipeline run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_pipeline_run(organization, pipeline, run, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline
            run (str): Name of the run

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            QueueItemImpl
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        kwargs['run'] = \
            run
        return self.post_pipeline_run_endpoint.call_with_http_info(**kwargs)

    def post_pipeline_runs(
        self,
        organization,
        pipeline,
        **kwargs
    ):
        """post_pipeline_runs  # noqa: E501

        Start a build for an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_pipeline_runs(organization, pipeline, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            QueueItemImpl
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        return self.post_pipeline_runs_endpoint.call_with_http_info(**kwargs)

    def put_pipeline_favorite(
        self,
        organization,
        pipeline,
        body,
        **kwargs
    ):
        """put_pipeline_favorite  # noqa: E501

        Favorite/unfavorite a pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_pipeline_favorite(organization, pipeline, body, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline
            body (bool): Set JSON string body to {\"favorite\": true} to favorite, set value to false to unfavorite

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            FavoriteImpl
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        kwargs['body'] = \
            body
        return self.put_pipeline_favorite_endpoint.call_with_http_info(**kwargs)

    def put_pipeline_run(
        self,
        organization,
        pipeline,
        run,
        **kwargs
    ):
        """put_pipeline_run  # noqa: E501

        Stop a build of an organization pipeline  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_pipeline_run(organization, pipeline, run, async_req=True)
        >>> result = thread.get()

        Args:
            organization (str): Name of the organization
            pipeline (str): Name of the pipeline
            run (str): Name of the run

        Keyword Args:
            blocking (str): Set to true to make blocking stop, default: false. [optional]
            time_out_in_secs (int): Timeout in seconds, default: 10 seconds. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PipelineRun
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['organization'] = \
            organization
        kwargs['pipeline'] = \
            pipeline
        kwargs['run'] = \
            run
        return self.put_pipeline_run_endpoint.call_with_http_info(**kwargs)

    def search(
        self,
        q,
        **kwargs
    ):
        """search  # noqa: E501

        Search for any resource details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search(q, async_req=True)
        >>> result = thread.get()

        Args:
            q (str): Query string

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['q'] = \
            q
        return self.search_endpoint.call_with_http_info(**kwargs)

    def search_classes(
        self,
        q,
        **kwargs
    ):
        """search_classes  # noqa: E501

        Get classes details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_classes(q, async_req=True)
        >>> result = thread.get()

        Args:
            q (str): Query string containing an array of class names

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['q'] = \
            q
        return self.search_classes_endpoint.call_with_http_info(**kwargs)

