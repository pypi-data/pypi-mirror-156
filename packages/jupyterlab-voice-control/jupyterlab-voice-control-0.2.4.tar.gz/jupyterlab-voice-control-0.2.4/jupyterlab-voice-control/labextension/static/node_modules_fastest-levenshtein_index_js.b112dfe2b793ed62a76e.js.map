{"version":3,"file":"node_modules_fastest-levenshtein_index_js.b112dfe2b793ed62a76e.js","mappings":";;;;;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,WAAW;AAC7B;AACA;AACA;AACA;AACA,SAAS,eAAe;AACxB;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,gBAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","sources":["webpack://jupyterlab-voice-control/./node_modules/fastest-levenshtein/index.js"],"sourcesContent":["\"use strict\";\nconst peq = new Uint32Array(0x10000);\nconst myers_32 = (a, b) => {\n  const n = a.length;\n  const m = b.length;\n  const lst = 1 << (n - 1);\n  let pv = -1;\n  let mv = 0;\n  let sc = n;\n  let i = n;\n  while (i--) {\n    peq[a.charCodeAt(i)] |= 1 << i;\n  }\n  for (i = 0; i < m; i++) {\n    let eq = peq[b.charCodeAt(i)];\n    const xv = eq | mv;\n    eq |= ((eq & pv) + pv) ^ pv;\n    mv |= ~(eq | pv);\n    pv &= eq;\n    if (mv & lst) {\n      sc++;\n    }\n    if (pv & lst) {\n      sc--;\n    }\n    mv = (mv << 1) | 1;\n    pv = (pv << 1) | ~(xv | mv);\n    mv &= xv;\n  }\n  i = n;\n  while (i--) {\n    peq[a.charCodeAt(i)] = 0;\n  }\n  return sc;\n};\n\nconst myers_x = (a, b) => {\n  const n = a.length;\n  const m = b.length;\n  const mhc = [];\n  const phc = [];\n  const hsize = Math.ceil(n / 32);\n  const vsize = Math.ceil(m / 32);\n  let score = m;\n  for (let i = 0; i < hsize; i++) {\n    phc[i] = -1;\n    mhc[i] = 0;\n  }\n  let j = 0;\n  for (; j < vsize - 1; j++) {\n    let mv = 0;\n    let pv = -1;\n    const start = j * 32;\n    const end = Math.min(32, m) + start;\n    for (let k = start; k < end; k++) {\n      peq[b.charCodeAt(k)] |= 1 << k;\n    }\n    score = m;\n    for (let i = 0; i < n; i++) {\n      const eq = peq[a.charCodeAt(i)];\n      const pb = (phc[(i / 32) | 0] >>> i) & 1;\n      const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n      const xv = eq | mv;\n      const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n      let ph = mv | ~(xh | pv);\n      let mh = pv & xh;\n      if ((ph >>> 31) ^ pb) {\n        phc[(i / 32) | 0] ^= 1 << i;\n      }\n      if ((mh >>> 31) ^ mb) {\n        mhc[(i / 32) | 0] ^= 1 << i;\n      }\n      ph = (ph << 1) | pb;\n      mh = (mh << 1) | mb;\n      pv = mh | ~(xv | ph);\n      mv = ph & xv;\n    }\n    for (let k = start; k < end; k++) {\n      peq[b.charCodeAt(k)] = 0;\n    }\n  }\n  let mv = 0;\n  let pv = -1;\n  const start = j * 32;\n  const end = Math.min(32, m - start) + start;\n  for (let k = start; k < end; k++) {\n    peq[b.charCodeAt(k)] |= 1 << k;\n  }\n  score = m;\n  for (let i = 0; i < n; i++) {\n    const eq = peq[a.charCodeAt(i)];\n    const pb = (phc[(i / 32) | 0] >>> i) & 1;\n    const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n    const xv = eq | mv;\n    const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n    let ph = mv | ~(xh | pv);\n    let mh = pv & xh;\n    score += (ph >>> (m - 1)) & 1;\n    score -= (mh >>> (m - 1)) & 1;\n    if ((ph >>> 31) ^ pb) {\n      phc[(i / 32) | 0] ^= 1 << i;\n    }\n    if ((mh >>> 31) ^ mb) {\n      mhc[(i / 32) | 0] ^= 1 << i;\n    }\n    ph = (ph << 1) | pb;\n    mh = (mh << 1) | mb;\n    pv = mh | ~(xv | ph);\n    mv = ph & xv;\n  }\n  for (let k = start; k < end; k++) {\n    peq[b.charCodeAt(k)] = 0;\n  }\n  return score;\n};\n\nconst distance = (a, b) => {\n  if (a.length > b.length) {\n    const tmp = b;\n    b = a;\n    a = tmp;\n  }\n  if (a.length === 0) {\n    return b.length;\n  }\n  if (a.length <= 32) {\n    return myers_32(a, b);\n  }\n  return myers_x(a, b);\n};\n\nconst closest = (str, arr) => {\n  let min_distance = Infinity;\n  let min_index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const dist = distance(str, arr[i]);\n    if (dist < min_distance) {\n      min_distance = dist;\n      min_index = i;\n    }\n  }\n  return arr[min_index];\n};\n\nmodule.exports = {\n  closest, distance\n}\n"],"names":[],"sourceRoot":""}