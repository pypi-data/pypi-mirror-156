{"version":3,"sources":["CardComponent.tsx","index.tsx"],"names":["CardComponent","render","title","props","args","subtitle","body","type","customStyle","color","style","padding","Card","height","background","icon","faBell","size","faWarning","display","paddingLeft","paddingBottom","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"yRAcMA,E,4MAEGC,OAAS,WAGd,IAAMC,EAAQ,EAAKC,MAAMC,KAAX,MACRC,EAAW,EAAKF,MAAMC,KAAX,SACXE,EAAO,EAAKH,MAAMC,KAAX,KACPG,EAAO,EAAKJ,MAAMC,KAAX,KAEPI,EAAc,CAClBC,MAAO,IAWT,OAPED,EAAYC,MADD,YAATF,EACkB,SACF,YAATA,EACW,SAEA,MAIpB,yBAAKG,MAAO,CAAEC,QAAS,SACrB,kBAACC,EAAA,EAAD,CAAMF,MAAO,CAAEG,OAAQ,OAAQC,WAAY,YAEzC,yBAAKJ,MAAO,CAAEC,QAAS,SAAUE,OAAQ,SAI7B,aAATN,EACC,kBAAC,IAAD,CAAiBQ,KAAMC,IAAQC,KAAK,KAAKR,MAAOD,EAAYC,QAE5D,kBAAC,IAAD,CAAiBM,KAAMG,IAAWD,KAAK,KAAKR,MAAOD,EAAYC,QAGjE,wBAAIC,MAAO,CAAES,QAAS,eAAgBV,MAAM,QAASW,YAAa,WAC/DlB,GAEH,uBAAGQ,MAAO,CAAES,QAAS,eAAgBV,MAAM,OAAQW,YAAa,WAC7Df,GAEH,uBAAGK,MAAO,CAAED,MAAO,OAAQW,YAAa,OAAQC,cAAe,WAAaf,O,yBA1C5DgB,KAoDbC,cAAwBvB,GC9DvCwB,IAASvB,OACP,kBAAC,IAAMwB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.91ba057a.chunk.js","sourcesContent":["import {\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\n// import Card from '@mui/material/Card';\nimport { Card } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faWarning, faBell } from '@fortawesome/free-solid-svg-icons'\n\n\n\n// the `render()` function is called when component is re-rendered\nclass CardComponent extends StreamlitComponentBase<any> {\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`\n    const title = this.props.args[\"title\"]\n    const subtitle = this.props.args[\"subtitle\"]\n    const body = this.props.args[\"body\"]\n    const type = this.props.args[\"type\"]\n\n    const customStyle = {\n      color: \"\"\n    };\n\n    if (type === 'Caution') {\n      customStyle.color = \"yellow\";\n    } else if (type === 'Warning') {\n      customStyle.color = \"orange\";\n    } else {\n      customStyle.color = \"red\";\n    }\n\n    return (\n      <div style={{ padding: \"0rem\"}}>\n        <Card style={{ height: '6rem', background: \"#2e2e2e\" }}>\n        {/* <Card variant=\"outlined\"> */}\n          <div style={{ padding: \"0.5rem\", height: \"5rem\" }}>\n            {/* <WarningIcon fontSize=\"large\" color={customStyle.color}/> */}\n            {/* <FontAwesomeIcon icon={faWarning} size=\"2x\" color={customStyle.color}/>\n            <FontAwesomeIcon icon={faBell} size=\"2x\" color={customStyle.color}/> */}\n            {type === 'Critical' ? (\n              <FontAwesomeIcon icon={faBell} size=\"2x\" color={customStyle.color}/>\n            ) : (\n              <FontAwesomeIcon icon={faWarning} size=\"2x\" color={customStyle.color}/>\n            )}\n            \n            <h3 style={{ display: \"inline-block\", color:\"white\", paddingLeft: \"0.5rem\" }}>\n              {title}\n            </h3>\n            <p style={{ display: \"inline-block\", color:\"gray\", paddingLeft: \"0.3rem\" }}>\n              {subtitle}\n            </p>\n            <p style={{ color: \"gray\", paddingLeft: \"1rem\", paddingBottom: \"0.2rem\" }}>{body}</p>\n          </div>\n        {/* </Card> */}\n        </Card>\n      </div>\n    )\n  }\n}\n\n// connection between component and Streamlit\nexport default withStreamlitConnection(CardComponent);","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CardComponent from \"./CardComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CardComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}