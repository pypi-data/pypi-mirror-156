from ..edge_tools import to_json_serializable as to_json_serializable
from _typeshed import Incomplete

DEFAULT_DEREGISTER_FRAMES: int
DEFAULT_MAX_DISTANCE: int
DEFAULT_MIN_INERTIA: int
tracker_init_id: int
tracker_id: int

def get_tracker_init_id(): ...
def get_tracker_id(): ...

class TrackingResults(dict):
    def __init__(self, objects, history, algorithm) -> None: ...
    @property
    def history(self) -> dict: ...

RESULT_TYPE: Incomplete

class TrackablePrediction:
    prediction: Incomplete
    deregister_frames: Incomplete
    min_inertia: Incomplete
    tid: Incomplete
    inertia: int
    disappeared_frames: int
    def __init__(self, prediction, deregister_frames, min_inertia, enter_cb: Incomplete | None = ..., exit_cb: Incomplete | None = ..., history_length: int = ...) -> None: ...
    def init(self) -> None: ...
    def step(self, **kwargs) -> None: ...
    def handle_found(self, prediction) -> None: ...
    def handle_disappeared(self) -> None: ...
    def handle_removed(self) -> None: ...
    @property
    def is_initialized(self): ...
    @property
    def is_lost(self): ...
    @property
    def history(self): ...

def euclidean_distance(new_prediction, trackable, max_distance): ...
def match_greedy(dist): ...
def match_optimal(dist): ...

class TrackerAlgorithm:
    def __init__(self, deregister_frames, max_distance, min_inertia, enter_cb, exit_cb, history_length: int = ..., trackable=..., distance_function=..., match_optimizer=...) -> None: ...
    def update(self, predictions, **trackable_kwargs): ...
    def remove_id(self, id) -> None: ...
    def update_detections(self, tracked_objects, new_predictions, **trackable_kwargs): ...
    @property
    def history(self): ...
