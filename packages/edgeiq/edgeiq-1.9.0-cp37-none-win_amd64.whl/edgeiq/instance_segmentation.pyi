from _typeshed import Incomplete
from edgeiq import bounding_box as bounding_box, constants as constants, edge_tools as edge_tools, processing as processing
from edgeiq.base_service import BaseService as BaseService
from edgeiq.edge_tools import markup_image as markup_image, to_json_serializable as to_json_serializable

class InstanceSegmentationPrediction(bounding_box.BoundingBoxPrediction):
    def __init__(self, box, mask, confidence, label, index) -> None: ...
    def __eq__(self, other): ...
    @property
    def label(self): ...
    @label.setter
    def label(self, label) -> None: ...
    @property
    def index(self): ...
    @property
    def mask(self): ...

class InstanceSegmentationResults:
    def __init__(self, predictions, duration, image, **kwargs) -> None: ...
    def __eq__(self, other): ...
    @property
    def duration(self): ...
    @property
    def predictions(self): ...
    @predictions.setter
    def predictions(self, predictions) -> None: ...
    @property
    def image(self): ...

RESULT_TYPE: Incomplete

class InstanceSegmentation(BaseService):
    def __init__(self, model_id) -> None: ...
    def segment_image(self, image, confidence_level: float = ...): ...
    def markup_image(self, image, predictions, mask_threshold: float = ..., show_labels: bool = ..., show_confidences: bool = ..., show_masks: bool = ..., colors: Incomplete | None = ..., line_thickness: int = ..., font_size: float = ..., font_thickness: int = ...): ...
