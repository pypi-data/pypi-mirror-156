from _typeshed import Incomplete
from edgeiq import constants as constants, edge_tools as edge_tools, processing as processing
from edgeiq._production_client import PRODUCTION_CLIENT as PRODUCTION_CLIENT
from edgeiq.base_service import BaseService as BaseService
from edgeiq.edge_tools import to_json_serializable as to_json_serializable

class ClassificationPrediction:
    def __init__(self, confidence, label) -> None: ...
    def __eq__(self, other): ...
    @property
    def label(self): ...
    @property
    def confidence(self): ...

class ClassificationResults:
    def __init__(self, predictions, duration, image) -> None: ...
    def __eq__(self, other): ...
    @property
    def duration(self): ...
    @property
    def predictions(self): ...
    @property
    def image(self): ...

RESULT_TYPE: Incomplete

class Classification(BaseService):
    def __init__(self, model_id) -> None: ...
    def classify_image(self, image, confidence_level: float = ...): ...
    def publish_analytics(self, results, tag: Incomplete | None = ...) -> None: ...
