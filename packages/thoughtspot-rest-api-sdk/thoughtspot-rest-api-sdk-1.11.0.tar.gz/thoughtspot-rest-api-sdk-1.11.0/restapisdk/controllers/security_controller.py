# -*- coding: utf-8 -*-

"""
restapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from restapisdk.api_helper import APIHelper
from restapisdk.configuration import Server
from restapisdk.controllers.base_controller import BaseController
from restapisdk.models.security_permission_response import SecurityPermissionResponse
from restapisdk.models.principal_search_response import PrincipalSearchResponse
from restapisdk.exceptions.error_response_exception import ErrorResponseException


class SecurityController(BaseController):

    """A Controller to access Endpoints in the restapisdk API."""
    def __init__(self, config, auth_managers):
        super(SecurityController, self).__init__(config, auth_managers)

    def share_object(self,
                     body):
        """Does a POST request to /tspublic/rest/v2/security/share/tsobject.

        To programmatically share ThoughtSpot objects with another user or
        user group, use this endpoint. 
         When you share an object like a Liveboard or visualization, a
         notification with a live link is sent to the user. When the users
         access this object, they can view the last saved version of the
         object. 
         Requires privilege to share the object

        Args:
            body (TspublicRestV2SecurityShareTsobjectRequest): TODO: type
                description here.

        Returns:
            bool: Response from the API. Successfully shared the objects to
                the users and user groups as per the request

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(body=body)

        # Prepare query URL
        _url_path = '/tspublic/rest/v2/security/share/tsobject'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unauthorized request', _response)
        self.validate_response(_response)

        decoded = _response.text == 'true'

        return decoded

    def share_visualization(self,
                            body):
        """Does a POST request to /tspublic/rest/v2/security/share/visualization.

        If you want to share a specific visualization from a Liveboard with
        another user or user group, then use this endpoint. 
         When you share a visualization, a notification with a live link is
         sent to the user. When the users access this Liveboard, they can view
         the last saved version of the visualization. 
         Requires privilege to share the visualization

        Args:
            body (TspublicRestV2SecurityShareVisualizationRequest): TODO: type
                description here.

        Returns:
            bool: Response from the API. Successfully shared the visualization
                in the liveboard to the users and user groups as per the
                request

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(body=body)

        # Prepare query URL
        _url_path = '/tspublic/rest/v2/security/share/visualization'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unauthorized request', _response)
        self.validate_response(_response)

        decoded = _response.text == 'true'

        return decoded

    def get_permission_on_object(self,
                                 id,
                                 mtype,
                                 include_dependent=None):
        """Does a GET request to /tspublic/rest/v2/security/permission/tsobject.

        To list the permissions for user and user groups on an object, use
        this endpoint. The response will include only those users and groups
        with have either VIEW OR MODIFY permission. 
         You can optionally see the permission on the dependent objects as
         well by enabling includeDependent field. 
         Requires administration privilege

        Args:
            id (string): GUID of the metadata object for which the permission
                needs to be obtained.
            mtype (GetPermissionOnObjectTypeEnum): Type of metadata object
            include_dependent (bool, optional): When this field is set to
                true, the API response includes the permission details for the
                dependent objects.

        Returns:
            SecurityPermissionResponse: Response from the API. List of user
                and user groups that have VIEW or MODIFY access to the object

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(id=id,
                                 mtype=mtype)

        # Prepare query URL
        _url_path = '/tspublic/rest/v2/security/permission/tsobject'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'id': id,
            'type': mtype,
            'includeDependent': include_dependent
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': self.config.content_type
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unauthorized request', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, SecurityPermissionResponse.from_dictionary)

        return decoded

    def get_permission_for_principal(self,
                                     id=None,
                                     name=None):
        """Does a GET request to /tspublic/rest/v2/security/permission/principal.

        Use this endpoint to list the objects on which a user or user group
        has permission. The response will include only those objects on which
        the user or user group has either VIEW OR MODIFY permission. 
         Provide at least one of id or name. When both are given then id is
         considered.
         Requires administration privilege

        Args:
            id (string, optional): GUID of the user or user group for which
                the object permission needs to be obtained
            name (string, optional): Name of the user or user group for which
                the object permission needs to be obtained

        Returns:
            PrincipalSearchResponse: Response from the API. List of objects on
                which the user or user group has VIEW or MODIFY access

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/tspublic/rest/v2/security/permission/principal'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'id': id,
            'name': name
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': self.config.content_type
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unauthorized request', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PrincipalSearchResponse.from_dictionary)

        return decoded

    def search_permission_on_objects(self,
                                     body):
        """Does a POST request to /tspublic/rest/v2/security/permission/tsobject/search.

        To list the permissions for user and user groups on a list of objects,
        use this endpoint. The response will include only those users and
        groups that has either VIEW OR MODIFY permission. 
         Provide list of object ids and its type to list the permissions for.
                  You can optionally provide users or user groups for which the
         persmission needs to be displayed. 
         You can optionally see the permission on the dependent objects as
         well by enabling includeDependent field. 
         Requires administration privilege

        Args:
            body (TspublicRestV2SecurityPermissionTsobjectSearchRequest):
                TODO: type description here.

        Returns:
            list of SecurityPermissionResponse: Response from the API. List of
                user and user groups that have VIEW or MODIFY access to the
                objects

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(body=body)

        # Prepare query URL
        _url_path = '/tspublic/rest/v2/security/permission/tsobject/search'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unauthorized request', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, SecurityPermissionResponse.from_dictionary)

        return decoded

    def search_permission_for_principals(self,
                                         body):
        """Does a POST request to /tspublic/rest/v2/security/permission/principal/search.

        Use this endpoint to list the objects on which a user or user group
        has permission. The response will include only those objects on which
        the user or user group has either VIEW OR MODIFY permission. 
         You can optionally provide list of object ids for which the
         persmission needs to be displayed. 
         Requires administration privilege

        Args:
            body (TspublicRestV2SecurityPermissionPrincipalSearchRequest):
                TODO: type description here.

        Returns:
            list of PrincipalSearchResponse: Response from the API. List of
                objects on which the users or user groups has VIEW or MODIFY
                access

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(body=body)

        # Prepare query URL
        _url_path = '/tspublic/rest/v2/security/permission/principal/search'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unauthorized request', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, PrincipalSearchResponse.from_dictionary)

        return decoded
