# -*- coding: utf-8 -*-

"""
restapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from restapisdk.api_helper import APIHelper
from restapisdk.configuration import Server
from restapisdk.controllers.base_controller import BaseController
from restapisdk.models.logs_response import LogsResponse
from restapisdk.exceptions.error_response_exception import ErrorResponseException


class LogsController(BaseController):

    """A Controller to access Endpoints in the restapisdk API."""
    def __init__(self, config, auth_managers):
        super(LogsController, self).__init__(config, auth_managers)

    def get_log_events(self,
                       topic,
                       from_epoch=None,
                       to_epoch=None):
        """Does a GET request to /tspublic/rest/v2/logs/events.

        Note: This endpoint is applicable only for SAAS deployments. 
         The ThoughtSpot log streaming service API allows you to
         programmatically get a security audit event log from the ThoughtSpot
         system. 
         To use this API, make sure you have admin user privileges. 
         ThoughtSpot cloud deployments allow you to collect security audit
         events and send them to your Security information and event
         management (SIEM) application in real-time. 
         These events can help your security operations personnel to detect
         potential security threats or compromised user accounts in your
         organization. 
         Permission: Requires administration privilege

        Args:
            topic (GetLogEventsTopicEnum): Type of the log.
            from_epoch (string, optional): The EPOCH time in milliseconds to
                set the start time for streaming logs.    Example: To set the
                timestamp as June 1, 2021 8 am, specify 1622534400000.
            to_epoch (string, optional): The EPOCH time in milliseconds to set
                the end time for streaming logs.    Example: To set the
                timestamp as July 1, 2021, 8 am, specify 1625126400000.

        Returns:
            LogsResponse: Response from the API. Events from the topic
                specified for the time duration provided

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(topic=topic)

        # Prepare query URL
        _url_path = '/tspublic/rest/v2/logs/events'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'topic': topic,
            'fromEpoch': from_epoch,
            'toEpoch': to_epoch
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': self.config.content_type
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unauthorized request', _response)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, LogsResponse.from_dictionary)

        return decoded
