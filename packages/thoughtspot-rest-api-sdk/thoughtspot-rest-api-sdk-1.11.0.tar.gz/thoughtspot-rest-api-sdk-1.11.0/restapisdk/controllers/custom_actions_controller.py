# -*- coding: utf-8 -*-

"""
restapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from restapisdk.api_helper import APIHelper
from restapisdk.configuration import Server
from restapisdk.controllers.base_controller import BaseController
from restapisdk.exceptions.error_response_exception import ErrorResponseException


class CustomActionsController(BaseController):

    """A Controller to access Endpoints in the restapisdk API."""
    def __init__(self, config, auth_managers):
        super(CustomActionsController, self).__init__(config, auth_managers)

    def get_custom_action(self,
                          id):
        """Does a GET request to /tspublic/rest/v2/customaction.

        To get details of a specific custom action configured in the
        ThoughtSpot system, use this endpoint

        Args:
            id (string): GUID of the custom action

        Returns:
            object: Response from the API. JSON data for the specified custom
                action ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(id=id)

        # Prepare query URL
        _url_path = '/tspublic/rest/v2/customaction'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'id': id
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Content-Type': self.config.content_type
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unauthorized request', _response)
        self.validate_response(_response)

        decoded = _response.text

        return decoded

    def create_custom_action(self,
                             body):
        """Does a POST request to /tspublic/rest/v2/customaction/create.

        To programmatically create custom actions on ThoughtSpot clusters that
        support embedding configuration, use this endpoint

        Args:
            body (TspublicRestV2CustomactionCreateRequest): TODO: type
                description here.

        Returns:
            object: Response from the API. JSON data of custom action created

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(body=body)

        # Prepare query URL
        _url_path = '/tspublic/rest/v2/customaction/create'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unauthorized request', _response)
        self.validate_response(_response)

        decoded = _response.text

        return decoded

    def update_custom_action(self,
                             body):
        """Does a PUT request to /tspublic/rest/v2/customaction/update.

        To programmatically edit an existing custom action, use this endpoint
        
        Args:
            body (TspublicRestV2CustomactionUpdateRequest): TODO: type
                description here.

        Returns:
            object: Response from the API. JSON data for the specified custom
                action ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(body=body)

        # Prepare query URL
        _url_path = '/tspublic/rest/v2/customaction/update'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unauthorized request', _response)
        self.validate_response(_response)

        decoded = _response.text

        return decoded

    def delete_custom_action(self,
                             id):
        """Does a DELETE request to /tspublic/rest/v2/customaction/delete.

        To programmatically delete a custom action, use this endpoint

        Args:
            id (string): GUID of the custom action

        Returns:
            object: Response from the API. JSON response indicating that the
                specified action ID is no longer available

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(id=id)

        # Prepare query URL
        _url_path = '/tspublic/rest/v2/customaction/delete'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'id': id
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Content-Type': self.config.content_type
        }

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unauthorized request', _response)
        self.validate_response(_response)

        decoded = _response.text

        return decoded

    def search_custom_action(self,
                             body):
        """Does a POST request to /tspublic/rest/v2/customaction/search.

        To search custom actions available on a ThoughtSpot instance, use this
        endpoint

        Args:
            body (TspublicRestV2CustomactionSearchRequest): TODO: type
                description here.

        Returns:
            object: Response from the API. JSON data of custom action based on
                the request

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(body=body)

        # Prepare query URL
        _url_path = '/tspublic/rest/v2/customaction/search'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unauthorized request', _response)
        self.validate_response(_response)

        decoded = _response.text

        return decoded

    def get_custom_action_association(self,
                                      id):
        """Does a GET request to /tspublic/rest/v2/customaction/association.

        ThoughtSpot supports associating custom actions to Liveboards,
        answers, and worksheets. To get the details of the ThoughtSpot objects
        associated with a custom action, use this endpoint.

        Args:
            id (string): GUID of the custom action

        Returns:
            object: Response from the API. JSON data with the action
                association map for the specified custom action ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(id=id)

        # Prepare query URL
        _url_path = '/tspublic/rest/v2/customaction/association'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'id': id
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Content-Type': self.config.content_type
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unauthorized request', _response)
        self.validate_response(_response)

        decoded = _response.text

        return decoded

    def update_custom_action_association(self,
                                         body):
        """Does a PUT request to /tspublic/rest/v2/customaction/association/update.

        To programmatically associate a custom action to a ThoughtSpot object,
        use this endpoint

        Args:
            body (TspublicRestV2CustomactionAssociationUpdateRequest): TODO:
                type description here.

        Returns:
            object: Response from the API. JSON data with the action
                association map

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(body=body)

        # Prepare query URL
        _url_path = '/tspublic/rest/v2/customaction/association/update'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unauthorized request', _response)
        self.validate_response(_response)

        decoded = _response.text

        return decoded

    def delete_custom_action_association(self,
                                         id,
                                         association):
        """Does a DELETE request to /tspublic/rest/v2/customactions/association/delete.

        To remove custom action associations to ThoughtSpot objects, use this
        endpoint

        Args:
            id (string): GUID of the custom action
            association (string): A JSON map of the attributes with
                association of the action to ThoughtSpot object ID    Example:
                {"id":"0dbd5b3a-84c1-4407-9803-cf07d67e6fcf","name":"My
                worksheet
                action","version":"v2","type":"URL","detail":{"link":"https://u
                npkg.com
                ","function":"my-worksheet-action","authSelect":"NONE","authTok
                en":"","encodeUser":"","apiKey":"X-API-KEY","apiValue":"","addi
                tionalUrlHeaders":"{}"},"actionAssociationMap":{"WORKSHEET":{"2
                b9d083a-275c-4984-9cfe-90b036affa17":{"enabled":"true","context
                ":"PRIMARY"}}},"context":"NONE","availability":[
                ],"userGroupList":["d0326b56-ef23-4c8a-8327-a30e99bcc72b"]}

        Returns:
            object: Response from the API. JSON data with the updated JSON map
                of the custom action

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        self.validate_parameters(id=id,
                                 association=association)

        # Prepare query URL
        _url_path = '/tspublic/rest/v2/customactions/association/delete'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'id': id,
            'association': association
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Content-Type': self.config.content_type
        }

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 500:
            raise ErrorResponseException('Operation failed or unauthorized request', _response)
        self.validate_response(_response)

        decoded = _response.text

        return decoded
