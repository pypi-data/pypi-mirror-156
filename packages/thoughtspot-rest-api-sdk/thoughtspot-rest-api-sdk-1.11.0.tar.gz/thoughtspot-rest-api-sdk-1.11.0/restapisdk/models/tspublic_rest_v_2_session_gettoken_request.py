# -*- coding: utf-8 -*-

"""
restapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class TspublicRestV2SessionGettokenRequest(object):

    """Implementation of the 'Tspublic Rest V2 Session Gettoken Request' model.

    TODO: type model description here.

    Attributes:
        user_name (string): Username of the user account
        password (string): The password of the user account
        secret_key (string): The secret key string provided by the ThoughtSpot
            application server. ThoughtSpot generates this secret key when you
            enable trusted authentication.
        access_level (GetTokenAccessLevelEnum): User access privilege.    FULL
            - Creates a session with full access.    REPORT_BOOK_VIEW - Allow
            view access to the specified visualizations.
        ts_object_id (string): GUID of the ThoughtSpot object. If you have set
            the accessLevel attribute to REPORT_BOOK_VIEW, specify the GUID of
            the Liveboard or visualization object.
        token_expiry_duration (string): Provide duration in seconds after
            which the token should expire

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "user_name": 'userName',
        "password": 'password',
        "secret_key": 'secretKey',
        "access_level": 'accessLevel',
        "ts_object_id": 'tsObjectId',
        "token_expiry_duration": 'tokenExpiryDuration'
    }

    def __init__(self,
                 user_name=None,
                 password=None,
                 secret_key=None,
                 access_level='FULL',
                 ts_object_id=None,
                 token_expiry_duration=None):
        """Constructor for the TspublicRestV2SessionGettokenRequest class"""

        # Initialize members of the class
        self.user_name = user_name
        self.password = password
        self.secret_key = secret_key
        self.access_level = access_level
        self.ts_object_id = ts_object_id
        self.token_expiry_duration = token_expiry_duration

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        user_name = dictionary.get('userName')
        password = dictionary.get('password')
        secret_key = dictionary.get('secretKey')
        access_level = dictionary.get("accessLevel") if dictionary.get("accessLevel") else 'FULL'
        ts_object_id = dictionary.get('tsObjectId')
        token_expiry_duration = dictionary.get('tokenExpiryDuration')
        # Return an object of this model
        return cls(user_name,
                   password,
                   secret_key,
                   access_level,
                   ts_object_id,
                   token_expiry_duration)
