# -*- coding: utf-8 -*-

"""
restapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class TspublicRestV2SecurityShareVisualizationRequest(object):

    """Implementation of the 'Tspublic Rest V2 Security Share Visualization Request' model.

    TODO: type model description here.

    Attributes:
        id (string): The GUID of the Liveboard to be shared
        viz_id (string): The GUID of visualization
        principal_id (list of string): The GUID of the users and user groups
            with which you want to share the visualization
        email_id (list of string): The email addresses that should ne notified
            when the objects are shared.
        notify (ShareVisualizationNotifyEnum): When set to true, a
            notification is sent to the users after an object is shared.
        message (string): The message text to send in the notification email
        include_custom_embed_url
            (ShareVisualizationIncludeCustomEmbedUrlEnum): When set to true,
            ThoughtSpot sends a link with the host application context to
            allow users to access the shared object from their ThoughtSpot
            embedded instance.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "viz_id": 'vizId',
        "principal_id": 'principalId',
        "email_id": 'emailId',
        "notify": 'notify',
        "message": 'message',
        "include_custom_embed_url": 'includeCustomEmbedUrl'
    }

    def __init__(self,
                 id=None,
                 viz_id=None,
                 principal_id=None,
                 email_id=None,
                 notify='true',
                 message=None,
                 include_custom_embed_url='false'):
        """Constructor for the TspublicRestV2SecurityShareVisualizationRequest class"""

        # Initialize members of the class
        self.id = id
        self.viz_id = viz_id
        self.principal_id = principal_id
        self.email_id = email_id
        self.notify = notify
        self.message = message
        self.include_custom_embed_url = include_custom_embed_url

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get('id')
        viz_id = dictionary.get('vizId')
        principal_id = dictionary.get('principalId')
        email_id = dictionary.get('emailId')
        notify = dictionary.get("notify") if dictionary.get("notify") else 'true'
        message = dictionary.get('message')
        include_custom_embed_url = dictionary.get("includeCustomEmbedUrl") if dictionary.get("includeCustomEmbedUrl") else 'false'
        # Return an object of this model
        return cls(id,
                   viz_id,
                   principal_id,
                   email_id,
                   notify,
                   message,
                   include_custom_embed_url)
