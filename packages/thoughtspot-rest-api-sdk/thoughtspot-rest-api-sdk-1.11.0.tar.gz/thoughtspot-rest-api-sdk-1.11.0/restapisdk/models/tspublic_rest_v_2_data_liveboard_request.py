# -*- coding: utf-8 -*-

"""
restapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class TspublicRestV2DataLiveboardRequest(object):

    """Implementation of the 'Tspublic Rest V2 Data Liveboard Request' model.

    TODO: type model description here.

    Attributes:
        offset (int): The offset point, starting from where the records should
            be included in the response.    If no input is provided then
            offset starts from 0.
        batch_number (int): An alternate way to set offset for the starting
            point of the response.    The value in offset field will not be
            considered if batchNumber field has value greater than 0.   
            Offset value will be calculated as (batchNumber - 1) * batchSize. 
            It is mandatory to provide a value for batchSize with batchNumber.
            Example:    Assume response has 100 records. Now,  batchNumber is
            set as 2 and batchSize as 10, then offset value will be 10. So, 10
            records starting from 11th record will be considered.
        batch_size (int): The number of records that should be included in the
            response starting from offset position.    If no input is
            provided, then all records starting from the value provided in
            offset is included in the response.
        id (string): The GUID of the Liveboard
        transient_content (string): If you have embedded ThoughtSpot in your
            host application, and you want to download Liveboard data with
            unsaved changes then, pass the transient content from the browser
            fetch request, using the getExportRequestForCurrentPinboard
            method. For more information, see
            https://developers.thoughtspot.com/docs/?pageid=liveboard-export-ap
            i#transient-pinboard . If value for this field is provided, then
            id will not be considered.
        viz_id (list of string): A JSON array of GUIDs of the visualizations
            in the Liveboard.    The vizId field will not be considered when
            transientContent input is provided.
        runtime_filter (string): JSON object which contains filter condition
            to filter the data at the time of data retrieval.    Example:
            {"col1":"region","op1":"EQ","val1":"northeast","col2":"date","op2":
            "BET","val2":["1625126400000","1625126400000"]}    For more
            information, see
            https://developers.thoughtspot.com/docs/?pageid=runtime-filters
        runtime_sort (string): JSON object which provides columns to sort the
            data at the time of data retrieval.    Example:
            {"sortCol1":"region","asc1":true,"sortCol2":"date"}    For more
            information, see
            https://developers.thoughtspot.com/docs/?pageid=runtime-filters
        format_type (LiveboardDataFormatTypeEnum): The format of the data in
            the response.    FULL: The response comes in "column":"value"
            format.    COMPACT: The response includes only the value of the
            columns.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "offset": 'offset',
        "batch_number": 'batchNumber',
        "batch_size": 'batchSize',
        "id": 'id',
        "transient_content": 'transientContent',
        "viz_id": 'vizId',
        "runtime_filter": 'runtimeFilter',
        "runtime_sort": 'runtimeSort',
        "format_type": 'formatType'
    }

    def __init__(self,
                 offset=0,
                 batch_number=None,
                 batch_size=None,
                 id=None,
                 transient_content=None,
                 viz_id=None,
                 runtime_filter=None,
                 runtime_sort=None,
                 format_type='COMPACT'):
        """Constructor for the TspublicRestV2DataLiveboardRequest class"""

        # Initialize members of the class
        self.offset = offset
        self.batch_number = batch_number
        self.batch_size = batch_size
        self.id = id
        self.transient_content = transient_content
        self.viz_id = viz_id
        self.runtime_filter = runtime_filter
        self.runtime_sort = runtime_sort
        self.format_type = format_type

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        offset = dictionary.get("offset") if dictionary.get("offset") else 0
        batch_number = dictionary.get('batchNumber')
        batch_size = dictionary.get('batchSize')
        id = dictionary.get('id')
        transient_content = dictionary.get('transientContent')
        viz_id = dictionary.get('vizId')
        runtime_filter = dictionary.get('runtimeFilter')
        runtime_sort = dictionary.get('runtimeSort')
        format_type = dictionary.get("formatType") if dictionary.get("formatType") else 'COMPACT'
        # Return an object of this model
        return cls(offset,
                   batch_number,
                   batch_size,
                   id,
                   transient_content,
                   viz_id,
                   runtime_filter,
                   runtime_sort,
                   format_type)
