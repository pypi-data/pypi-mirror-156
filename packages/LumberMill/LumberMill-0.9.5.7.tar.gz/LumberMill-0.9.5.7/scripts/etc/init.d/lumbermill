#!/bin/sh
#
# LumberMill
#
# chkconfig:   2345 80 20
# description: Starts and stops a single LumberMill instance on this system
#

### BEGIN INIT INFO
# Provides: LumberMill
# Required-Start: $network
# Required-Stop: $network
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: This service manages the LumberMill daemon
### END INIT INFO

#
# init.d / servicectl compatibility (openSUSE)
#
if [ -f /etc/rc.status ]; then
    . /etc/rc.status
    rc_reset
fi

#
# Source function library.
#
if [ -f /etc/rc.d/init.d/functions ]; then
    . /etc/rc.d/init.d/functions
fi

# Source the pythonpath
. /etc/profile.d/python.sh

# Prefer pypy if it is available.
if [ -f /usr/bin/pypy ]; then
    interpreter="/usr/lib64/pypy-2.2.1/bin/pypy"
    export PYTHONPATH=$PYTHONPATH:/usr/lib64/pypy-2.2.1/site-packages;
fi

exec="/opt/LumberMill/src/lumbermill/LumberMill.py"
prog="lumbermill"
pidfile=/var/run/lumbermill/${prog}.pid
lockfile=/var/lock/subsys/$prog
conffile=/etc/lumbermill/default.conf

start() {
    [ -f $interpreter ] || $(echo "Interpreter $interpreter does not exist." && exit 6)
    [ -x $interpreter ] || $(echo "Interpreter $interpreter is not executable." && exit 5)
    [ -f $conffile ] || $(echo "Config $conffile does not exists." && exit 6)
    echo -n $"Starting $prog: "
    # if not running, start it up here, usually something like "daemon $exec"
    daemonize -u $USER -p $pidfile -l $lockfile $interpreter $exec -c $conffile && success || failure $"$prog start"
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    # stop it here, often "killproc $prog"
    kill -INT $(cat $pidfile)
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    stop
    start
}

reload() {
    restart
}

force_reload() {
    restart
}

rh_status() {
    # run checks to determine if the service is running or use generic status
    status -p $pidfile $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac
exit $?
