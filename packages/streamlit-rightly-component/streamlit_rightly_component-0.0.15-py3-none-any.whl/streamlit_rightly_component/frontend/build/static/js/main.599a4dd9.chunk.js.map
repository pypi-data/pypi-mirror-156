{"version":3,"sources":["components/d3.tsx","root.tsx","components/Dagre.tsx","MyComponent.tsx","index.tsx"],"names":["DagreD3","nodeTree","nodeTreeInner","setNodeTree","setNodeTreeInner","this","renderDag","nextProps","props","nodes","edges","graph","onNodeClick","onNodeHover","g","dagreD3","Graph","setGraph","setDefaultNodeLabel","setDefaultEdgeLabel","forEach","node","setNode","id","edge","target","source","rest","setEdge","svg","d3","inner","render","selectAll","on","width","height","ref","React","Component","defaultProps","isMultiGraph","interactive","compoentMap","dagre","nodeId","setComponentValue","args","data","map","style","shape","label","rankdir","bind","myComponent","state","numClicks","isFocused","theme","borderStyling","primaryColor","border","outline","name","onClick","onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","setState","prevState","Streamlit","RootComponent","componentName","console","log","window","location","href","value","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.599a4dd9.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as dagreD3 from 'dagre-d3';\r\n\r\nexport default class DagreD3 extends React.Component<{ width?: string|number; height?: string|number; nodes: any[]; edges: any[]; graph?: any; interactive?: boolean; onNodeClick?: any, onNodeHover?: any }> {\r\n  nodeTree: any;\r\n  nodeTreeInner: any;\r\n\r\n  static defaultProps = {\r\n    width: '100%',\r\n    height: '100%',\r\n    nodes: {},\r\n    edges: [],\r\n    graph: {\r\n      isMultiGraph: true,\r\n    },\r\n    interactive: false,\r\n    onNodeClick: () => {}\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.renderDag();\r\n  }\r\n\r\n  sholudComponentUpdate(nextProps: any) {\r\n    return !(this.props.nodes === nextProps.nodes) || !(this.props.edges === nextProps.edges);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.renderDag();\r\n  }\r\n\r\n  setNodeTree = (nodeTree: any) => {\r\n    this.nodeTree = nodeTree;\r\n  }\r\n\r\n  setNodeTreeInner = (nodeTreeInner: any) => {\r\n    this.nodeTreeInner = nodeTreeInner;\r\n  }\r\n\r\n  renderDag() {\r\n    const { nodes, edges, graph, onNodeClick, onNodeHover } = this.props;\r\n\r\n    const g: any = new dagreD3.graphlib.Graph();\r\n    g.setGraph({ ... graph })\r\n    .setDefaultNodeLabel(() => ({}))\r\n    .setDefaultEdgeLabel(() => ({}))\r\n\r\n    nodes.forEach((node: any) => {\r\n      g.setNode(node.id, node);\r\n    })\r\n\r\n    edges.forEach((edge: any) => {\r\n      const { target, source, ...rest } = edge;\r\n      g.setEdge(source, target, rest);\r\n    })\r\n\r\n    const svg = d3.select(this.nodeTree);\r\n    const inner = d3.select(this.nodeTreeInner);\r\n\r\n    // if (interactive) {\r\n    //   // tslint:disable-next-line\r\n    //   const transform: any = d3.scaleDivergingSqrt.transform;\r\n    //   const zoom = d3.zoom().on('zoom', () => inner.attr('trasform', d3.scaleDivergingSqrt.transform));\r\n    //   // tslint:disable-next-line\r\n    //   VTTRegion.call(zoom);\r\n    // }\r\n\r\n    const render = new dagreD3.render();\r\n    render(inner, g);\r\n\r\n    if (onNodeClick) {\r\n      svg.selectAll('g.node').on('click', onNodeClick);\r\n    }\r\n\r\n    if (onNodeHover) {\r\n      svg.selectAll('g.node').on('mouseover', onNodeHover)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { width, height } = this.props;\r\n    return <svg width={width} height={height} ref={this.setNodeTree}>\r\n      <g ref={this.setNodeTreeInner} />\r\n    </svg>\r\n  }\r\n}\r\n","import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\nimport Dagre from './components/Dagre'\r\nimport MyComponent from './MyComponent'\r\n\r\nconst compoentMap: { [key: string]: any }= {\r\n  dagre: Dagre,\r\n  myComponent: MyComponent\r\n}\r\n\r\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\r\nclass RootComponent extends StreamlitComponentBase<{}> {\r\n  componentDidMount() {\r\n    if (this.props.args.componentName === 'getUrl') {\r\n      Streamlit.setComponentValue(window.location.href);\r\n    }\r\n  }\r\n\r\n  setComponentValue(value: any) {\r\n    Streamlit.setComponentValue(value);\r\n  }\r\n\r\n  public render = (): ReactNode => {\r\n    const componentName: string = this.props.args.componentName;\r\n    const Component: any | undefined = compoentMap[componentName];\r\n    console.log(this.props);\r\n    if (!Component) {\r\n      return null;\r\n    }\r\n\r\n    return <Component {...this.props} setComponentValue={this.setComponentValue} />\r\n  }\r\n}\r\nexport default withStreamlitConnection(RootComponent)\r\n","import React from 'react';\r\n// import {\r\n//   Streamlit,\r\n//   StreamlitComponentBase,\r\n//   withStreamlitConnection\r\n// } from \"streamlit-component-lib\";\r\nimport DagreD3 from './d3';\r\n\r\nclass CustomComponent extends React.Component<{ setComponentValue: any, args: any }> {\r\n  onNodeClick(nodeId: string|number): void{\r\n    // Streamlit.setComponentValue({\"action\": \"onClickNode\", \"node\": nodeId});\r\n    this.props.setComponentValue({\"action\": \"onClickNode\", \"node\": nodeId })\r\n  }\r\n\r\n  render() {\r\n    const nodes = this.props.args?.data?.nodes.map((node: any) => ({\r\n      ...node,\r\n      style: 'fill: rgb(204, 230, 255);border: solid 1px rgba(0, 0, 0)', shape: 'rect'\r\n    })) || [\r\n      { id: 0, label: 'ReactComponent', style: 'fill: rgb(204, 230, 255);border: solid 1px rgba(0, 0, 0)', shape: 'rect'},\r\n      { id: 1, label: 'props', style: 'fill: rgb(204, 230, 255)', shape: 'rect'},\r\n      { id: 2, label: 'props', style: 'fill: rgb(204, 230, 255)', shape: 'rect'}\r\n    ]\r\n  \r\n    const edges = this.props.args?.data?.edges?.map((edge: any) => ({\r\n      ...edge,\r\n      style: 'stroke: rgb(214, 214, 214);fill: none',\r\n    })) || [\r\n      {target: 1, source: 0, style: 'stroke: rgb(214, 214, 214);fill: none', label: '2333' },\r\n      {target: 2, source: 0, style: 'stroke: rgb(214, 214, 214);fill: none', label: '2333' },\r\n    ]\r\n\r\n    return <DagreD3 nodes={nodes} edges={edges} graph={{ rankdir: 'TB' }} onNodeClick={this.onNodeClick.bind(this)} />\r\n  }\r\n}\r\n\r\nexport default CustomComponent\r\n\r\n// export default withStreamlitConnection(CustomComponent)","import React, { ReactNode } from \"react\"\r\nimport {\r\n  Streamlit,\r\n} from \"streamlit-component-lib\"\r\n\r\ninterface State {\r\n  numClicks: number\r\n  isFocused: boolean\r\n}\r\n\r\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\r\n// class MyComponent extends StreamlitComponentBase<State> {\r\nclass MyComponent extends React.Component<{ args: any, setComponentValue: any, theme: any, disabled: any }, State> {\r\n  public state = { numClicks: 0, isFocused: false }\r\n\r\n  public render = (): ReactNode => {\r\n    // Arguments that are passed to the plugin in Python are accessible\r\n    // via `this.props.args`. Here, we access the \"name\" arg.\r\n    const data = this.props.args[\"data\"]\r\n\r\n    // Streamlit sends us a theme object via props that we can use to ensure\r\n    // that our component has visuals that match the active theme in a\r\n    // streamlit app.\r\n    const { theme } = this.props\r\n    const style: React.CSSProperties = {}\r\n\r\n    // Maintain compatibility with older versions of Streamlit that don't send\r\n    // a theme object.\r\n    if (theme) {\r\n      // Use the theme object to style our button border. Alternatively, the\r\n      // theme style is defined in CSS vars.\r\n      const borderStyling = `1px solid ${\r\n        this.state.isFocused ? theme.primaryColor : \"gray\"\r\n      }`\r\n      style.border = borderStyling\r\n      style.outline = borderStyling\r\n    }\r\n\r\n    // Show a button and some text.\r\n    // When the button is clicked, we'll increment our \"numClicks\" state\r\n    // variable, and send its new value back to Streamlit, where it'll\r\n    // be available to the Python program.\r\n\r\n    return (\r\n      <span>\r\n        Hello, {data.name}! &nbsp;\r\n        <button\r\n          style={style}\r\n          onClick={this.onClicked}\r\n          disabled={this.props.disabled}\r\n          onFocus={this._onFocus}\r\n          onBlur={this._onBlur}\r\n        >\r\n          Click Me!\r\n        </button>\r\n      </span>\r\n    )\r\n  }\r\n\r\n  /** Click handler for our \"Click Me!\" button. */\r\n  private onClicked = (): void => {\r\n    // Increment state.numClicks, and pass the new value back to\r\n    // Streamlit via `Streamlit.setComponentValue`.\r\n    this.setState(\r\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\r\n      () => Streamlit.setComponentValue(this.state.numClicks)\r\n    )\r\n  }\r\n\r\n  /** Focus handler for our \"Click Me!\" button. */\r\n  private _onFocus = (): void => {\r\n    this.setState({ isFocused: true })\r\n  }\r\n\r\n  /** Blur handler for our \"Click Me!\" button. */\r\n  private _onBlur = (): void => {\r\n    this.setState({ isFocused: false })\r\n  }\r\n}\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\n// export default withStreamlitConnection(MyComponent)\r\nexport default MyComponent;\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\n// import MyComponent from \"./MyComponent\"\r\n// import DagreD3 from './components/Dagre';\r\nimport Root from './root';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <MyComponent /> */}\r\n    <Root />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}