{"version":3,"sources":["components/Dagre/d3.tsx","components/Dagre/index.tsx","components/ClickDemo/index.tsx","root.tsx","components/GetUrl/index.tsx","components/LuckSheet/index.tsx","index.tsx"],"names":["DagreD3","nodeTree","nodeTreeInner","setNodeTree","setNodeTreeInner","this","renderDag","nextProps","props","nodes","edges","graph","onNodeClick","onNodeHover","g","dagreD3","Graph","setGraph","setDefaultNodeLabel","setDefaultEdgeLabel","forEach","node","setNode","id","edge","target","source","rest","setEdge","svg","d3","inner","render","selectAll","on","width","height","ref","React","Component","defaultProps","isMultiGraph","interactive","CustomComponent","nodeId","Streamlit","setComponentValue","args","data","map","style","shape","label","rankdir","bind","StreamlitComponentBase","ClickDemo","state","numClicks","isFocused","theme","borderStyling","primaryColor","border","outline","name","onClick","onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","setState","prevState","compoentMap","dagre","Dagre","getUrl","useEffect","window","location","href","LuckSheet","cells","maxRow","maxCol","cellUpdated","r","c","console","log","cellUpdateBefore","onSave","sheet","luckysheet","getLuckysheetfile","JSON","stringify","df","i","push","index","v","j","action","filter","endsWith","script","document","createElement","rel","body","append","src","type","celldata","parse","Object","keys","cell","key","d","length","create","container","showtoolbar","color","hook","setFrameHeight","setTimeout","createSheet","className","marginRight","margin","padding","RootComponent","componentName","value","withStreamlitConnection","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2f5bba7b.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as dagreD3 from 'dagre-d3';\r\n\r\nexport default class DagreD3 extends React.Component<{ width?: string|number; height?: string|number; nodes: any[]; edges: any[]; graph?: any; interactive?: boolean; onNodeClick?: any, onNodeHover?: any }> {\r\n  nodeTree: any;\r\n  nodeTreeInner: any;\r\n\r\n  static defaultProps = {\r\n    width: '100%',\r\n    height: '100%',\r\n    nodes: {},\r\n    edges: [],\r\n    graph: {\r\n      isMultiGraph: true,\r\n    },\r\n    interactive: false,\r\n    onNodeClick: () => {}\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.renderDag();\r\n  }\r\n\r\n  sholudComponentUpdate(nextProps: any) {\r\n    return !(this.props.nodes === nextProps.nodes) || !(this.props.edges === nextProps.edges);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.renderDag();\r\n  }\r\n\r\n  setNodeTree = (nodeTree: any) => {\r\n    this.nodeTree = nodeTree;\r\n  }\r\n\r\n  setNodeTreeInner = (nodeTreeInner: any) => {\r\n    this.nodeTreeInner = nodeTreeInner;\r\n  }\r\n\r\n  renderDag() {\r\n    const { nodes, edges, graph, onNodeClick, onNodeHover } = this.props;\r\n\r\n    const g: any = new dagreD3.graphlib.Graph();\r\n    g.setGraph({ ...graph })\r\n      .setDefaultNodeLabel(() => ({}))\r\n      .setDefaultEdgeLabel(() => ({}))\r\n\r\n    nodes.forEach((node: any) => {\r\n      g.setNode(node.id, node);\r\n    })\r\n\r\n    edges.forEach((edge: any) => {\r\n      const { target, source, ...rest } = edge;\r\n      g.setEdge(source, target, rest);\r\n    })\r\n\r\n    const svg = d3.select(this.nodeTree);\r\n    const inner = d3.select(this.nodeTreeInner);\r\n\r\n    // if (interactive) {\r\n    //   // tslint:disable-next-line\r\n    //   const transform: any = d3.scaleDivergingSqrt.transform;\r\n    //   const zoom = d3.zoom().on('zoom', () => inner.attr('trasform', d3.scaleDivergingSqrt.transform));\r\n    //   // tslint:disable-next-line\r\n    //   VTTRegion.call(zoom);\r\n    // }\r\n\r\n    const render = new dagreD3.render();\r\n    render(inner, g);\r\n\r\n    if (onNodeClick) {\r\n      svg.selectAll('g.node').on('click', onNodeClick);\r\n    }\r\n\r\n    if (onNodeHover) {\r\n      svg.selectAll('g.node').on('mouseover', onNodeHover)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { width, height } = this.props;\r\n    return <svg width={width} height={height} ref={this.setNodeTree}>\r\n      <g ref={this.setNodeTreeInner} />\r\n    </svg>\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n} from \"streamlit-component-lib\";\r\nimport DagreD3 from './d3';\r\n\r\nclass CustomComponent extends StreamlitComponentBase<{}> {\r\n  onNodeClick(nodeId: string|number): void{\r\n    Streamlit.setComponentValue({\"action\": \"onClickNode\", \"node\": nodeId});\r\n  }\r\n\r\n  render() {\r\n    const nodes = this.props.args?.data?.nodes.map((node: any) => ({\r\n      ...node,\r\n      style: 'fill: rgb(204, 230, 255);border: solid 1px rgba(0, 0, 0)', shape: 'rect'\r\n    })) || [\r\n      { id: 0, label: 'ReactComponent', style: 'fill: rgb(204, 230, 255);border: solid 1px rgba(0, 0, 0)', shape: 'rect'},\r\n      { id: 1, label: 'props', style: 'fill: rgb(204, 230, 255)', shape: 'rect'},\r\n      { id: 2, label: 'props', style: 'fill: rgb(204, 230, 255)', shape: 'rect'}\r\n    ]\r\n  \r\n    const edges = this.props.args?.data?.edges?.map((edge: any) => ({\r\n      ...edge,\r\n      style: 'stroke: rgb(214, 214, 214);fill: none',\r\n    })) || [\r\n      {target: 1, source: 0, style: 'stroke: rgb(214, 214, 214);fill: none', label: '2333' },\r\n      {target: 2, source: 0, style: 'stroke: rgb(214, 214, 214);fill: none', label: '2333' },\r\n    ]\r\n\r\n    const graph = this.props.args?.data?.graph || { rankdir: 'LR' };\r\n\r\n    return <DagreD3 nodes={nodes} edges={edges} graph={graph} onNodeClick={this.onNodeClick.bind(this)} />\r\n  }\r\n}\r\n\r\nexport default CustomComponent\r\n\r\n// export default withStreamlitConnection(CustomComponent)","import React, { ReactNode } from \"react\"\r\nimport {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n} from \"streamlit-component-lib\"\r\n\r\ninterface State {\r\n  numClicks: number\r\n  isFocused: boolean\r\n}\r\n\r\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\r\nclass ClickDemo extends StreamlitComponentBase<State> {\r\n// class ClickDemo extends React.Component<{ args: any, setComponentValue: any, theme: any, disabled: any }, State> {\r\n  public state = { numClicks: 0, isFocused: false }\r\n\r\n  public render = (): ReactNode => {\r\n    // Arguments that are passed to the plugin in Python are accessible\r\n    // via `this.props.args`. Here, we access the \"name\" arg.\r\n    const data = this.props.args[\"data\"]\r\n\r\n    // Streamlit sends us a theme object via props that we can use to ensure\r\n    // that our component has visuals that match the active theme in a\r\n    // streamlit app.\r\n    const { theme } = this.props\r\n    const style: React.CSSProperties = {}\r\n\r\n    // Maintain compatibility with older versions of Streamlit that don't send\r\n    // a theme object.\r\n    if (theme) {\r\n      // Use the theme object to style our button border. Alternatively, the\r\n      // theme style is defined in CSS vars.\r\n      const borderStyling = `1px solid ${\r\n        this.state.isFocused ? theme.primaryColor : \"gray\"\r\n      }`\r\n      style.border = borderStyling\r\n      style.outline = borderStyling\r\n    }\r\n\r\n    // Show a button and some text.\r\n    // When the button is clicked, we'll increment our \"numClicks\" state\r\n    // variable, and send its new value back to Streamlit, where it'll\r\n    // be available to the Python program.\r\n\r\n    return (\r\n      <span>\r\n        Hello, {data.name}! &nbsp;\r\n        <button\r\n          style={style}\r\n          onClick={this.onClicked}\r\n          disabled={this.props.disabled}\r\n          onFocus={this._onFocus}\r\n          onBlur={this._onBlur}\r\n        >\r\n          Click Me!\r\n        </button>\r\n      </span>\r\n    )\r\n  }\r\n\r\n  /** Click handler for our \"Click Me!\" button. */\r\n  private onClicked = (): void => {\r\n    // Increment state.numClicks, and pass the new value back to\r\n    // Streamlit via `Streamlit.setComponentValue`.\r\n    this.setState(\r\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\r\n      () => Streamlit.setComponentValue(this.state.numClicks)\r\n    )\r\n  }\r\n\r\n  /** Focus handler for our \"Click Me!\" button. */\r\n  private _onFocus = (): void => {\r\n    this.setState({ isFocused: true })\r\n  }\r\n\r\n  /** Blur handler for our \"Click Me!\" button. */\r\n  private _onBlur = (): void => {\r\n    this.setState({ isFocused: false })\r\n  }\r\n}\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\n// export default withStreamlitConnection(ClickDemo)\r\nexport default ClickDemo;\r\n","import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\nimport Dagre from './components/Dagre'\r\nimport ClickDemo from './components/ClickDemo'\r\nimport GetUrl from \"./components/GetUrl\"\r\nimport LuckSheet from \"./components/LuckSheet\"\r\n\r\nconst compoentMap: { [key: string]: any }= {\r\n  dagre: Dagre,\r\n  ClickDemo: ClickDemo,\r\n  getUrl: GetUrl,\r\n  LuckSheet,\r\n}\r\n\r\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\r\nclass RootComponent extends StreamlitComponentBase<{}> {\r\n  sholudComponentUpdate(nextProps: any) {\r\n    return !(this.props.args === nextProps.args);\r\n  }\r\n\r\n  setComponentValue(value: any) {\r\n    Streamlit.setComponentValue(value);\r\n  }\r\n\r\n  public render = (): ReactNode => {\r\n    const componentName: string = this.props.args.componentName;\r\n    const Component: any | undefined = compoentMap[componentName];\r\n    if (!Component) {\r\n      return <div>{componentName}组件不存在</div>;\r\n    }\r\n\r\n    return <Component {...this.props} setComponentValue={this.setComponentValue} />\r\n  }\r\n}\r\nexport default withStreamlitConnection(RootComponent)\r\n","import { useEffect } from \"react\";\r\nimport {\r\n  Streamlit\r\n} from 'streamlit-component-lib';\r\n\r\nexport default function() {\r\n  useEffect(() => {\r\n    Streamlit.setComponentValue(window.location.href);\r\n  }, []);\r\n\r\n  return null;\r\n}","import React, { CSSProperties } from 'react';\r\nimport {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n} from \"streamlit-component-lib\"\r\nimport './index.css'\r\n\r\ndeclare global {\r\n  interface Window {\r\n    luckysheet: any;\r\n  }\r\n}\r\n\r\nclass Luckysheet extends StreamlitComponentBase {\r\n  private cells: any[] = [];\r\n  private maxRow: number = 0;\r\n  private maxCol: number = 0;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    if (!window.luckysheet) {\r\n      const sources = [\r\n        'https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/plugins/css/pluginsCss.css',\r\n        'https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/plugins/plugins.css',\r\n        'https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/css/luckysheet.css',\r\n        'https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/assets/iconfont/iconfont.css',\r\n        'https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/plugins/js/plugin.js',\r\n        'https://cdn.jsdelivr.net/npm/luckysheet@latest/dist/luckysheet.umd.js',\r\n      ]\r\n      sources.forEach(source => {\r\n        if (source.endsWith('.css')) {\r\n          // css\r\n          const script = document.createElement('link');\r\n          script.href = source;\r\n          script.rel = 'stylesheet';\r\n          document.body.append(script);\r\n        } else {\r\n          const script = document.createElement('script');\r\n          script.src = source;\r\n          script.type = 'text/javascript';\r\n          document.body.append(script);\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  cellUpdated = (r: number, c: number) => {\r\n    if (r > this.maxRow) {\r\n      this.maxRow = r;\r\n    }\r\n    if (c > this.maxCol) {\r\n      this.maxCol = c;\r\n    }\r\n    console.log(this.maxRow, this.maxCol, r, c);\r\n  }\r\n\r\n  cellUpdateBefore = (...args: any[]) => {\r\n    console.log(args);\r\n  }\r\n\r\n  createSheet() {\r\n    if (window.luckysheet) {\r\n      const celldata: any[] = [];\r\n      let { data, cells } = this.props.args.data || {};\r\n\r\n      if (data) {\r\n        data = JSON.parse(data);\r\n        if (!cells) {\r\n          cells = Object.keys(data);\r\n        }\r\n\r\n        cells.forEach((cell: any, index: number) => {\r\n          const key = typeof cell === 'string' ? cell : cell.index;\r\n          const d = data[key];\r\n          Object.keys(d).forEach((r: string) => {\r\n            celldata.push({\r\n              r: +r + 1,\r\n              c: index,\r\n              v: d[r],\r\n            });\r\n            if (+r + 1 > this.maxRow) {\r\n              this.maxRow = +r + 1;\r\n            }\r\n          })\r\n        })\r\n      }\r\n\r\n      if (cells) {\r\n        this.cells = cells;\r\n        this.maxCol = cells.length - 1;\r\n        // this.maxCol = this.maxCol || 1;\r\n        // 表头\r\n        cells.forEach((cell: any, index: number) => {\r\n          celldata.push({\r\n            r: 0,\r\n            c: index,\r\n            v: typeof cell === 'string' ? cell : {\r\n              v: cell.name,\r\n            }\r\n          })\r\n        })\r\n      }\r\n\r\n      const luckysheet = window.luckysheet;\r\n      luckysheet.create({\r\n          container: \"luckysheet-container\",\r\n          showtoolbar: true,\r\n          data:[{ \"name\": \"Sheet1\", color: \"\", \"status\": \"1\", \"order\": \"0\", \"celldata\": celldata, \"config\": {}, \"index\":0, \"row\": this.maxRow + 10, \"column\": this.maxCol + 10,\r\n          // filter_select: {\r\n          //   \"row\":[0,2],\r\n          //   \"column\":[0,1],\r\n          // },\r\n        }],\r\n          hook: {\r\n            cellUpdated: this.cellUpdated,\r\n            cellUpdateBefore: this.cellUpdateBefore,\r\n          },\r\n      });\r\n      Streamlit.setFrameHeight(600);\r\n    } else {\r\n      setTimeout(() => {\r\n        this.createSheet();\r\n      }, 1000);\r\n    }\r\n  }\r\n    \r\n  componentDidMount() {\r\n    this.createSheet();\r\n  }\r\n\r\n  onSave = () => {\r\n    const sheet = window.luckysheet.getLuckysheetfile()[0];\r\n    console.log(sheet, JSON.stringify(sheet));\r\n    // const cells = sheet.data[0].map((cell: any) => cell.v);\r\n    let cells = [];\r\n    const data = sheet.data;\r\n    const df: any = {};\r\n    for (let i = 0; i <= this.maxCol; i++) {\r\n      if (this.cells[i] && typeof this.cells[i] === 'object') {\r\n        cells.push(this.cells[i].index);\r\n      } else {\r\n        cells.push(this.cells[i] || sheet.data[0][i].v);\r\n      }\r\n      df[cells[i]] = {};\r\n    }\r\n    for (let i = 1; i <= this.maxRow; i++) {\r\n      for (let j = 0; j <= this.maxCol; j++) {\r\n        if (data[i][j]) {\r\n          df[cells[j]][i - 1] = data[i][j].v;\r\n        }\r\n      }\r\n    }\r\n    Streamlit.setComponentValue({\r\n      action: 'save',\r\n      filter: sheet.filter,\r\n      data: df,\r\n    });\r\n  }\r\n\r\n  render() {\r\n      const luckyCss: CSSProperties = {\r\n          margin: '0px',\r\n          padding: '0px',\r\n          width: '100%',\r\n          height: '100%',\r\n      }\r\n      return (\r\n        <div className=\"lucksheet_box\">\r\n          <div>\r\n            <button onClick={this.onSave} style={{ marginRight: 6 }}>保存</button>\r\n          </div>\r\n          <div\r\n            id=\"luckysheet-container\"\r\n            style={luckyCss}\r\n          ></div>\r\n        </div>\r\n        \r\n      )\r\n  }\r\n}\r\n\r\nexport default Luckysheet","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\n// import ClickDemo from \"./components/ClickDemo\"\r\n// import DagreD3 from './components/Dagre';\r\nimport Root from './root';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <ClickDemo /> */}\r\n    <Root />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}