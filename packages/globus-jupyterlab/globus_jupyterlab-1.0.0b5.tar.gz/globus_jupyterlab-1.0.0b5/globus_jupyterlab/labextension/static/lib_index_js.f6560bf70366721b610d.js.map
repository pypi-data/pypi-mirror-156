{"version":3,"file":"lib_index_js.f6560bf70366721b610d.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAqD;AACF;AACX;AACiB;AACjB;AACK;AACD;AACf;AAC7B,YAAY,iCAAI;AAChB;AACA,YAAY,SAAS,EAAE,6DAAW;AAClC,WAAW,oDAAa;AACxB;AACA;AACA;AACA,oCAAoC,+CAAQ;AAC5C,4CAA4C,+CAAQ,GAAG,sBAAsB;AAC7E,oCAAoC,+CAAQ;AAC5C,kCAAkC,+CAAQ;AAC1C,oCAAoC,+CAAQ;AAC5C,8DAA8D,+CAAQ;AACtE,oCAAoC,+CAAQ;AAC5C,qBAAqB,mDAAY;AACjC,0CAA0C,+CAAQ;AAClD,8BAA8B,+CAAQ;AACtC;AACA,mBAAmB,sDAAc,CAAC,sDAAU;AAC5C;AACA,kBAAkB,4DAAU;AAC5B,iBAAiB,2DAAS;AAC1B;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI,gDAAS;AACb;AACA;AACA;AACA,8BAA8B,sBAAsB;AACpD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sBAAsB;AAChD,6BAA6B,oDAAU,6BAA6B,WAAW;AAC/E;AACA,kCAAkC,oDAAU;AAC5C,uCAAuC,6BAA6B;AACpE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,WAAW;AAC1D;AACA,yBAAyB,IAAI,QAAQ,SAAS;AAC9C;AACA,oCAAoC,oDAAU;AAC9C;AACA;AACA;AACA;AACA;AACA,sDAAsD,YAAY,cAAc;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oDAAU;AACjD;AACA;AACA,gDAAgD,oDAAU;AAC1D;AACA;AACA;AACA,sDAAsD,WAAW;AACjE;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,oDAAU;AACzD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,oDAAU;AACrD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB,UAAU,mEAAmE;AAChH,YAAY,0DAAmB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB,aAAa,2FAA2F;AACvI;AACA;AACA,eAAe,0DAAmB,SAAS,mBAAmB;AAC9D;AACA;AACA,eAAe,0DAAmB,CAAC,qDAAQ,IAAI,oBAAoB;AACnE;AACA,YAAY,0DAAmB,CAAC,uDAAc,2CAA2C,0DAAmB,UAAU,mBAAmB;AACzI,QAAQ,0DAAmB;AAC3B;AA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","sources":["webpack://globus_jupyterlab/./lib/components/Endpoint.js","webpack://globus_jupyterlab/./lib/components/EndpointSearch.js","webpack://globus_jupyterlab/./lib/components/Endpoints.js","webpack://globus_jupyterlab/./lib/components/GlobusObjects.js","webpack://globus_jupyterlab/./lib/components/HubLoginWidget.js","webpack://globus_jupyterlab/./lib/handler.js","webpack://globus_jupyterlab/./lib/index.js","webpack://globus_jupyterlab/./lib/utilities.js","webpack://globus_jupyterlab/./lib/widget.js"],"sourcesContent":["import { Link, useLocation } from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport { requestAPI } from \"../handler\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\nimport { ConfigAtom } from \"./GlobusObjects\";\nimport { HubLogin } from \"./HubLoginWidget\";\nimport * as path from \"path\";\nvar _path = path;\nconst useQuery = () => {\n    const { search } = useLocation();\n    return React.useMemo(() => new URLSearchParams(search), [search]);\n};\nconst Endpoint = (props) => {\n    // Local State\n    const [apiError, setAPIError] = useState(null);\n    const [endpointList, setEndpointList] = useState({ DATA: [], path: null });\n    const [endpoint, setEndpoint] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [loginURL, setLoginURL] = useState(null);\n    const [selectedEndpointItems, setSelectedEndpointItems] = useState([]);\n    const [transfer, setTransfer] = useState(null);\n    const itemsRef = React.useRef([]);\n    const [lastChecked, setLastChecked] = useState(null);\n    const [shift, setShift] = useState(false);\n    // Recoil (global) State\n    const config = useRecoilValue(ConfigAtom);\n    // React Router history and params\n    let history = useHistory();\n    let params = useParams();\n    let endpointID = params.endpointID;\n    let path = params.path;\n    let query = useQuery();\n    // ComponentDidMount Functions\n    useEffect(() => {\n        const handleKeyUp = (event) => {\n            if (event.key === \"Shift\") {\n                setShift(false);\n            }\n        };\n        document.addEventListener(\"keyup\", handleKeyUp);\n        return () => {\n            document.removeEventListener(\"keyup\", handleKeyUp);\n        };\n    }, []);\n    useEffect(() => {\n        const handleKeyDown = (event) => {\n            if (event.shiftKey || event.metaKey) {\n                setShift(true);\n            }\n        };\n        document.addEventListener(\"keydown\", handleKeyDown);\n        return () => {\n            document.removeEventListener(\"keydown\", handleKeyDown);\n        };\n    }, []);\n    useEffect(() => {\n        listEndpointItems(endpointID, path);\n        return () => {\n            setAPIError(null);\n            setEndpointList({ DATA: [], path: null });\n        };\n    }, [endpointID, path]);\n    // @ts-ignore\n    const getSelectedFiles = () => {\n        const selectedFiles = props.factory.tracker.currentWidget.selectedItems();\n        let jupyterItems = [], fileCheck = true;\n        while (fileCheck) {\n            let file = selectedFiles.next();\n            if (file) {\n                jupyterItems.push(file);\n            }\n            else {\n                fileCheck = false;\n            }\n        }\n        return jupyterItems;\n    };\n    const listEndpointItems = async (endpointID, path = null) => {\n        setLoading(true);\n        setAPIError(null);\n        setEndpointList({ DATA: [], path: null });\n        let endpoint = await requestAPI(`endpoint_detail?endpoint=${endpointID}`);\n        if (!endpoint[\"activated\"] && endpoint[\"expires_in\"] == 0) {\n            let activated = await requestAPI(\"endpoint_autoactivate\", {\n                body: JSON.stringify({ endpoint_id: endpoint[\"id\"] }),\n                method: \"POST\",\n            });\n            // Need to research if there is anything meaningful to do with the activation result\n            console.log(activated);\n        }\n        setEndpoint(endpoint);\n        try {\n            var fullPath = query.get(\"full-path\");\n            var url = `operation_ls?endpoint=${endpointID}`;\n            if (fullPath) {\n                url = `${url}&path=${fullPath}`;\n            }\n            const listItems = await requestAPI(url);\n            setLoading(false);\n            setEndpointList(listItems);\n        }\n        catch (error) {\n            setLoading(false);\n            setAPIError(Object.assign(Object.assign({}, error), { global: true }));\n            let error_response = await error.response.json();\n            /*\n              Note: This probably isn't a great UX to simply pop up a login page, but it\n              does demonstrate the base functionality for picking endpoints\n            */\n            if (\"login_url\" in error_response) {\n                // Poll for successful authentication.\n                var lastConfig = await requestAPI(\"config\");\n                var lastLogin = new Date(lastConfig.last_login).getTime();\n                let authInterval = window.setInterval(async () => {\n                    const updatedConfig = await requestAPI(\"config\");\n                    var newLogin = new Date(updatedConfig.last_login).getTime();\n                    if (newLogin !== lastLogin) {\n                        history.push(\"/\");\n                        history.replace(`/endpoints/${endpointID}`);\n                        clearInterval(authInterval);\n                    }\n                }, 1000);\n                if (config.is_hub) {\n                    setAPIError(null);\n                    setLoginURL(error_response.login_url);\n                }\n                else {\n                    window\n                        .open(error_response.login_url, \"Globus Login\", \"height=600,width=800\")\n                        .focus();\n                }\n            }\n        }\n        setLoading(false);\n    };\n    // Event Handlers\n    const handleEndpointSelect = (event) => {\n        var checked;\n        if (shift) {\n            if (lastChecked !== null) {\n                let checkboxes = itemsRef.current;\n                let start = checkboxes.indexOf(lastChecked);\n                let end = checkboxes.indexOf(event.target);\n                checked = checkboxes.slice(Math.min(start, end), Math.max(start, end) + 1);\n                checked.forEach((el) => {\n                    el.checked = start < end ? true : false;\n                });\n            }\n        }\n        else {\n            checked = [event.target];\n        }\n        // Only need unique values from checked\n        checked = [...new Set(checked)];\n        // Reset selectedEndpointItems if checked items length > 1\n        if (checked.length > 1) {\n            setSelectedEndpointItems([]);\n        }\n        // Build selectedEndpointItems\n        checked.forEach((el, index) => {\n            if (el.checked) {\n                setSelectedEndpointItems((selectedEndpointItems) => {\n                    return [JSON.parse(el.value), ...selectedEndpointItems];\n                });\n            }\n            else {\n                const removeItem = JSON.parse(el.value);\n                const index = selectedEndpointItems\n                    .map((item) => {\n                    return item.name;\n                })\n                    .indexOf(removeItem.name);\n                if (index > -1) {\n                    selectedEndpointItems.splice(index, 1);\n                    setSelectedEndpointItems(selectedEndpointItems);\n                }\n            }\n        });\n        setLastChecked(event.target);\n    };\n    const handleTransferToJupyter = async (event) => {\n        event.preventDefault();\n        setAPIError(null);\n        setLoading(true);\n        setTransfer(null);\n        var destinationEndpoint = config.collection_id;\n        var sourceEndpoint = endpoint.id;\n        var transferItems = [];\n        if (props.selectedJupyterItems.directories.length === 0 ||\n            props.selectedJupyterItems.directories.length > 1) {\n            setLoading(false);\n            setAPIError({\n                response: {\n                    status: \"DirectorySelectionError\",\n                    statusText: \"To transfer to Jupyter Hub, you must select only one directory to transfer to.\",\n                },\n            });\n        }\n        else {\n            // Loop through selectedEndpointItems from state\n            for (let selectedEndpointItem of selectedEndpointItems) {\n                let sourcePath = _path.posix.resolve(endpointList.path, selectedEndpointItem.name);\n                let destinationPath = _path.posix.resolve(config.collection_base_path, props.selectedJupyterItems.directories[0].path, selectedEndpointItem.name);\n                transferItems.push({\n                    source_path: sourcePath,\n                    destination_path: destinationPath,\n                    recursive: selectedEndpointItem.type == \"dir\" ? true : false,\n                });\n            }\n            let transferRequest = {\n                source_endpoint: sourceEndpoint,\n                destination_endpoint: destinationEndpoint,\n                DATA: transferItems,\n            };\n            try {\n                const transferResponse = await requestAPI(\"submit_transfer\", {\n                    body: JSON.stringify(transferRequest),\n                    method: \"POST\",\n                });\n                setLoading(false);\n                setTransfer(transferResponse);\n            }\n            catch (error) {\n                setLoading(false);\n                setAPIError(error);\n            }\n        }\n    };\n    const handleTransferFromJupyter = async (event) => {\n        event.preventDefault();\n        setAPIError(null);\n        setLoading(true);\n        setTransfer(null);\n        var destinationEndpoint = endpoint.id;\n        var sourceEndpoint = config.collection_id;\n        var transferItems = [];\n        if (selectedEndpointItems.length > 1) {\n            setAPIError({\n                response: {\n                    status: \"DirectorySelectionError\",\n                    statusText: \"Please only select one remote directory to transfer data to\",\n                },\n            });\n        }\n        // Loop through selectedJupyterItems from props\n        if (props.selectedJupyterItems.directories.length) {\n            for (let directory of props.selectedJupyterItems.directories) {\n                let destinationPath = selectedEndpointItems.length\n                    ? _path.posix.resolve(endpointList.path, selectedEndpointItems[0].name, directory.path)\n                    : _path.posix.resolve(endpointList.path, directory.path);\n                let sourcePath = _path.posix.resolve(config.collection_base_path, directory.path);\n                transferItems.push({\n                    source_path: sourcePath,\n                    destination_path: destinationPath,\n                    recursive: true,\n                });\n            }\n        }\n        if (props.selectedJupyterItems.files.length) {\n            for (let file of props.selectedJupyterItems.files) {\n                let destinationPath = selectedEndpointItems.length\n                    ? _path.posix.resolve(endpointList.path, selectedEndpointItems[0].name, file.path)\n                    : _path.posix.resolve(endpointList.path, file.path);\n                let sourcePath = _path.posix.resolve(config.collection_base_path, file.path);\n                transferItems.push({\n                    source_path: sourcePath,\n                    destination_path: destinationPath,\n                    recursive: false,\n                });\n            }\n        }\n        let transferRequest = {\n            source_endpoint: sourceEndpoint,\n            destination_endpoint: destinationEndpoint,\n            DATA: transferItems,\n        };\n        try {\n            const transferResponse = await requestAPI(\"submit_transfer\", {\n                body: JSON.stringify(transferRequest),\n                method: \"POST\",\n            });\n            setLoading(false);\n            setTransfer(transferResponse);\n        }\n        catch (error) {\n            setLoading(false);\n            setAPIError(error);\n        }\n    };\n    if (apiError && apiError.global) {\n        return (React.createElement(\"div\", { className: \"alert alert-danger alert-dismissible col-8 fade show\" },\n            React.createElement(\"strong\", null,\n                \"Error \",\n                apiError.response.status,\n                \": \",\n                apiError.response.statusText,\n                \".\"),\n            \" \",\n            apiError.details && apiError.details,\n            React.createElement(\"button\", { type: \"button\", className: \"btn-close\", \"data-bs-dismiss\": \"alert\", \"aria-label\": \"Close\" })));\n    }\n    if (loading) {\n        return React.createElement(\"h5\", { className: \"mt-3\" }, \"Loading\");\n    }\n    if (loginURL) {\n        return React.createElement(HubLogin, { loginURL: loginURL });\n    }\n    return (React.createElement(React.Fragment, null, endpointList[\"DATA\"].length > 0 ? (React.createElement(\"div\", { className: \"mt-3\" },\n        React.createElement(\"h5\", null,\n            \"Browsing Collection \",\n            endpoint ? endpoint.display_name : endpointID),\n        React.createElement(\"div\", { className: \"btn-group mb-4 mt-2\" },\n            React.createElement(\"button\", { className: \"btn btn-sm btn-outline-primary\", onClick: () => history.goBack() },\n                React.createElement(\"i\", { className: \"fa-solid fa-turn-up\" }),\n                \" Up one folder\"),\n            React.createElement(\"button\", { className: \"btn btn-sm btn-outline-primary\", onClick: props.handleShowSearch },\n                React.createElement(\"i\", { className: \"fa-solid fa-magnifying-glass\" }),\n                \" Show search\")),\n        transfer && (React.createElement(\"div\", { className: \"alert alert-success alert-dismissible col-8 fade show\" },\n            React.createElement(\"h4\", { className: \"alert-heading\" }, \"Accepted!\"),\n            React.createElement(\"p\", null, transfer[\"message\"]),\n            React.createElement(\"hr\", null),\n            React.createElement(\"p\", { className: \"mb-0\" },\n                React.createElement(\"a\", { className: \"alert-link\", href: `https://app.globus.org/activity/${transfer[\"task_id\"]}`, target: \"_blank\" },\n                    \"Check Status of Request\",\n                    \" \",\n                    React.createElement(\"i\", { className: \"fa-solid fa-arrow-up-right-from-square\" }))),\n            React.createElement(\"button\", { type: \"button\", className: \"btn-close\", \"data-bs-dismiss\": \"alert\", \"aria-label\": \"Close\" }))),\n        apiError && (React.createElement(\"div\", { className: \"alert alert-danger alert-dismissible col-8 fade show\" },\n            React.createElement(\"strong\", null,\n                \"Error \",\n                apiError.response.status,\n                \": \",\n                apiError.response.statusText,\n                \".\"),\n            \" \",\n            apiError.details && apiError.details,\n            React.createElement(\"button\", { type: \"button\", className: \"btn-close\", \"data-bs-dismiss\": \"alert\", \"aria-label\": \"Close\" }))),\n        React.createElement(\"br\", null),\n        React.createElement(\"div\", { id: \"endpoint-list\", className: \"border col-8 rounded py-3\" }, endpointList[\"DATA\"].map((listItem, index) => {\n            return (React.createElement(\"div\", { className: \"form-check ms-3\", key: index }, listItem[\"type\"] == \"dir\" ? (React.createElement(React.Fragment, null,\n                React.createElement(\"input\", { className: \"form-check-input\", type: \"checkbox\", value: JSON.stringify(listItem), ref: (el) => (itemsRef.current[index] = el), onChange: handleEndpointSelect, \"data-list-item-name\": listItem[\"name\"] }),\n                React.createElement(\"label\", null,\n                    React.createElement(Link, { to: `/endpoints/${endpointID}/items/${listItem[\"name\"]}?full-path=${endpointList[\"path\"]}${listItem[\"name\"]}` },\n                        React.createElement(\"i\", { className: \"fa-solid fa-folder-open\" }),\n                        \" \",\n                        listItem[\"name\"])))) : (React.createElement(React.Fragment, null,\n                React.createElement(\"input\", { className: \"form-check-input\", type: \"checkbox\", value: JSON.stringify(listItem), ref: (el) => (itemsRef.current[index] = el), onChange: handleEndpointSelect, \"data-list-item-name\": listItem[\"name\"] }),\n                React.createElement(\"label\", null,\n                    React.createElement(\"i\", { className: \"fa-solid fa-file\" }),\n                    \" \",\n                    listItem[\"name\"])))));\n        })),\n        React.createElement(\"div\", { id: \"transfer-direction\" },\n            React.createElement(\"div\", { className: \"btn-group mt-4\" },\n                React.createElement(\"button\", { type: \"button\", className: \"btn btn-sm btn-outline-secondary\", onClick: handleTransferToJupyter },\n                    React.createElement(\"i\", { className: \"fa-solid fa-arrow-left\" }),\n                    \" Transfer To JupyterLab\"),\n                React.createElement(\"button\", { type: \"button\", className: \"btn btn-sm btn-outline-secondary\", onClick: handleTransferFromJupyter },\n                    React.createElement(\"i\", { className: \"fa-solid fa-arrow-right\" }),\n                    \" Transfer From JupyterLab\"))))) : (React.createElement(\"div\", null,\n        React.createElement(\"button\", { className: \"btn btn-sm btn-primary mb-2 mt-3\", onClick: () => history.goBack() }, \"Back\"),\n        React.createElement(\"p\", null, \"No files or folders found\")))));\n};\nexport default Endpoint;\n","import React, { useRef, useState } from 'react';\nimport { requestAPI } from '../handler';\nimport { Route, useHistory } from 'react-router-dom';\nimport Endpoint from './Endpoint';\nimport Endpoints from './Endpoints';\nconst EndpointSearch = (props) => {\n    const [apiError, setAPIError] = useState(null);\n    const [endpoints, setEndpoints] = useState({ DATA: [] });\n    const [endpointValue, setEndpointValue] = useState('');\n    const [loading, setLoading] = useState(false);\n    const endpointSearch = useRef();\n    const history = useHistory();\n    const handleEndpointClick = (event) => {\n        // @ts-ignore\n        endpointSearch.current.style.display = 'none';\n    };\n    const handleEndpointValueChange = (event) => {\n        setEndpointValue(event.target.value);\n    };\n    const handleSearchEndpoints = async (event) => {\n        let keyCode = event.keyCode;\n        if (keyCode == 13) {\n            setAPIError(null);\n            setEndpoints({ DATA: [] });\n            setLoading(true);\n            try {\n                let endpoints = await requestAPI(`endpoint_search?filter_fulltext=${endpointValue}`);\n                setEndpoints(endpoints);\n                setLoading(false);\n                history.push('/endpoints');\n            }\n            catch (error) {\n                setLoading(false);\n                setAPIError(error);\n            }\n        }\n    };\n    const handleShowSearch = () => {\n        // @ts-ignore\n        endpointSearch.current.style.display = 'block';\n    };\n    if (apiError) {\n        return (React.createElement(\"div\", { id: 'api-row', className: 'row' },\n            React.createElement(\"div\", { className: 'col-8' },\n                React.createElement(\"div\", { className: 'alert alert-danger' },\n                    React.createElement(\"strong\", null,\n                        \"Error \",\n                        apiError.response.status,\n                        \": \",\n                        apiError.response.statusText,\n                        \".\"),\n                    ' ',\n                    \"Please try again.\"))));\n    }\n    if (loading) {\n        return React.createElement(\"h5\", null, \"Loading\");\n    }\n    return (React.createElement(\"div\", { id: 'endpoint-search', className: 'mb-4' },\n        React.createElement(\"div\", { ref: endpointSearch },\n            React.createElement(\"h5\", null, \"Search for Globus Collections\"),\n            React.createElement(\"div\", { className: 'row' },\n                React.createElement(\"div\", { className: 'col-8' },\n                    React.createElement(\"input\", { id: 'endpoint-input', className: 'form-control', placeholder: 'Start typing and press enter to search', type: 'text', value: endpointValue, onChange: handleEndpointValueChange, onKeyDown: handleSearchEndpoints })))),\n        React.createElement(Route, { exact: true, path: '/endpoints', render: (props) => {\n                return React.createElement(Endpoints, Object.assign({}, props, { endpoints: endpoints, handleEndpointClick: handleEndpointClick }));\n            } }),\n        React.createElement(Route, { exact: true, path: '/endpoints/:endpointID' },\n            React.createElement(Endpoint, Object.assign({}, props, { selectedJupyterItems: props.selectedJupyterItems, handleShowSearch: handleShowSearch }))),\n        React.createElement(Route, { path: '/endpoints/:endpointID/items/:path' },\n            React.createElement(Endpoint, Object.assign({}, props, { selectedJupyterItems: props.selectedJupyterItems, handleShowSearch: handleShowSearch })))));\n};\nexport default EndpointSearch;\n","import { Link } from 'react-router-dom';\nimport React from 'react';\nconst Endpoints = (props) => {\n    return (React.createElement(\"div\", { className: 'row' }, props.endpoints['DATA'].length > 0 && (React.createElement(\"div\", { className: 'col-8' },\n        React.createElement(\"div\", { className: 'list-group' }, props.endpoints['DATA'].map((endpoint) => {\n            return (React.createElement(Link, { key: endpoint.id, to: `/endpoints/${endpoint.id}`, className: 'list-group-item list-group-item-action flex-column align-items-start', onClick: props.handleEndpointClick },\n                React.createElement(\"h5\", { className: 'mb-1' },\n                    React.createElement(\"i\", { className: 'fa-solid fa-layer-group' }),\n                    \"\\u00A0\",\n                    endpoint.display_name),\n                React.createElement(\"p\", { className: 'mb-0 mt-2 fw-bold' }, \"Owner:\"),\n                React.createElement(\"p\", { className: 'mb-1' }, endpoint.owner_string),\n                endpoint.description && (React.createElement(React.Fragment, null,\n                    React.createElement(\"p\", { className: 'mb-0 mt-2 fw-bold' }, \"Description:\"),\n                    React.createElement(\"p\", { className: 'mb-1' }, endpoint.description)))));\n        }))))));\n};\nexport default Endpoints;\n","import { atom, selector } from 'recoil';\nexport const ConfigAtom = atom({\n    key: 'ConfigAtom',\n    default: {\n        collection_id: '',\n        collection_base_path: '',\n        is_gcp: false,\n        is_hub: false,\n        is_manual_copy_code_required: false,\n        is_logged_in: false,\n        collection_id_owner: '',\n        last_login: null,\n    },\n});\nexport const TransferAtom = atom({\n    key: 'TransferAtom',\n    default: {\n        source_endpoint: '',\n        destination_endpoint: '',\n        transfer_items: [{\n                source_path: '',\n                destination_path: '',\n                recursive: false\n            }],\n    },\n});\nexport const TransferSelector = selector({\n    key: 'TransferSelector',\n    get: ({ get }) => {\n        return get(TransferAtom);\n    },\n    set: ({ get, set }, newTransferObject) => {\n        let oldTransferObject = get(TransferAtom);\n        let updatedTransferObject = Object.assign(Object.assign({}, oldTransferObject), newTransferObject);\n        set(TransferAtom, updatedTransferObject);\n    },\n});\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { ReactWidget } from \"@jupyterlab/apputils\";\nimport { normalizeURL, requestAPI } from \"../handler\";\nexport const HubLogin = (props) => {\n    const [apiError, setAPIError] = useState(null);\n    const [hubInputCode, setHubInputCode] = useState(null);\n    const hubLoginButton = useRef();\n    useEffect(() => {\n        // @ts-ignore\n        hubLoginButton.current.disabled = true;\n    }, []);\n    const handleHubInputChange = (event) => {\n        if (event.target.value) {\n            // @ts-ignore\n            hubLoginButton.current.disabled = false;\n        }\n        setHubInputCode(event.target.value);\n    };\n    const handleHubLogin = async (event) => {\n        event.preventDefault();\n        try {\n            await requestAPI(`oauth_callback_manual?code=${hubInputCode}`);\n        }\n        catch (error) {\n            setAPIError(error);\n        }\n    };\n    if (apiError) {\n        return (React.createElement(\"div\", { className: \"alert alert-danger alert-dismissible col-8 fade show\" },\n            React.createElement(\"strong\", null,\n                \"Error \",\n                apiError.response.status,\n                \": \",\n                apiError.response.statusText,\n                \".\"),\n            \" \",\n            apiError.details && apiError.details,\n            React.createElement(\"button\", { type: \"button\", className: \"btn-close\", \"data-bs-dismiss\": \"alert\", \"aria-label\": \"Close\" })));\n    }\n    return (React.createElement(\"div\", { className: \"container mt-3\" },\n        React.createElement(\"div\", { className: \"row\" },\n            React.createElement(\"div\", { className: \"col-8\" },\n                apiError && (React.createElement(\"div\", { id: \"api-error\", className: \"alert alert-danger\" },\n                    React.createElement(\"strong\", null,\n                        \"Error \",\n                        apiError.response.status,\n                        \": \",\n                        apiError.response.statusText,\n                        \".\"),\n                    \" \",\n                    \"Please try again.\")),\n                React.createElement(\"ol\", { className: \"list-group\" },\n                    React.createElement(\"li\", { className: \"list-group-item d-flex justify-content-between align-items-start\" },\n                        React.createElement(\"div\", { className: \"ms-2 me-auto\" },\n                            React.createElement(\"div\", { className: \"fw-bold mb-3\" }, \"1. Log In to Globus to obtain an Authorization Code for this transfer\"),\n                            React.createElement(\"button\", { type: \"button\", className: \"btn btn-outline-primary\", onClick: () => {\n                                    let loginURL = \"loginURL\" in props ? props.loginURL : \"login\";\n                                    window\n                                        .open(normalizeURL(loginURL), \"Login with Globus\", \"height=600,width=800\")\n                                        .focus();\n                                } }, \"Log In to Globus\"))),\n                    React.createElement(\"li\", { className: \"list-group-item\" },\n                        React.createElement(\"div\", { className: \"ms-2 me-auto\" },\n                            React.createElement(\"div\", { className: \"fw-bold mb-3\" }, \"2. Copy and paste the Authorization Code you just received from Globus\"),\n                            React.createElement(\"label\", { htmlFor: \"code-input\", className: \"form-label\" }, \"Authorization Code\"),\n                            React.createElement(\"input\", { type: \"text\", id: \"code-input\", className: \"form-control mb-3\", name: \"code-input\", onChange: handleHubInputChange }),\n                            React.createElement(\"button\", { type: \"button\", className: \"btn btn-primary\", ref: hubLoginButton, onClick: handleHubLogin }, \"Continue\"))))))));\n};\nexport class HubLoginWidget extends ReactWidget {\n    render() {\n        return React.createElement(HubLogin, null);\n    }\n}\n","import { URLExt } from \"@jupyterlab/coreutils\";\nimport { ServerConnection } from \"@jupyterlab/services\";\nexport function normalizeURL(endPoint = \"\") {\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, \"globus-jupyterlab\", endPoint);\n    return requestUrl;\n}\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = \"\", init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, \"globus-jupyterlab\", endPoint);\n    let response;\n    try {\n        console.log(\"making request to: \" + requestUrl);\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response);\n    }\n    return await response.json();\n}\n","import { MainAreaWidget } from \"@jupyterlab/apputils\";\nimport { IFileBrowserFactory } from \"@jupyterlab/filebrowser\";\nimport { PageConfig } from \"@jupyterlab/coreutils\";\nimport { GlobusIcon } from \"./utilities\";\nimport { GlobusWidget } from \"./widget\";\nimport { HubLoginWidget } from \"./components/HubLoginWidget\";\nimport { normalizeURL, requestAPI } from \"./handler\";\nimport \"../style/index.css\";\nconst addJupyterCommands = (app, commands) => {\n    for (let command of commands) {\n        app.commands.addCommand(command.command, {\n            label: command.label,\n            caption: command.caption,\n            icon: GlobusIcon,\n            execute: command.execute,\n        });\n    }\n};\n/**\n * Globus plugin\n */\nexport const globus = {\n    id: \"@jupyterlab/globus_jupyterlab\",\n    autoStart: true,\n    requires: [IFileBrowserFactory],\n    activate: activateGlobus,\n};\nasync function activateGlobus(app, factory) {\n    console.log(\"Globus Jupyterlab Extension Activated!\");\n    // GET request\n    try {\n        const data = await requestAPI(\"config\");\n        console.log(\"Fetching basic data about the notebook server environment:\", data);\n        /*\n          Commands to initiate a Globus Transfer.\n          */\n        let extensionCommands = [\n            {\n                command: \"globus-jupyterlab-transfer/context-menu:open\",\n                label: \"Initiate Globus Transfer\",\n                caption: \"Login with Globus to Initiate Transfers\",\n                execute: async () => {\n                    var files = factory.tracker.currentWidget.selectedItems();\n                    var jupyterToken = PageConfig.getToken();\n                    var label = \"Globus Jupyterlab Transfer\";\n                    let jupyterItems = [], fileCheck = true;\n                    while (fileCheck) {\n                        let file = files.next();\n                        if (file) {\n                            jupyterItems.push(file);\n                        }\n                        else {\n                            fileCheck = false;\n                        }\n                    }\n                    // Start creating the widget, but don't attach unless authenticated\n                    const config = await requestAPI(\"config\");\n                    const content = new GlobusWidget(config, factory, jupyterToken, jupyterItems);\n                    const widget = new MainAreaWidget({ content });\n                    widget.title.label = label;\n                    widget.title.icon = GlobusIcon;\n                    if (config.is_logged_in && config.last_login) {\n                        app.shell.add(widget, \"main\");\n                    }\n                    else {\n                        if (config.is_hub) {\n                            const hubContent = new HubLoginWidget();\n                            const hubWidget = new MainAreaWidget({\n                                content: hubContent,\n                            });\n                            hubWidget.title.label = \"Authorization Code\";\n                            hubWidget.title.icon = GlobusIcon;\n                            app.shell.add(hubWidget, \"main\");\n                        }\n                        else {\n                            window\n                                .open(normalizeURL(\"login\"), \"Globus Login\", \"height=600,width=800\")\n                                .focus();\n                        }\n                        // Poll for successful authentication.\n                        let authInterval = window.setInterval(async () => {\n                            const config = await requestAPI(\"config\");\n                            if (config.is_logged_in) {\n                                app.shell.add(widget, \"main\");\n                                clearInterval(authInterval);\n                            }\n                        }, 1000);\n                    }\n                },\n            },\n        ];\n        addJupyterCommands(app, extensionCommands);\n    }\n    catch (error) {\n        console.error(`Error activating Globus plugin.\\n${error}`);\n    }\n}\n/**\n * Export the plugin as default.\n */\nexport default globus;\n","import { LabIcon } from '@jupyterlab/ui-components';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { URLExt } from '@jupyterlab/coreutils';\nexport const getBaseURL = (subPath = '') => {\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, subPath);\n    return requestUrl;\n};\nexport const GlobusIcon = new LabIcon({\n    name: 'globusIcon',\n    svgstr: `\n      <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.0\" width=\"200.000000pt\" height=\"200.000000pt\" viewBox=\"0 0 200.000000 200.000000\" preserveAspectRatio=\"xMidYMid meet\">\n        <g transform=\"translate(0.000000,200.000000) scale(0.100000,-0.100000)\" fill=\"#000000\" stroke=\"none\">\n          <path d=\"M480 1697 c-151 -51 -255 -148 -321 -297 -21 -49 -24 -69 -24 -180 0 -114 3 -131 28 -189 15 -36 24 -68 20 -71 -5 -4 -31 -23 -60 -44 -74 -52 -108 -123 -101 -209 12 -147 127 -268 315 -334 72 -26 90 -28 248 -29 94 0 188 -6 210 -12 146 -40 464 -41 659 -2 259 51 411 132 478 256 55 101 46 177 -30 252 -44 44 -46 49 -48 107 -2 106 -72 213 -167 256 -46 20 -167 26 -211 10 -23 -9 -27 -6 -54 43 -56 99 -149 158 -284 181 -32 5 -43 14 -71 58 -62 96 -156 167 -274 206 -88 29 -224 29 -313 -2z m307 -238 c15 -5 40 -22 56 -37 l27 -26 0 32 0 32 85 0 c69 0 85 -3 85 -15 0 -9 -9 -15 -22 -15 -12 0 -30 -7 -40 -17 -17 -15 -18 -37 -18 -272 0 -141 -4 -271 -9 -289 -5 -17 -6 -32 -2 -32 13 0 104 101 130 143 13 21 34 68 46 105 21 61 25 67 56 74 40 9 104 1 140 -18 30 -15 89 -79 89 -97 0 -7 4 -18 9 -26 7 -11 15 -10 42 10 50 36 151 39 199 7 53 -36 80 -83 80 -138 0 -40 4 -49 31 -69 74 -55 88 -132 39 -218 -79 -137 -270 -220 -535 -230 -150 -6 -282 11 -415 53 -73 23 -100 26 -193 24 -164 -3 -282 34 -352 111 -64 71 -54 141 26 181 41 22 83 23 158 4 50 -13 110 -20 151 -17 8 1 -9 12 -38 26 -41 19 -56 33 -68 60 -8 20 -12 40 -9 45 4 6 26 10 50 10 39 0 46 -4 60 -29 21 -41 53 -61 98 -61 47 0 89 21 104 52 7 12 15 58 18 101 7 77 0 93 -25 63 -6 -8 -32 -23 -56 -32 -64 -24 -141 -7 -193 45 -88 88 -96 292 -16 398 47 61 141 89 212 62z\"/>\n          <path d=\"M687 1400 c-41 -32 -62 -102 -62 -205 0 -110 21 -160 79 -189 33 -16 41 -17 74 -5 29 11 43 25 62 64 21 43 25 63 24 145 0 78 -4 104 -22 141 -33 69 -102 90 -155 49z\"/>\n        </g>\n      </svg>\n    `\n});\n","import { getBaseURL } from './utilities';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport React, { useEffect, useState } from 'react';\nimport { RecoilRoot, useSetRecoilState } from 'recoil';\nimport { requestAPI } from './handler';\nimport EndpointSearch from './components/EndpointSearch';\nimport { ConfigAtom } from './components/GlobusObjects';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// Import specific bootstrap javascript plugins\nimport 'bootstrap/js/dist/alert.js';\nconst App = (props) => {\n    // Local state values\n    const [selectedJupyterItems, setSelectedJupyterItems] = useState({ isEmpty: true });\n    // Global Recoil state values\n    const setConfig = useSetRecoilState(ConfigAtom);\n    useEffect(() => {\n        setConfig(props.config);\n    }, [props.config]);\n    useEffect(() => {\n        getJupyterItems();\n    }, [props.jupyterItems]);\n    const getJupyterItems = async () => {\n        let directories = [];\n        let files = [];\n        let selectedJupyterItemsTemp = {};\n        for (let file of props.jupyterItems) {\n            try {\n                let response = await fetch(getBaseURL(`api/contents/${file.path}`), {\n                    headers: {\n                        Accept: 'application/json',\n                        Authorization: `token ${props.jupyterToken}`,\n                        'Content-Type': 'application/json',\n                    },\n                });\n                let temp = await response.json();\n                if (temp.type == 'directory') {\n                    directories.push(temp);\n                }\n                else {\n                    files.push(temp);\n                }\n            }\n            catch (error) {\n                console.log(error);\n            }\n        }\n        selectedJupyterItemsTemp['directories'] = directories;\n        selectedJupyterItemsTemp['files'] = files;\n        // If we have any file or folder, the payload is not empty\n        if (directories.length || files.length) {\n            selectedJupyterItemsTemp['isEmpty'] = false;\n        }\n        // Transfer direction inferred from selected files/folders\n        if ((files.length && directories.length) || (files.length && !directories.length)) {\n            selectedJupyterItemsTemp['transferDirection'] = 'toEndpoint';\n        }\n        else {\n            selectedJupyterItemsTemp['transferDirection'] = 'toFromEndpoint';\n        }\n        //@ts-ignore\n        setSelectedJupyterItems(selectedJupyterItemsTemp);\n    };\n    const handleLogout = async (event) => {\n        event.preventDefault();\n        await requestAPI('logout');\n        window.open('https://globus.org/logout', 'Logout of Globus', 'height=600,width=800').focus();\n        window.location.reload();\n    };\n    return (React.createElement(\"div\", { className: 'container pt-5' },\n        React.createElement(\"div\", { className: 'row' },\n            React.createElement(\"div\", { className: 'col-8' },\n                React.createElement(\"a\", { href: '#', onClick: handleLogout },\n                    React.createElement(\"i\", { className: 'fa-solid fa-arrow-right-from-bracket' }),\n                    \" Logout of Globus\"),\n                React.createElement(\"hr\", { className: 'mb-3 mt-3' }))),\n        !selectedJupyterItems['isEmpty'] ? (React.createElement(EndpointSearch, { factory: props.factory, selectedJupyterItems: selectedJupyterItems })) : (React.createElement(\"p\", { className: 'fw-bold text-danger' }, \"No files selected\"))));\n};\nexport class GlobusWidget extends ReactWidget {\n    constructor(config = {}, factory = null, jupyterToken = '', jupyterItems = []) {\n        super();\n        this.config = config;\n        this.factory = factory;\n        this.jupyterItems = jupyterItems;\n        this.jupyterToken = jupyterToken;\n        this.addClass('jp-ReactWidget');\n    }\n    render() {\n        return (React.createElement(HashRouter, null,\n            React.createElement(RecoilRoot, null,\n                React.createElement(Switch, null,\n                    React.createElement(Route, { path: '/', render: (props) => {\n                            return (React.createElement(App, Object.assign({}, props, { config: this.config, factory: this.factory, jupyterItems: this.jupyterItems, jupyterToken: this.jupyterToken })));\n                        } })))));\n    }\n}\n"],"names":[],"sourceRoot":""}