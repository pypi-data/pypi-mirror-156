{"version":3,"file":"lib_index_js.074b0a8fdebfa710b57f.js","mappings":";;;;;;;;;;;;;;;AAA2C;AACpC;AACP,kBAAkB,wCAAwC;AAC1D,0CAA0C,qDAAM;AAChD,+CAA+C,qDAAM;AACrD,+CAA+C,qDAAM;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/C+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AClCwD;AACoE;AACI;AACjB;AACxE;AAC2D;AAClG;AACO;AACP,kBAAkB,oCAAoC;AACtD;AACA;AACA,kBAAkB;AAClB,6BAA6B,oDAAU;AACvC;AACA;AACA,mDAAmD,EAAE;AACrD;AACA;AACA,sEAAsE;AACtE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,+DAA+D;AAC/D;AACA;AACA,aAAa;AACb;AACA,iCAAiC,oDAAU,SAAS,4CAA4C;AAChG;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAgB;AACxB,QAAQ,0IAAmC;AAC3C,QAAQ,sIAAqC;AAC7C,QAAQ,yHAAwB;AAChC;AACA;AACA,6CAA6C,WAAW;AACxD;AACA;AACA;AACA;AACA,mCAAmC,oDAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,oCAAoC;AACpG;AACA;AACA,0EAA0E,eAAe;AACzF,sGAAsG,eAAe;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,2GAAoC;AACvG;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,oDAAU;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://@educational-technology-collective/etc_jupyterlab_telemetry_coursera/./lib/etc_jupyterlab_telemetry_validate_button.js","webpack://@educational-technology-collective/etc_jupyterlab_telemetry_coursera/./lib/handler.js","webpack://@educational-technology-collective/etc_jupyterlab_telemetry_coursera/./lib/index.js"],"sourcesContent":["import { Signal } from '@lumino/signaling';\nexport class ETCJupyterLabTelemetryValidateButton {\n    constructor({ notebookPanel, validateButtonExtension }) {\n        this._validateButtonClicked = new Signal(this);\n        this._validationResultsDisplayed = new Signal(this);\n        this._validationResultsDismissed = new Signal(this);\n        this._notebookPanel = notebookPanel;\n        this._validateButtonExtension = validateButtonExtension;\n        this._validateButtonExtension.validateButtonClicked.connect(this.onValidateButtonClicked, this);\n        this._validateButtonExtension.validationResultsDisplayed.connect(this.onValidationResultsDisplayed, this);\n        this._validateButtonExtension.validationResultsDismissed.connect(this.onValidationResultsDismissed, this);\n    }\n    onValidateButtonClicked(sender, args) {\n        if (this._notebookPanel === args.notebook_panel) {\n            this._validateButtonClicked.emit({\n                event_name: args.name,\n                notebookPanel: this._notebookPanel\n            });\n        }\n    }\n    onValidationResultsDisplayed(sender, args) {\n        if (this._notebookPanel === args.notebook_panel) {\n            this._validationResultsDisplayed.emit({\n                event_name: args.name,\n                message: args.message,\n                notebookPanel: this._notebookPanel\n            });\n        }\n    }\n    onValidationResultsDismissed(sender, args) {\n        if (this._notebookPanel === args.notebook_panel) {\n            this._validationResultsDismissed.emit({\n                event_name: args.name,\n                message: args.message,\n                notebookPanel: this._notebookPanel\n            });\n        }\n    }\n    get validateButtonClicked() {\n        return this._validateButtonClicked;\n    }\n    get validationResultsDisplayed() {\n        return this._validationResultsDisplayed;\n    }\n    get validationResultsDismissed() {\n        return this._validationResultsDismissed;\n    }\n}\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'etc-jupyterlab-telemetry-coursera', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { INotebookTracker } from '@jupyterlab/notebook';\nimport { IETCJupyterLabTelemetryLibraryFactory } from \"@educational-technology-collective/etc_jupyterlab_telemetry_library\";\nimport { IETCJupyterLabNotebookStateProvider } from \"@educational-technology-collective/etc_jupyterlab_notebook_state_provider\";\nimport { IValidateButtonExtension } from \"@educational-technology-collective/etc_jupyterlab_nbgrader_validate\";\nimport { requestAPI } from './handler';\nimport { ETCJupyterLabTelemetryValidateButton } from \"./etc_jupyterlab_telemetry_validate_button\";\nconst PLUGIN_ID = '@educational-technology-collective/etc_jupyterlab_telemetry_coursera:plugin';\nexport class AWSAPIGatewayAdapter {\n    constructor({ etcJupyterLabNotebookStateProvider }) {\n        this._etcJupyterLabNotebookStateProvider = etcJupyterLabNotebookStateProvider;\n        this._userId = (async () => {\n            try { // to get the user id.\n                return await requestAPI(\"workspace_id\");\n            }\n            catch (e) {\n                console.error(`Error on GET id.\\n${e}`);\n                return \"UNDEFINED\";\n            }\n            //  This request is specific to the Coursera environment; hence, it may not be relevant in other contexts.\n            //  The request for the `id` resource will return the value of the WORKSPACE_ID environment variable that is assigned on the server.\n        })();\n    }\n    async adaptMessage(sender, data) {\n        try {\n            let notebookState = this._etcJupyterLabNotebookStateProvider.getNotebookState({\n                notebookPanel: data.notebookPanel\n            });\n            let notebookPath = data.notebookPanel.context.path;\n            delete data.notebookPanel;\n            data = Object.assign(Object.assign(Object.assign({}, data), notebookState), {\n                user_id: await this._userId,\n                notebook_path: notebookPath\n            });\n            console.log(data);\n            let response = await requestAPI(\"s3\", { method: \"POST\", body: JSON.stringify(data) });\n            delete data.notebook;\n            delete data.cells;\n            console.log('Response', Object.assign(Object.assign({}, response), data));\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n}\n/**\n * Initialization data for the @educational-technology-collective/etc_jupyterlab_telemetry_coursera extension.\n */\nconst plugin = {\n    id: PLUGIN_ID,\n    autoStart: true,\n    requires: [\n        INotebookTracker,\n        IETCJupyterLabNotebookStateProvider,\n        IETCJupyterLabTelemetryLibraryFactory,\n        IValidateButtonExtension\n    ],\n    activate: (app, notebookTracker, etcJupyterLabNotebookStateProvider, etcJupyterLabTelemetryLibraryFactory, validateButtonExtension) => {\n        console.log(`The JupyterLab plugin ${PLUGIN_ID} is activated!`);\n        (async () => {\n            await app.started;\n            let telemetry = false;\n            try {\n                let result = await requestAPI('telemetry');\n                console.log('telemetry', result);\n                telemetry = result.telemetry;\n            }\n            catch (e) {\n                console.error(e);\n            }\n            if (telemetry === true) {\n                let messageAdapter = new AWSAPIGatewayAdapter({ etcJupyterLabNotebookStateProvider });\n                notebookTracker.widgetAdded.connect(async (sender, notebookPanel) => {\n                    //  Handlers must be attached immediately in order to detect early events, hence we do not want to await the appearance of the Notebook.\n                    etcJupyterLabNotebookStateProvider.addNotebookPanel({ notebookPanel });\n                    let etcJupyterLabTelemetryLibrary = etcJupyterLabTelemetryLibraryFactory.create({ notebookPanel });\n                    etcJupyterLabTelemetryLibrary.notebookOpenEvent.notebookOpened.connect(messageAdapter.adaptMessage, messageAdapter);\n                    etcJupyterLabTelemetryLibrary.notebookSaveEvent.notebookSaved.connect(messageAdapter.adaptMessage, messageAdapter);\n                    etcJupyterLabTelemetryLibrary.activeCellChangeEvent.activeCellChanged.connect(messageAdapter.adaptMessage, messageAdapter);\n                    etcJupyterLabTelemetryLibrary.cellAddEvent.cellAdded.connect(messageAdapter.adaptMessage, messageAdapter);\n                    etcJupyterLabTelemetryLibrary.cellRemoveEvent.cellRemoved.connect(messageAdapter.adaptMessage, messageAdapter);\n                    etcJupyterLabTelemetryLibrary.notebookScrollEvent.notebookScrolled.connect(messageAdapter.adaptMessage, messageAdapter);\n                    etcJupyterLabTelemetryLibrary.cellExecutionEvent.cellExecuted.connect(messageAdapter.adaptMessage, messageAdapter);\n                    etcJupyterLabTelemetryLibrary.cellErrorEvent.cellErrored.connect(messageAdapter.adaptMessage, messageAdapter);\n                    let etcJupyterLabTelemetryValidateButton = new ETCJupyterLabTelemetryValidateButton({\n                        notebookPanel,\n                        validateButtonExtension\n                    });\n                    etcJupyterLabTelemetryValidateButton.validateButtonClicked.connect(messageAdapter.adaptMessage, messageAdapter);\n                    etcJupyterLabTelemetryValidateButton.validationResultsDisplayed.connect(messageAdapter.adaptMessage, messageAdapter);\n                    etcJupyterLabTelemetryValidateButton.validationResultsDismissed.connect(messageAdapter.adaptMessage, messageAdapter);\n                    try {\n                        let data = {\n                            event_name: \"environ\",\n                            environ: await requestAPI('environ'),\n                            notebookPanel: notebookPanel\n                        };\n                        await messageAdapter.adaptMessage(null, data);\n                    }\n                    catch (e) {\n                        console.error(e);\n                    }\n                });\n            }\n        })();\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}