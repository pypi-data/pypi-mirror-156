id:  https://w3id.org/neat-ml
name: neat_ml_schema
description: A schema generated by LinkML for specifying graph ML pipelines in NEAT.
license: https://fsf.org/
prefixes:
  linkml: https://w3id.org/linkml/
imports:
  linkml:types
default_range: string

# #==================================
# # Classes #
# #==================================
# # Params node_type and edge_type attributes could have range: uriorcurie
# # but leaving them to be the default (str) for now.
classes:
  NeatConfiguration:
    description: Root class for the schema.
    tree_root: true
    attributes:
      graph_data:
        description: Configuration for graph data.
        range: GraphDataConfiguration

  GraphDataConfiguration:
    description: Configuration for the graph training and validation data for ML pipeline.
    attributes:
      graph:
        description: Graph configuration for pipeline
        range: EnsmallenRunConfig
      evaluation_data:
        description: Input data for pipeline.
        range: TrainValidData
      source_data:
        description: Compressed input data for pipeline (tar.gz).
        range: FileResourceContainer
  
  FileResourceContainer:
    description: A container of paths and descriptions
    attributes:
      files:
        multivalued: true
        inlined_as_list: true
        range: FileResource

  FileResource:
    description: Path (or url) and description of source files (tar.gz).
    attributes:
      path:
        description: File path or url.
      desc:
        description: File description.

  TrainValidData:
    description: Postive and negative training and validation graph data filepaths.
    attributes:
      train_data:
        description: Positive and negative graph data for ML training.
        range: PosNegData
      valid_data:
        description: Positive and negative graph data for ML validation. 
        range: PosNegData

  PosNegData:
    description: File paths for positive an negative edge data.
  # Strings for now. These are actually paths/urls(maybe?)
    attributes:
      pos_edge_filepath:
        description: Positive edges file path.
      neg_edge_filepath:
        description: Negative edges file path.

  EmbeddingsConfig:
    description: Embeddings configuration.
    attributes:
      filename:
        description: Embeddings file name.
      history_filename:
        description: Embeddings history file name.
      node_embeddings_params:
        description: Node embeddings parameters.
        range: NodeEmbeddingsParams
      tsne_filename:
        description: File name for the TSNE plot.

  NodeEmbeddingsParams:
    description: Node embeddings parameters.
    attributes:
      method_name:
        description: Name of the node embedding method.
        range: node_embed_method_enum
      walk_length:
        description: Maximal length of the walks.
        range: integer
      batch_size:
        description: Number of nodes to include in a single batch.
        range: integer
      window_size:
        description: Size of the context and target nodes for node2vec.
        range: integer
      return_weight:
        description: Weight on the probability of returning to the same node the walk just came from
            Having this higher tends the walks to be
            more like a Breadth-First Search.
            Having this very high  (> 2) makes search very local.
            Equal to the inverse of p in the Node2Vec paper.
        range: float
      explore_weight:
        description: Weight on the probability of visiting a neighbor node
            to the one we're coming from in the random walk
            Having this higher tends the walks to be
            more like a Depth-First Search.
            Having this very high makes search more outward.
            Having this very low makes search very local.
            Equal to the inverse of q in the Node2Vec paper.
        range: float
      iterations:
        description: Number of iterations.
        range: integer

  ClassifierContainer:
    description: A container with multiple classifiers in it.
    attributes:
      classifiers:
        description: Classifier details.
        multivalued: true
        inlined_as_list: true
        range: Classifier

  Classifier:
    description: ML classifiers to be trained-tested-validated and applied for predictions.
    attributes:
      classifier_id:
        description: Key to identify the classifier and associated parameters.
      classifier_name:
        description: Name of the classifier.
      classifier_type:
        description: Type of classifier.
      edge_method:
        description: Edge method.
        range: edge_method_enum
      outfile:
        description: Fie path for saving output.
      history_filename:
        description: File name for saving history.
      parameters:
        description: Parameters to be passed for building classifier.
        range: ClassifierParams


  ClassifierParams:
    description: Parameters needed to define a classifier.
    attributes:
      sklearn_params:
        description: Parameters specific to sklearn.
        range: SkLearnParams
      tf_keras_params:
        description: Parameters specific to Tensorflow/Keras
        range: TFKerasParams

  SkLearnParams:
    description: Parameters specific to the SKLearn library.
    attributes:
      random_state:
        description: Random seed.
        range: integer
      max_iter:
        description: Maximum iterations.
        range: integer

  TFKerasParams:
    description: Parameters specific to the Tensorflow Keras library.
    attributes:
      layers_config:
        description: Configuration for instantiating layers for neural networks.
        range: LayerContainer
      loss:
        description: Loss function.
      metrics_config:
        description: Metrics to be calculated after classifier training.
        range: MetricContainer
      optimizer:
        description: Optimizer function to be used during classifier training.
        range: optimizer_enum
      fit_config:
        description: Configuration for model fitting.
        range: ClassifierFitParams

  LayerContainer:
    description: A container of neural network layers.
    attributes:
      layers:
        description: Container of layers to be used to build the neural network.
        multivalued: true
        inlined_as_list: true
        range: Layer


  Layer:
    description: Layers for a neural network.
    attributes:
      type:
        description: Type of layer.
      parameters:
        range: LayerParams

  LayerParams:
    description: Parameters for each layer of a neural network.
    attributes:
      units:
        description: #NEED DESC
        range: integer
      activation:
        description: Activation layer type
        range: activation_enum
      rate:
        description: #NEED DESC
        range: float

  MetricContainer:
    description: Container of metrics for a trained classifier.
    attributes:
      metrics:
        description: Metrics need to train a classifier.
        multivalued: true
        inlined_as_list: true
        range: Metric
  
  Metric:
    description: Metrics of a trained classifier (model).
    attributes:
      type:
      name: {}
      curve:
        description: Area under curve (AUC) to be calculated.
  
  ClassifierFitParams:
    description: Paramters for fitting a classifier.
    attributes:
      batch_size:
        description: #NEED DESC
        range: integer
      epochs:
        description: Number of epochs to run for training.
        range: integer
      callbacks_list:
        description: Container of callbacks.
        range: ClassifierCallbackContainer
  
  ClassifierCallbackContainer:
    description: A container of classifier callbacks.
    attributes:
      callbacks:
        description: Callbacks.
        multivalued: true
        inlined_as_list: true
        range: ClassifierCallback
  
  ClassifierCallback:
    description: Utilities called at certain points during model training.
    attributes:
      type:
        description: Type of callback.
      monitor:
        description: Quantity to be monitored.
      patience:
        description: Number of epochs with no improvement after which training will be stopped.
        range: integer
      min_delta:
        description: Minimum change in the monitored quantity to qualify as an improvement, i.e. an absolute change of less than min_delta, will count as no improvement.
        range: integer
      verbose:
        description: Verbosity mode, 0 or 1. Mode 0 is silent, and mode 1 displays messages when the callback takes an action.
        range: boolean
      mode:
        description: One of {"auto", "min", "max"}. In min mode, training will stop when the quantity monitored has stopped decreasing; in "max" mode it will stop when the quantity monitored has stopped increasing; in "auto" mode, the direction is automatically inferred from the name of the monitored quantity.
        range: classifier_callback_mode_enum

  ApplyTrainedModelsContainer:
    description: A container with multiple classifiers in it.
    attributes:
      models:
        description: Models that need to be used for link prediction.
        multivalued: true
        inlined_as_list: true
        range: ApplyTrainedModel

  ApplyTrainedModel:
    description: Trained model used for prediction.
    attributes:
      model_id:
        description: Key of the model to be used.
      node_types:
        description: Type of nodes.
        range: NodeType
      cutoff:
        description: Cutoff filter.
      outfile:
        description: File path for saving results.

  NodeType:
    description: Source node or Destination node.
    attributes:
      source:
        description: Source node(s).
        multivalued: true
        inlined_as_list: true
      destination:
        description: Destination node(s).
        multivalued: true
        inlined_as_list: true

  Upload:
    description: Configuration for uploading to Amazon S3 bucket.
    attributes:
      s3_bucket:
        description: Bucket name.
      s3_bucket_dir:
        description: Bucket path.
      extra_args:
        description: Extra keyword arguments (**kwargs).
        multivalued: true
        inlined_as_list: false

  Target:
    description: Path for output to be saved.
    attributes:
      target_path:
        description: File path for saving results.

      # source_paths:
      #   description: Source file names and paths as a dictionary.
      #   multivalued: true
      #   inlined: false
      # source_descs:
      #   description: Source file names and descriptions as a dictionary.
      #   multivalued: true
      #   inlined: false

    

  EnsmallenRunConfig:
    description: All params used by ensmallen's csv_reader
    attributes:
      node_type_path:
        description: The path to the file with the unique node type names.
      node_type_list_separator:
        description: The separator to use for the node types file.
      node_types_column_number:
        description: Node type column number.
        range: integer
      node_types_column:
        description: Node type column name.
      node_types_ids_column_number:
        description: Node type ID column number.
        range: integer
      node_types_ids_column:
        description: Node type ID column name.
      node_types_number:
        description: The number of the unique node types. 
          This will be used in order to allocate the correct size for the data structure.
        range: integer
      numeric_node_type_ids:
        description: Whether the node type names should be loaded as numeric 
          values, i.e. casted from string to a numeric representation.
        range: boolean
      minimum_node_type_id:
        description: The minimum node type ID to be used when using numeric node type IDs.
        range: integer
      node_type_list_header:
        description: Whether the node type file has an header.
        range: boolean
      node_type_list_support_balanced_quotes:
        description: Whether to support balanced quotes.
        range: boolean
      node_type_list_rows_to_skip:
        description: The number of lines to skip in the node types file.
          The header is already skipped if it has been specified that the file has an header.
        range: integer
      node_type_list_is_correct:
        description: Whether the node types file can be assumed to be correct, 
          i.e. does not have something wrong in it. If this parameter is passed as 
          true on a malformed file, the constructor will crash.
        range: boolean
      node_type_list_max_rows_number:
        description: The maximum number of lines to be loaded from the node types file.
        range: integer
      node_type_list_comment_symbol:
        description: The comment symbol to skip lines in the node types file. 
          Lines starting with this symbol will be skipped.
      load_node_type_list_in_parallel:
        description: Whether to load the node type list in parallel. Note that when 
          loading in parallel, the internal order of the node type IDs may result 
          changed across different iterations. We are working to get this to be stable.
        range: boolean
      node_path:
        description: The path to the file with the unique node names.
      node_list_separator:
        description: The separator to use for the nodes file. 
          Note that if this is not provided, one will be automatically 
          detected among the following - comma, semi-column, tab and space.
      node_list_header:
        description: Whether the nodes file has an header.
        range: boolean
      node_list_support_balanced_quotes:
        description: Whether to support balanced quotes.
        range: boolean
      node_list_rows_to_skip:
        description: Number of rows to skip in the node list file.
        range: integer
      node_list_is_correct:
        description: Whether the nodes file can be assumed to be correct, 
          i.e. does not have something wrong in it. If this parameter is passed 
          as true on a malformed file, the constructor will crash.
        range: boolean
      node_list_max_rows_number:
        description: The maximum number of lines to be loaded from the nodes file.
        range: integer
      node_list_comment_symbol:
        description: The comment symbol to skip lines in the nodes file. 
          Lines starting with this symbol will be skipped.
      default_node_type:
        description: The node type to be used when the node type for a given 
          node in the node file is None.
      nodes_column_number:
        description: The number of the column of the node 
          file from where to load the node names.
        range: integer
      nodes_column:
        description: The name of the column of the node file 
          from where to load the node names.
      node_types_separator:
        description: The node types separator.
      node_list_node_types_column_number:
        description: The number of the column of the node file from 
          where to load the node types.
        range: integer
      node_list_node_types_column:
        description: The name of the column of the node file from where to load the node types.
      node_ids_column:
        description: The name of the column of the node file from where to load the node IDs.
      node_ids_column_number:
        description: The number of the column of the node file from where to load the node IDs
        range: integer
      nodes_number:
        description: The expected number of nodes. 
          Note that this must be the EXACT number of nodes in the graph.
        range: integer
      minimum_node_id:
        description: The minimum node ID to be used, when loading the node IDs as numerical.
        range: integer
      numeric_node_ids:
        description: Whether to load the numeric node IDs as numeric.
        range: boolean
      node_list_numeric_node_type_ids:
        description: Whether to load the node types IDs in the node file to be numeric.
        range: boolean
      skip_node_types_if_unavailable:
        description: Whether to skip the node types without raising an error if these are unavailable.
        range: boolean
      load_node_list_in_parallel:
        description: Whether to load the node list in parallel. When loading in parallel, 
          without node IDs, the nodes may not be loaded in a deterministic order.
        range: boolean
      edge_type_path:
        description: The path to the file with the unique edge type names.
      edge_types_column_number:
        description: The number of the column of the edge types file from 
          where to load the edge types.
        range: integer
      edge_types_column:
        description: The name of the column of the edge 
          types file from where to load the edge types.
      # edge_types_ids_column_number:
      #   description: 
      #   range: integer
      # edge_types_ids_column:
      #   description: 
      edge_types_number:
        description: The number of the unique edge types. 
          This will be used in order to allocate the correct size for the data structure.
        range: integer
      numeric_edge_type_ids:
        description: Whether the edge type names should be loaded as numeric values, 
          i.e. casted from string to a numeric representation.
        range: boolean
      minimum_edge_type_id:
        description: The minimum edge type ID to be used when using numeric edge type IDs.
        range: integer
      edge_type_list_separator:
        description: The separator to use for the edge type list. 
          Note that, if None is provided, one will be attempted to be detected 
          automatically between ';', ',', tab or space.
      edge_type_list_header:
        description: Whether the edge type file has an header.
        range: boolean
      edge_type_list_support_balanced_quotes:
        description: Whether to support balanced quotes while reading the edge type list.
        range: boolean
      edge_type_list_rows_to_skip:
        description: Number of rows to skip in the edge type list file.
        range: integer
      edge_type_list_is_correct:
        description: Whether the edge types file can be assumed to be correct, 
          i.e. does not have something wrong in it. If this parameter is passed 
          as true on a malformed file, the constructor will crash.
        range: boolean
      edge_type_list_max_rows_number:
        description: The maximum number of lines to be loaded from the edge types file.
        range: integer
      edge_type_list_comment_symbol:
        description: The comment symbol to skip lines in 
          the edge types file. Lines starting with this symbol will be skipped.
      load_edge_type_list_in_parallel:
        description: Whether to load the edge type list in parallel. 
          When loading in parallel, without edge type IDs, the edge types may 
          not be loaded in a deterministic order.
        range: boolean
      edge_path:
        description: The path to the file with the edge list.
      edge_list_separator:
        description: The separator to use for the edge list. 
          Note that, if None is provided, one will be attempted to be 
          detected automatically between ';', ',', tab or space.
      edge_list_header:
        description: Whether the edges file has an header.
        range: boolean
      edge_list_support_balanced_quotes:
        description: Whether to support balanced quotes while reading the edge list.
        range: boolean
      edge_list_rows_to_skip:
        description: Number of rows to skip in the edge list file.
        range: integer
      sources_column_number:
        description: The number of the column of the edges file from where to load the source nodes.
        range: integer
      sources_column:
        description: The name of the column of the edges file from where to load the source nodes.
      destinations_column_number:
        description: The number of the column of the edges file from where to load the destinaton nodes.
        range: integer
      destinations_column:
        description: The name of the column of the edges file from where to load the destinaton nodes.
      edge_list_edge_types_column_number:
        description: The number of the column of the edges file from where to load the edge types.
        range: integer
      edge_list_edge_types_column:
        description: The name of the column of the edges file from where to load the edge types.
      default_edge_type:
        description: The edge type to be used when the edge type for a given edge in the edge file is None.
      weights_column_number:
        description: The number of the column of the edges file from where to load the edge weights.
        range: integer
      weights_column:
        description: The name of the column of the edges file from where to load the edge weights.
      default_weight:
        description: The edge weight to be used when the edge weight for a given edge in the edge file is None.
        range: float
      edge_ids_column:
        description: The name of the column of the edges file from where to load the edge IDs.
      edge_ids_column_number:
        description: The number of the column of the edges file from where to load the edge IDs.
        range: integer
      edge_list_numeric_edge_type_ids:
        description: Whether to load the edge type IDs as numeric from the edge list.
        range: boolean
      edge_list_numeric_node_ids:
        description: Whether to load the edge node IDs as numeric from the edge list.
        range: boolean
      skip_weights_if_unavailable:
        description: Whether to skip the weights without raising an error if these are unavailable.
        range: boolean
      skip_edge_types_if_unavailable:
        description: Whether to skip the edge types without raising an error if these are unavailable.
        range: boolean
      edge_list_is_complete:
        description: Whether to consider the edge list as complete, 
          i.e. the edges are presented in both directions when loading an undirected graph.
        range: boolean
      edge_list_may_contain_duplicates:
        description: Whether the edge list may contain duplicates. 
          If the edge list surely DOES NOT contain duplicates, 
          a validation step may be skipped. By default, 
          it is assumed that the edge list may contain duplicates.
        range: boolean
      edge_list_is_sorted:
        description: Whether the edge list is sorted. Note that a sorted edge 
          list has the minimal memory peak, but requires the nodes number and the edges number.
        range: boolean
      edge_list_is_correct:
        description: Whether the edges file can be assumed to be correct, 
          i.e. does not have something wrong in it. If this parameter is passed 
          as true on a malformed file, the constructor will crash.
        range: boolean
      edge_list_max_rows_number:
        description: The maximum number of lines to be loaded from the edges file.
        range: integer
      edge_list_comment_symbol:
        description: The comment symbol to skip lines in the edges file. 
          Lines starting with this symbol will be skipped.
      edges_number:
        description: The expected number of edges. Note that this must 
          be the EXACT number of edges in the graph.
        range: integer
      load_edge_list_in_parallel:
        description: Whether to load the edge list in parallel. 
          Note that, if the edge IDs indices are not given, it is 
          NOT possible to load a sorted edge list. Similarly, when 
          loading in parallel, without edge IDs, the edges may not be 
          loaded in a deterministic order.
        range: boolean
      verbose:
        description: Whether to show a loading bar while reading the files. 
          Note that, if parallel loading is enabled, loading bars will not 
          be showed because they are a synchronization bottleneck.
        range: boolean
      may_have_singletons:
        description: Whether the graph may be expected to have singleton nodes. 
          If it is said that it surely DOES NOT have any, it will allow for some 
          speedups and lower mempry peaks.
        range: boolean
      may_have_singleton_with_selfloops:
        description: Whether the graph may be expected to have singleton 
          nodes with selfloops. If it is said that it surely DOES NOT have any, 
          it will allow for some speedups and lower mempry peaks.
        range: boolean
      directed:
        description: Whether to load the graph as directed or undirected.
        range: boolean
      name: {}


#==================================
# Enums                           #
#==================================
enums:
  node_embed_method_enum:
    description: Enums containing possible values for node embedding methods.
    permissible_values:
      SkipGram:
        description: Skip-gram is used to predict the context word 
          for a given target word. It's reverse of CBOW algorithm.
      CBOW:
        description: Continuous Bag of Words Model (CBOW). 
          In the CBOW model, the distributed representations of 
          context (or surrounding words) are combined to predict the word in the middle.
      GloVe:
        description: GloVe is an unsupervised learning algorithm for obtaining vector 
          representations for words. Training is performed on aggregated global 
          word-word co-occurrence statistics from a corpus, and the resulting 
          representations showcase interesting linear substructures of the word vector space.
      Siamese:
        description: A Siamese neural network (sometimes called a twin neural network) 
          is an artificial neural network that uses the same weights while working 
          in tandem on two different input vectors to compute comparable output vectors.
      TransE:
        description: TransE, or Translating Embeddings for Modeling Multi-relational Data, 
          lets us embed the contents of a knowledge graph by assigning vectors 
          to nodes and edge types (a.k.a. predicates) and, for each subject-predicate-object 
          triple, minimizing the distance between the object vector and the 
          translation of the subject vector along the predicate vector. 
      SimplE:
        description: ##NEED DESCRIPTION
      TransH:
        description: TransH defines a hyperplane for each relationship r, 
          and uses the translation vector r and normal vector w of the relationship 
          r on the plane to represent it.
      TransR:
        description: ##NEED DESCRIPTION

  edge_method_enum:
    description: Enums containing possible values for node edge methods.
    permissible_values:
      Average:
        description: ##NEED DESCRIPTION
      Hadamard:
        description: ##NEED DESCRIPTION
      Sum:
        description: ##NEED DESCRIPTION
      L1:
        description: ##NEED DESCRIPTION
      L2:
        description: ##NEED DESCRIPTION
      AbsoluteL1:
        description: ##NEED DESCRIPTION

  activation_enum:
    description: Enums containing possible values for activation functions.
    permissible_values:
      linear:
        description: Linear function.
      relu:
        description: Rectified Linear Unit (ReLU)
      sigmoid:
        description: Sigmoid activation function.
      tanh:
        description: The tanh function.
      softmax:
        description: Softmax (or softargmax) function.

  optimizer_enum:
    description: Optimizers that can be implemented in the neural network.
    permissible_values:
      adagrad:
        description: Optimizer that implements the Adagrad algorithm.
      adam:
        description: Optimizer that implements the Adam algorithm.
      adamax:
        description: Optimizer that implements the Adamax algorithm.
      nadam:
        description: Optimizer that implements the NAdam algorithm.
      sgd:
        description: Stochastic gradient descent (with momentum) optimizer.

  classifier_callback_mode_enum:
    description: Callback modes while fitting a classifier.
    permissible_values:
      auto:
        description: In 'auto' mode, the direction is automatically inferred from the name of the monitored quantity.
      min:
        description: In 'min' mode, the learning rate will be reduced when the quantity monitored has stopped decreasing.
      max:
        description: In 'max' mode, the learning rate will be reduced when the quantity monitored has stopped increasing


  
