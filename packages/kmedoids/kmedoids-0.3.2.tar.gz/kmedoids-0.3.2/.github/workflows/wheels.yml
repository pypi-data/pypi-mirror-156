name: Build and publish wheels on PyPI

on:
  release:
    types: [created]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-wheels:
    name: Build wheels for PyPI
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ "3.8", "3.9", "3.10" ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install prerequisites cffi and virtualenv
        run: pip install cffi virtualenv
      - name: install Rust toolchain
        uses: actions-rs/toolchain@v1
        id: rustup
        with:
          profile: minimal
          toolchain: stable
          override: true

        # setup macOS as in the maturin tests, see:
        # https://github.com/PyO3/maturin/blob/main/.github/workflows/test.yml
      - name: Install aarch64-apple-darwin Rust target
        if: matrix.os == 'macos-latest'
        run: rustup target add aarch64-apple-darwin
      - name: Setup Xcode env
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          sudo xcode-select -s /Applications/Xcode.app
          bindir="$(xcode-select --print-path)/Toolchains/XcodeDefault.xctoolchain/usr/bin"
          echo "CC=${bindir}/clang" >> "${GITHUB_ENV}"
          echo "CXX=${bindir}/clang++" >> "${GITHUB_ENV}"
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> "${GITHUB_ENV}"

      - name: Install Python dependencies
        run: pip install maturin
      - name: Build wheels
        if: matrix.os != 'macos-latest'
        run: maturin build --release --strip
      - name: Build wheels universal2
        if: matrix.os == 'macos-latest'
        # OSX: universal2 binaries, also for M1
        run: maturin build --release --strip --universal2
      - name: Run unit tests on Unix
        if: matrix.os != 'windows-latest'
        # TODO: can we install the wheel built above instead?
        run: |
          python -m venv venv
          source venv/bin/activate
          maturin develop --release
          python -m unittest discover tests
      - name: Run unit tests on Windows
        if: matrix.os == 'windows-latest'
        # TODO: can we install the wheel built above instead?
        run: |
          python -m venv venv
          venv/Scripts/activate.ps1
          maturin develop --release
          python -m unittest discover tests
      - name: Collect artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: target/wheels/
          if-no-files-found: error

  upload-wheels:
    name: Upload wheels to PyPI
    needs: build-wheels
    runs-on: ubuntu-latest
    steps:
      - name: Collect artifacts
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: wheels/
      - name: list contents
        run: ls -R
        working-directory: wheels/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          packages_dir: wheels/
          skip_existing: true
          verbose: true

