from .base import collect_config

from .days_weekly import BusinessCalendarFactory

template_inventory = dict(
    days_weekly=BusinessCalendarFactory
)

def from_config(config, extra_configs=None, **kwargs):
    """Create timeboard from a templated config.

    Identify timeboard's template, collect configuration and additional parameters
    to be used by the template, and invoke the appropriate timeboard's constructor.

    Parameters
    ----------
    config: dict or str
        `config` is either a dictionary or a name of a YAML file containing a dictionary.
        `config` must contain 'template' key whose value is the name of
        a known timeboard template. The timeboard will be created from this template.
    extra_configs: iterable of (dict or str), optional
         Additional pieces of configuration. All pieces are collected in order starting
         with `config` . Every new piece updates (and, possibly, partially overrides) what
         has been collected before. The config used by the template is the result of
         the final update.
    kwargs:
        Optional parameters that fall into the following categories:

        -  parameters that control the properties of the timeboard to be created:
            - template-specific parameters possibly overriding those in the config;
            - timeboard parameters controlled by the template: these are checked for the
              compliance with the template and then passed to `Timeboard()`. The common
              example is `start` and `end` parameters whose values, if given, must fall
              within template's bounds;
            - timeboard parameters not controlled by the template: these are passed to
              `Timeboard()` as they are;
            - timeboard parameters hardcoded into the template. If such a parameter
              is passed in `kwargs`, it will be ignored and a warning will be raised.

        - parameters defining how the created timeboard is to be amended:
            - template-agnostic parameters:
                custom_amendments: dict, default None
                    Amendments that update (and, possibly, partially override)
                    the amendments generated by the template.
                custom_amendments_only: bool, default False
                    Use only custom amendments. Ignore the amendments
                    generated by the template.
                do_not_amend: bool, default False
                    Neither custom, nor template's amendments are applied to the timeboard.

            - template-specific amendment filters: these parameters specify which
              amendments from the template are to be included to or excluded from
              the final amendments dictionary. For example, for the UK business calendar
              you can specify ``country='england'`` to include only holidays celebrated
              in England. Also you can pass ``do_not_observe=('spring', 'summer')`` to
              exclude these holidays.

    Returns
    -------
    :py:class:`.Timeboard`

    Examples
    --------
    >>> from timeboard import from_config

    All examples use 'days_weekly' template.

    Note. When running the examples, make sure that the referenced YAML files are accessible.
    You can copy them from timeboard/timeboard/calendars.

    Create a standard US business calendar without customizations, for all years available:

    >>> clnd = from_config('us_weekly_8x5.yaml')

    Update the standard US business calendar with California state-level holidays
    and also add a corporate anniversary celebration on the 3rd Friday of January:

    >>> corporate = dict(amend=[
    ...    dict(
    ...        name='corporate',
    ...        observance='nth_weekeday_of_month',
    ...        when={'month': 1, 'weekday': 5, 'week': 3}
    ...    )
    ...])
    >>> clnd = from_config('us_weekly_8x5.yaml',
    ...                    extra_configs=['ca_state_holidays.yaml', corporate])

    Create a 2010-2017 business calendar for Scotland but don't observe
    the 2nd of January and St Andrew's Day:

    >>> clnd = from_config('uk_weekly_8x5.yaml',
    ...                     start='01 Jan 2010',
    ...                     end='31 Dec 2017',
    ...                     country = 'scotland',
    ...                     do_not_observe = ('new_year_2', 'st_andrews')
    ...                   )

    Create a 2020 Russian business calendar with 7 working hours on Fridays and
    a one-off holiday on the 22nd of April. Make the default schedule be named '5-day duty':

    >>> clnd = from_config('ru_weekly_8x5.yaml',
    ...                     start='01 Jan 2020',
    ...                     end='31 Dec 2020',
    ...                     weekday_labels=[8, 8, 8, 8, 7, 0, 0],
    ...                     default_name='5-day duty',
    ...                     custom_amendments={'22 Apr 2020': 0}
    ...                   )

    In the above example `weekday_labels` is a template-specific parameter. It overrides
    [8, 8, 8, 8, 8, 0, 0] pattern specified in the template. However, if you try to pass
    ``layout=Organizer('W', structure=[[8, 8, 8, 8, 7, 0, 0]])`` as you would do when
    creating a timeboard directly, you'll receive a warning and `layout` parameter will be
    ignored. This is because `days_weekly` template hardcodes the layout of the timeboard
    to be a weekly sequence of one day workshifts. The template allows to specify only
    the workshifts' labels but not the layout as a whole even if it would comply with
    the template.

    Yet, you can pass `default_name` timeboard parameter in the same way as you would
    do when creating a timeboard directly. This parameter is not controlled by
    the template, so it will be sent to `Timeboard()` as is, together with the arguments
    constructed by the template.

    """

    all_configs = [config]
    if not extra_configs is None:
        all_configs += list(extra_configs)
    collected_config = collect_config(*all_configs)

    try:
        template_name = collected_config['template']
    except KeyError:
        raise KeyError("Required parameter `template` is missing from config")

    try:
        template_class = template_inventory[template_name]
    except KeyError:
        raise ValueError("Uknownn template '{}'".format(template_name))

    template = template_class(collected_config)
    return template.make(**kwargs)
