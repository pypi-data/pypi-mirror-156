-- PROCEDURE: {schema}.check_cardinality_procedure(text, text, integer, integer)
-- DROP PROCEDURE {schema}.check_cardinality_procedure(text, text, integer, integer);
CREATE OR REPLACE PROCEDURE {schema}.check_cardinality_procedure(
    process_table text,
    reference_table text,
    threshold_value integer,
    batch_size integer)
LANGUAGE 'plpgsql'
AS $BODY$
DECLARE
id_val integer;
max_val integer;
BEGIN
EXECUTE format('SELECT COUNT (*)/%L + 1 FROM {schema}.%s', batch_size, process_table) INTO max_val;
--repair geometry
EXECUTE format(
    'ALTER TABLE {schema}.%s ADD COLUMN IF NOT EXISTS temp_id int GENERATED BY DEFAULT AS IDENTITY;', reference_table);
raise notice 'repair geometry start : %', clock_timestamp();
EXECUTE format(
    'UPDATE {schema}.%s SET wkb_geometry = ST_MakeValid(wkb_geometry) WHERE NOT ST_IsValid(wkb_geometry)', process_table);
--geometry index on process table
EXECUTE format(
    'CREATE INDEX IF NOT EXISTS %s_geom_idx ON {schema}.%s USING GIST (wkb_geometry)', process_table, process_table);
EXECUTE format(
    'DROP TABLE IF EXISTS {schema}.%s_single', process_table);
    
--multipart to singlepart
raise notice 'multipart to singlepart start : %', clock_timestamp();
EXECUTE format( 
    'CREATE UNLOGGED TABLE IF NOT EXISTS  {schema}.%s_single AS 
     SELECT ogc_fid,
     dn,
     (ST_DUMP(wkb_geometry)).geom AS wkb_geometry
     FROM {schema}.%I', process_table, process_table);
--to check if is necessary
--EXECUTE format('DELETE FROM {schema}.%s_single WHERE ST_Area(wkb_geometry) < 2000', process_table);
--geometry index on single table
EXECUTE format(
    'CREATE INDEX IF NOT EXISTS %s_single_geom_idx ON {schema}.%s_single USING GIST (wkb_geometry)', process_table, process_table);
--create temp and single clip table
EXECUTE format(
    'DROP TABLE IF EXISTS {schema}.%s_single_clip', process_table);
EXECUTE format(
    'DROP TABLE IF EXISTS {schema}.%s_temp', process_table);
EXECUTE format(
    'CREATE TABLE IF NOT EXISTS {schema}.%s_temp AS SELECT * FROM {schema}.%s_single WHERE 1=0', process_table, process_table);
EXECUTE format(
    'CREATE TABLE IF NOT EXISTS {schema}.%s_single_clip AS SELECT * FROM {schema}.%s_single WHERE 1=0', process_table, process_table);
--geometry index on temp and single clip tables
EXECUTE format(
    'CREATE INDEX IF NOT EXISTS %s_temp_geom_idx ON {schema}.%s_temp USING GIST (wkb_geometry)', process_table, process_table);
EXECUTE format(
    'CREATE INDEX IF NOT EXISTS %s_geom_idx ON {schema}.%s USING GIST (wkb_geometry)', reference_table, reference_table);
COMMIT; 
  FOR id_val IN 0..max_val
  LOOP
    --raise notice 'id_val: %', id_val;
    EXECUTE format('DELETE FROM {schema}.%I_temp', process_table);
    EXECUTE format('INSERT INTO {schema}.%I_temp
                 SELECT * FROM {schema}.%I WHERE ogc_fid > (%s * %L) AND ogc_fid <= %s * (%L + 1)',
                 process_table, process_table, batch_size, id_val, batch_size, id_val, id_val);
    PERFORM {schema}.clip_function(process_table, reference_table);
    --perform {schema}.check_cardinality_v2_part1(t_name, ref_name, threshold_value);
    COMMIT;
  END LOOP;
raise notice 'clip finshed : %', clock_timestamp();
--repair geometry 2
EXECUTE format(
    'UPDATE {schema}.%s_single_clip SET wkb_geometry = ST_MakeValid(wkb_geometry) WHERE NOT ST_IsValid(wkb_geometry)', process_table);
--multipart to singlepart 2
EXECUTE format( 
    'CREATE UNLOGGED TABLE IF NOT EXISTS  {schema}.%s_single_clip_single AS 
     SELECT ogc_fid as id,
     dn,
     (ST_DUMP(wkb_geometry)).geom AS wkb_geometry
     FROM {schema}.%s_single_clip', process_table, process_table);
--geometry index on  single clip single
EXECUTE format(
    'CREATE INDEX IF NOT EXISTS %s_single_clip_single_geom_idx ON {schema}.%s_single_clip_single USING GIST (wkb_geometry)', process_table, process_table);
--centroid 1
EXECUTE format(
    'DROP TABLE IF EXISTS {schema}.%s_single_clip_centroid', process_table);
raise notice 'centroid  start : %', clock_timestamp();
EXECUTE format(
    'CREATE UNLOGGED TABLE {schema}.%s_single_clip_centroid AS
        SELECT id, ST_PointOnSurface(wkb_geometry) AS wkb_geometry
        FROM {schema}.%s_single_clip_single', process_table, process_table);
--geometry index on centroid 1
EXECUTE format(
    'CREATE INDEX IF NOT EXISTS %s_single_clip_centroid_geom_idx ON {schema}.%s_single_clip_centroid USING GIST (wkb_geometry)', process_table, process_table); 
--join 1
EXECUTE format(
    'DROP TABLE IF EXISTS {schema}.%s_single_clip_centroid_join', process_table);
raise notice 'join1  start : %', clock_timestamp();
EXECUTE format(
    'CREATE UNLOGGED TABLE {schema}.%s_single_clip_centroid_join AS
        SELECT a.id AS id,
        b.temp_id as temp_id,
        a.wkb_geometry AS wkb_geometry
        FROM {schema}.%s_single_clip_centroid AS a
        JOIN {schema}.%I AS b
        ON ST_Intersects(b.wkb_geometry, a.wkb_geometry)', process_table, process_table, reference_table);
--geometry index on join 1
EXECUTE format(
    'CREATE INDEX IF NOT EXISTS %s_single_clip_centroid_join_geom_idx ON {schema}.%s_single_clip_centroid_join USING GIST (wkb_geometry)', process_table, process_table);
--join 2
EXECUTE format(
    'DROP TABLE IF EXISTS {schema}.%s_join', process_table);
    
raise notice 'join2  start : %', clock_timestamp();
EXECUTE format(
    'CREATE UNLOGGED TABLE {schema}.%s_join AS
        SELECT a.id AS id,
        a.dn AS pixelvalue,
        b.temp_id AS temp_id,
        a.wkb_geometry AS wkb_geometry
        FROM {schema}.%s_single_clip_single AS a JOIN {schema}.%s_single_clip_centroid_join AS b
        ON ST_Intersects(b.wkb_geometry, a.wkb_geometry)', process_table, process_table, process_table);
--calculate area on clipped polygon
EXECUTE format(
    'ALTER TABLE {schema}.%s_join ADD COLUMN area REAL', process_table);
    
EXECUTE format(
    'UPDATE {schema}.%s_join SET area = ST_Area(wkb_geometry)', process_table);
--geometry, objectid and area index on clipped join
EXECUTE format(
    'CREATE INDEX IF NOT EXISTS %s_join_geom_idx ON {schema}.%s_join USING GIST (wkb_geometry)', process_table, process_table);
EXECUTE format(
    'CREATE INDEX IF NOT EXISTS %s_temp_id_area_idx ON {schema}.%s_join (temp_id, area)', process_table, process_table);
COMMIT;
--clusters
raise notice 'cluster  start : %', clock_timestamp();
EXECUTE format(
    'DROP TABLE IF EXISTS {schema}.%s_clusters', process_table);
EXECUTE format( 
    'CREATE UNLOGGED TABLE IF NOT EXISTS  {schema}.%s_clusters AS 
     (SELECT id, temp_id, pixelvalue, area, wkb_geometry
     FROM {schema}.%s_join a 
    where exists (select temp_id::text, count(distinct pixelvalue)::int FROM {schema}.%s_join b
   WHERE area > 2000
   and a.temp_id = b.temp_id
   GROUP BY temp_id
   HAVING COUNT(DISTINCT pixelvalue) > 1) 
    and area > 2000)', process_table, process_table, process_table);
--create and populate cardinality table
EXECUTE format( 
    'DROP TABLE IF EXISTS {schema}.%s_cardin', process_table);
EXECUTE format( 
    'CREATE TABLE IF NOT EXISTS  {schema}.%s_cardin AS 
     (SELECT * FROM {schema}.%I)', process_table, reference_table);
EXECUTE FORMAT('ALTER TABLE {schema}.%s_cardin ADD COLUMN foi_c INT DEFAULT 0', process_table);
EXECUTE format(
    'UPDATE {schema}.%s_cardin SET foi_c = 1  WHERE  temp_id IN (SELECT DISTINCT(temp_id) FROM {schema}.%s_clusters)',
    process_table, process_table);
--clean the database from temporary tables  
EXECUTE FORMAT('DROP TABLE IF EXISTS {schema}.%s_join', process_table);
EXECUTE FORMAT('DROP TABLE IF EXISTS {schema}.%s_single', process_table);
EXECUTE FORMAT('DROP TABLE IF EXISTS {schema}.%s_single_clip', process_table);
EXECUTE FORMAT('DROP TABLE IF EXISTS {schema}.%s_single_clip_centroid', process_table);
EXECUTE FORMAT('DROP TABLE IF EXISTS {schema}.%s_single_clip_centroid_join', process_table);
EXECUTE FORMAT('DROP TABLE IF EXISTS {schema}.%s_single_clip_single', process_table); 
COMMIT;
END $BODY$;
