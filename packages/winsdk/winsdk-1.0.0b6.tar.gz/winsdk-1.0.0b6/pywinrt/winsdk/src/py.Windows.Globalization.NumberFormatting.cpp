// WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.6

#include "pybase.h"
#include "py.Windows.Globalization.NumberFormatting.h"


namespace py::cpp::Windows::Globalization::NumberFormatting
{
    struct module_state
    {
        PyObject* type_CurrencyFormatterMode;
        PyObject* type_RoundingAlgorithm;
        PyTypeObject* type_CurrencyFormatter;
        PyTypeObject* type_DecimalFormatter;
        PyTypeObject* type_IncrementNumberRounder;
        PyTypeObject* type_NumeralSystemTranslator;
        PyTypeObject* type_PercentFormatter;
        PyTypeObject* type_PermilleFormatter;
        PyTypeObject* type_SignificantDigitsNumberRounder;
        PyTypeObject* type_INumberFormatter;
        PyTypeObject* type_INumberFormatter2;
        PyTypeObject* type_INumberFormatterOptions;
        PyTypeObject* type_INumberParser;
        PyTypeObject* type_INumberRounder;
        PyTypeObject* type_INumberRounderOption;
        PyTypeObject* type_ISignedZeroOption;
        PyTypeObject* type_ISignificantDigitsOption;
    };

    static PyObject* register_CurrencyFormatterMode(PyObject* module, PyObject* type)
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_CurrencyFormatterMode)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_CurrencyFormatterMode = type;
        Py_INCREF(state->type_CurrencyFormatterMode);


        Py_RETURN_NONE;
    }

    static PyObject* register_RoundingAlgorithm(PyObject* module, PyObject* type)
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
        assert(state);

        if (state->type_RoundingAlgorithm)
        {
            PyErr_SetString(PyExc_RuntimeError, "type has already been registered");
            return nullptr;
        }

        if (!PyType_Check(type))
        {
            PyErr_SetString(PyExc_TypeError, "argument is not a type");
            return nullptr;
        }

        state->type_RoundingAlgorithm = type;
        Py_INCREF(state->type_RoundingAlgorithm);


        Py_RETURN_NONE;
    }

    // ----- CurrencyFormatter class --------------------
    constexpr const char* const type_name_CurrencyFormatter = "CurrencyFormatter";

    static PyObject* _new_CurrencyFormatter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                winrt::Windows::Globalization::NumberFormatting::CurrencyFormatter instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 3)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);
                auto param1 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 1);
                auto param2 = py::convert_to<winrt::hstring>(args, 2);

                winrt::Windows::Globalization::NumberFormatting::CurrencyFormatter instance{ param0, param1, param2 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_CurrencyFormatter(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* CurrencyFormatter_ApplyRoundingForCurrency(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::RoundingAlgorithm>(args, 0);

                self->obj.ApplyRoundingForCurrency(param0);
                Py_RETURN_NONE;
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_Format(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.Format(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_FormatDouble(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.FormatDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_FormatInt(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                return py::convert(self->obj.FormatInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_FormatUInt(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.FormatUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_ParseDouble(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_ParseInt(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_ParseUInt(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_get_Currency(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Currency());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_Currency(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.Currency(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_Mode(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Mode());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_Mode(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::CurrencyFormatterMode>(arg);

            self->obj.Mode(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumeralSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NumeralSystem(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsGrouped());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsGrouped(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsDecimalPointAlwaysDisplayed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsDecimalPointAlwaysDisplayed(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IntegerDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.IntegerDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FractionDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.FractionDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_GeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_get_ResolvedGeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedGeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_get_ResolvedLanguage(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_get_Languages(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* CurrencyFormatter_get_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberRounder());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::INumberRounder>(arg);

            self->obj.NumberRounder(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsZeroSigned());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsZeroSigned(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* CurrencyFormatter_get_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SignificantDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int CurrencyFormatter_put_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.SignificantDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_CurrencyFormatter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::CurrencyFormatter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_CurrencyFormatter[] = {
        { "apply_rounding_for_currency", reinterpret_cast<PyCFunction>(CurrencyFormatter_ApplyRoundingForCurrency), METH_VARARGS, nullptr },
        { "format", reinterpret_cast<PyCFunction>(CurrencyFormatter_Format), METH_VARARGS, nullptr },
        { "format_double", reinterpret_cast<PyCFunction>(CurrencyFormatter_FormatDouble), METH_VARARGS, nullptr },
        { "format_int", reinterpret_cast<PyCFunction>(CurrencyFormatter_FormatInt), METH_VARARGS, nullptr },
        { "format_uint", reinterpret_cast<PyCFunction>(CurrencyFormatter_FormatUInt), METH_VARARGS, nullptr },
        { "parse_double", reinterpret_cast<PyCFunction>(CurrencyFormatter_ParseDouble), METH_VARARGS, nullptr },
        { "parse_int", reinterpret_cast<PyCFunction>(CurrencyFormatter_ParseInt), METH_VARARGS, nullptr },
        { "parse_uint", reinterpret_cast<PyCFunction>(CurrencyFormatter_ParseUInt), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_CurrencyFormatter), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_CurrencyFormatter[] = {
        { "currency", reinterpret_cast<getter>(CurrencyFormatter_get_Currency), reinterpret_cast<setter>(CurrencyFormatter_put_Currency), nullptr, nullptr },
        { "mode", reinterpret_cast<getter>(CurrencyFormatter_get_Mode), reinterpret_cast<setter>(CurrencyFormatter_put_Mode), nullptr, nullptr },
        { "numeral_system", reinterpret_cast<getter>(CurrencyFormatter_get_NumeralSystem), reinterpret_cast<setter>(CurrencyFormatter_put_NumeralSystem), nullptr, nullptr },
        { "is_grouped", reinterpret_cast<getter>(CurrencyFormatter_get_IsGrouped), reinterpret_cast<setter>(CurrencyFormatter_put_IsGrouped), nullptr, nullptr },
        { "is_decimal_point_always_displayed", reinterpret_cast<getter>(CurrencyFormatter_get_IsDecimalPointAlwaysDisplayed), reinterpret_cast<setter>(CurrencyFormatter_put_IsDecimalPointAlwaysDisplayed), nullptr, nullptr },
        { "integer_digits", reinterpret_cast<getter>(CurrencyFormatter_get_IntegerDigits), reinterpret_cast<setter>(CurrencyFormatter_put_IntegerDigits), nullptr, nullptr },
        { "fraction_digits", reinterpret_cast<getter>(CurrencyFormatter_get_FractionDigits), reinterpret_cast<setter>(CurrencyFormatter_put_FractionDigits), nullptr, nullptr },
        { "geographic_region", reinterpret_cast<getter>(CurrencyFormatter_get_GeographicRegion), nullptr, nullptr, nullptr },
        { "resolved_geographic_region", reinterpret_cast<getter>(CurrencyFormatter_get_ResolvedGeographicRegion), nullptr, nullptr, nullptr },
        { "resolved_language", reinterpret_cast<getter>(CurrencyFormatter_get_ResolvedLanguage), nullptr, nullptr, nullptr },
        { "languages", reinterpret_cast<getter>(CurrencyFormatter_get_Languages), nullptr, nullptr, nullptr },
        { "number_rounder", reinterpret_cast<getter>(CurrencyFormatter_get_NumberRounder), reinterpret_cast<setter>(CurrencyFormatter_put_NumberRounder), nullptr, nullptr },
        { "is_zero_signed", reinterpret_cast<getter>(CurrencyFormatter_get_IsZeroSigned), reinterpret_cast<setter>(CurrencyFormatter_put_IsZeroSigned), nullptr, nullptr },
        { "significant_digits", reinterpret_cast<getter>(CurrencyFormatter_get_SignificantDigits), reinterpret_cast<setter>(CurrencyFormatter_put_SignificantDigits), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_CurrencyFormatter[] = 
    {
        { Py_tp_new, _new_CurrencyFormatter },
        { Py_tp_dealloc, _dealloc_CurrencyFormatter },
        { Py_tp_methods, _methods_CurrencyFormatter },
        { Py_tp_getset, _getset_CurrencyFormatter },
        { },
    };

    static PyType_Spec type_spec_CurrencyFormatter =
    {
        "_winsdk_Windows_Globalization_NumberFormatting.CurrencyFormatter",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::CurrencyFormatter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_CurrencyFormatter
    };

    // ----- DecimalFormatter class --------------------
    constexpr const char* const type_name_DecimalFormatter = "DecimalFormatter";

    static PyObject* _new_DecimalFormatter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::Globalization::NumberFormatting::DecimalFormatter instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Globalization::NumberFormatting::DecimalFormatter instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_DecimalFormatter(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* DecimalFormatter_Format(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.Format(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_FormatDouble(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.FormatDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_FormatInt(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                return py::convert(self->obj.FormatInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_FormatUInt(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.FormatUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_ParseDouble(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_ParseInt(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_ParseUInt(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_get_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsDecimalPointAlwaysDisplayed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DecimalFormatter_put_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsDecimalPointAlwaysDisplayed(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DecimalFormatter_get_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IntegerDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DecimalFormatter_put_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.IntegerDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DecimalFormatter_get_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsGrouped());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DecimalFormatter_put_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsGrouped(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DecimalFormatter_get_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumeralSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DecimalFormatter_put_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NumeralSystem(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DecimalFormatter_get_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FractionDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DecimalFormatter_put_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.FractionDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DecimalFormatter_get_GeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_get_Languages(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_get_ResolvedGeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedGeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_get_ResolvedLanguage(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* DecimalFormatter_get_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberRounder());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DecimalFormatter_put_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::INumberRounder>(arg);

            self->obj.NumberRounder(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DecimalFormatter_get_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsZeroSigned());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DecimalFormatter_put_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsZeroSigned(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* DecimalFormatter_get_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SignificantDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int DecimalFormatter_put_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.SignificantDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_DecimalFormatter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::DecimalFormatter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_DecimalFormatter[] = {
        { "format", reinterpret_cast<PyCFunction>(DecimalFormatter_Format), METH_VARARGS, nullptr },
        { "format_double", reinterpret_cast<PyCFunction>(DecimalFormatter_FormatDouble), METH_VARARGS, nullptr },
        { "format_int", reinterpret_cast<PyCFunction>(DecimalFormatter_FormatInt), METH_VARARGS, nullptr },
        { "format_uint", reinterpret_cast<PyCFunction>(DecimalFormatter_FormatUInt), METH_VARARGS, nullptr },
        { "parse_double", reinterpret_cast<PyCFunction>(DecimalFormatter_ParseDouble), METH_VARARGS, nullptr },
        { "parse_int", reinterpret_cast<PyCFunction>(DecimalFormatter_ParseInt), METH_VARARGS, nullptr },
        { "parse_uint", reinterpret_cast<PyCFunction>(DecimalFormatter_ParseUInt), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_DecimalFormatter), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_DecimalFormatter[] = {
        { "is_decimal_point_always_displayed", reinterpret_cast<getter>(DecimalFormatter_get_IsDecimalPointAlwaysDisplayed), reinterpret_cast<setter>(DecimalFormatter_put_IsDecimalPointAlwaysDisplayed), nullptr, nullptr },
        { "integer_digits", reinterpret_cast<getter>(DecimalFormatter_get_IntegerDigits), reinterpret_cast<setter>(DecimalFormatter_put_IntegerDigits), nullptr, nullptr },
        { "is_grouped", reinterpret_cast<getter>(DecimalFormatter_get_IsGrouped), reinterpret_cast<setter>(DecimalFormatter_put_IsGrouped), nullptr, nullptr },
        { "numeral_system", reinterpret_cast<getter>(DecimalFormatter_get_NumeralSystem), reinterpret_cast<setter>(DecimalFormatter_put_NumeralSystem), nullptr, nullptr },
        { "fraction_digits", reinterpret_cast<getter>(DecimalFormatter_get_FractionDigits), reinterpret_cast<setter>(DecimalFormatter_put_FractionDigits), nullptr, nullptr },
        { "geographic_region", reinterpret_cast<getter>(DecimalFormatter_get_GeographicRegion), nullptr, nullptr, nullptr },
        { "languages", reinterpret_cast<getter>(DecimalFormatter_get_Languages), nullptr, nullptr, nullptr },
        { "resolved_geographic_region", reinterpret_cast<getter>(DecimalFormatter_get_ResolvedGeographicRegion), nullptr, nullptr, nullptr },
        { "resolved_language", reinterpret_cast<getter>(DecimalFormatter_get_ResolvedLanguage), nullptr, nullptr, nullptr },
        { "number_rounder", reinterpret_cast<getter>(DecimalFormatter_get_NumberRounder), reinterpret_cast<setter>(DecimalFormatter_put_NumberRounder), nullptr, nullptr },
        { "is_zero_signed", reinterpret_cast<getter>(DecimalFormatter_get_IsZeroSigned), reinterpret_cast<setter>(DecimalFormatter_put_IsZeroSigned), nullptr, nullptr },
        { "significant_digits", reinterpret_cast<getter>(DecimalFormatter_get_SignificantDigits), reinterpret_cast<setter>(DecimalFormatter_put_SignificantDigits), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_DecimalFormatter[] = 
    {
        { Py_tp_new, _new_DecimalFormatter },
        { Py_tp_dealloc, _dealloc_DecimalFormatter },
        { Py_tp_methods, _methods_DecimalFormatter },
        { Py_tp_getset, _getset_DecimalFormatter },
        { },
    };

    static PyType_Spec type_spec_DecimalFormatter =
    {
        "_winsdk_Windows_Globalization_NumberFormatting.DecimalFormatter",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::DecimalFormatter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_DecimalFormatter
    };

    // ----- IncrementNumberRounder class --------------------
    constexpr const char* const type_name_IncrementNumberRounder = "IncrementNumberRounder";

    static PyObject* _new_IncrementNumberRounder(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Globalization::NumberFormatting::IncrementNumberRounder instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_IncrementNumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* IncrementNumberRounder_RoundDouble(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.RoundDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IncrementNumberRounder_RoundInt32(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.RoundInt32(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IncrementNumberRounder_RoundInt64(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                return py::convert(self->obj.RoundInt64(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IncrementNumberRounder_RoundSingle(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<float>(args, 0);

                return py::convert(self->obj.RoundSingle(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IncrementNumberRounder_RoundUInt32(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.RoundUInt32(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IncrementNumberRounder_RoundUInt64(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.RoundUInt64(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* IncrementNumberRounder_get_RoundingAlgorithm(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RoundingAlgorithm());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IncrementNumberRounder_put_RoundingAlgorithm(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::RoundingAlgorithm>(arg);

            self->obj.RoundingAlgorithm(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* IncrementNumberRounder_get_Increment(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Increment());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int IncrementNumberRounder_put_Increment(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<double>(arg);

            self->obj.Increment(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_IncrementNumberRounder(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::IncrementNumberRounder>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_IncrementNumberRounder[] = {
        { "round_double", reinterpret_cast<PyCFunction>(IncrementNumberRounder_RoundDouble), METH_VARARGS, nullptr },
        { "round_int32", reinterpret_cast<PyCFunction>(IncrementNumberRounder_RoundInt32), METH_VARARGS, nullptr },
        { "round_int64", reinterpret_cast<PyCFunction>(IncrementNumberRounder_RoundInt64), METH_VARARGS, nullptr },
        { "round_single", reinterpret_cast<PyCFunction>(IncrementNumberRounder_RoundSingle), METH_VARARGS, nullptr },
        { "round_uint32", reinterpret_cast<PyCFunction>(IncrementNumberRounder_RoundUInt32), METH_VARARGS, nullptr },
        { "round_uint64", reinterpret_cast<PyCFunction>(IncrementNumberRounder_RoundUInt64), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_IncrementNumberRounder), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_IncrementNumberRounder[] = {
        { "rounding_algorithm", reinterpret_cast<getter>(IncrementNumberRounder_get_RoundingAlgorithm), reinterpret_cast<setter>(IncrementNumberRounder_put_RoundingAlgorithm), nullptr, nullptr },
        { "increment", reinterpret_cast<getter>(IncrementNumberRounder_get_Increment), reinterpret_cast<setter>(IncrementNumberRounder_put_Increment), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_IncrementNumberRounder[] = 
    {
        { Py_tp_new, _new_IncrementNumberRounder },
        { Py_tp_dealloc, _dealloc_IncrementNumberRounder },
        { Py_tp_methods, _methods_IncrementNumberRounder },
        { Py_tp_getset, _getset_IncrementNumberRounder },
        { },
    };

    static PyType_Spec type_spec_IncrementNumberRounder =
    {
        "_winsdk_Windows_Globalization_NumberFormatting.IncrementNumberRounder",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::IncrementNumberRounder),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_IncrementNumberRounder
    };

    // ----- NumeralSystemTranslator class --------------------
    constexpr const char* const type_name_NumeralSystemTranslator = "NumeralSystemTranslator";

    static PyObject* _new_NumeralSystemTranslator(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);

                winrt::Windows::Globalization::NumberFormatting::NumeralSystemTranslator instance{ param0 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Globalization::NumberFormatting::NumeralSystemTranslator instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_NumeralSystemTranslator(py::wrapper::Windows::Globalization::NumberFormatting::NumeralSystemTranslator* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* NumeralSystemTranslator_TranslateNumerals(py::wrapper::Windows::Globalization::NumberFormatting::NumeralSystemTranslator* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.TranslateNumerals(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* NumeralSystemTranslator_get_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::NumeralSystemTranslator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumeralSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int NumeralSystemTranslator_put_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::NumeralSystemTranslator* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NumeralSystem(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* NumeralSystemTranslator_get_Languages(py::wrapper::Windows::Globalization::NumberFormatting::NumeralSystemTranslator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* NumeralSystemTranslator_get_ResolvedLanguage(py::wrapper::Windows::Globalization::NumberFormatting::NumeralSystemTranslator* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_NumeralSystemTranslator(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::NumeralSystemTranslator>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_NumeralSystemTranslator[] = {
        { "translate_numerals", reinterpret_cast<PyCFunction>(NumeralSystemTranslator_TranslateNumerals), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_NumeralSystemTranslator), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_NumeralSystemTranslator[] = {
        { "numeral_system", reinterpret_cast<getter>(NumeralSystemTranslator_get_NumeralSystem), reinterpret_cast<setter>(NumeralSystemTranslator_put_NumeralSystem), nullptr, nullptr },
        { "languages", reinterpret_cast<getter>(NumeralSystemTranslator_get_Languages), nullptr, nullptr, nullptr },
        { "resolved_language", reinterpret_cast<getter>(NumeralSystemTranslator_get_ResolvedLanguage), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_NumeralSystemTranslator[] = 
    {
        { Py_tp_new, _new_NumeralSystemTranslator },
        { Py_tp_dealloc, _dealloc_NumeralSystemTranslator },
        { Py_tp_methods, _methods_NumeralSystemTranslator },
        { Py_tp_getset, _getset_NumeralSystemTranslator },
        { },
    };

    static PyType_Spec type_spec_NumeralSystemTranslator =
    {
        "_winsdk_Windows_Globalization_NumberFormatting.NumeralSystemTranslator",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::NumeralSystemTranslator),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_NumeralSystemTranslator
    };

    // ----- PercentFormatter class --------------------
    constexpr const char* const type_name_PercentFormatter = "PercentFormatter";

    static PyObject* _new_PercentFormatter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::Globalization::NumberFormatting::PercentFormatter instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Globalization::NumberFormatting::PercentFormatter instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PercentFormatter(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PercentFormatter_Format(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.Format(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_FormatDouble(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.FormatDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_FormatInt(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                return py::convert(self->obj.FormatInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_FormatUInt(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.FormatUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_ParseDouble(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_ParseInt(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_ParseUInt(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_get_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsDecimalPointAlwaysDisplayed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PercentFormatter_put_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsDecimalPointAlwaysDisplayed(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PercentFormatter_get_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IntegerDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PercentFormatter_put_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.IntegerDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PercentFormatter_get_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsGrouped());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PercentFormatter_put_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsGrouped(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PercentFormatter_get_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumeralSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PercentFormatter_put_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NumeralSystem(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PercentFormatter_get_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FractionDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PercentFormatter_put_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.FractionDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PercentFormatter_get_GeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_get_Languages(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_get_ResolvedGeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedGeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_get_ResolvedLanguage(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PercentFormatter_get_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberRounder());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PercentFormatter_put_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::INumberRounder>(arg);

            self->obj.NumberRounder(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PercentFormatter_get_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsZeroSigned());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PercentFormatter_put_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsZeroSigned(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PercentFormatter_get_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SignificantDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PercentFormatter_put_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.SignificantDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_PercentFormatter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::PercentFormatter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PercentFormatter[] = {
        { "format", reinterpret_cast<PyCFunction>(PercentFormatter_Format), METH_VARARGS, nullptr },
        { "format_double", reinterpret_cast<PyCFunction>(PercentFormatter_FormatDouble), METH_VARARGS, nullptr },
        { "format_int", reinterpret_cast<PyCFunction>(PercentFormatter_FormatInt), METH_VARARGS, nullptr },
        { "format_uint", reinterpret_cast<PyCFunction>(PercentFormatter_FormatUInt), METH_VARARGS, nullptr },
        { "parse_double", reinterpret_cast<PyCFunction>(PercentFormatter_ParseDouble), METH_VARARGS, nullptr },
        { "parse_int", reinterpret_cast<PyCFunction>(PercentFormatter_ParseInt), METH_VARARGS, nullptr },
        { "parse_uint", reinterpret_cast<PyCFunction>(PercentFormatter_ParseUInt), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PercentFormatter), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PercentFormatter[] = {
        { "is_decimal_point_always_displayed", reinterpret_cast<getter>(PercentFormatter_get_IsDecimalPointAlwaysDisplayed), reinterpret_cast<setter>(PercentFormatter_put_IsDecimalPointAlwaysDisplayed), nullptr, nullptr },
        { "integer_digits", reinterpret_cast<getter>(PercentFormatter_get_IntegerDigits), reinterpret_cast<setter>(PercentFormatter_put_IntegerDigits), nullptr, nullptr },
        { "is_grouped", reinterpret_cast<getter>(PercentFormatter_get_IsGrouped), reinterpret_cast<setter>(PercentFormatter_put_IsGrouped), nullptr, nullptr },
        { "numeral_system", reinterpret_cast<getter>(PercentFormatter_get_NumeralSystem), reinterpret_cast<setter>(PercentFormatter_put_NumeralSystem), nullptr, nullptr },
        { "fraction_digits", reinterpret_cast<getter>(PercentFormatter_get_FractionDigits), reinterpret_cast<setter>(PercentFormatter_put_FractionDigits), nullptr, nullptr },
        { "geographic_region", reinterpret_cast<getter>(PercentFormatter_get_GeographicRegion), nullptr, nullptr, nullptr },
        { "languages", reinterpret_cast<getter>(PercentFormatter_get_Languages), nullptr, nullptr, nullptr },
        { "resolved_geographic_region", reinterpret_cast<getter>(PercentFormatter_get_ResolvedGeographicRegion), nullptr, nullptr, nullptr },
        { "resolved_language", reinterpret_cast<getter>(PercentFormatter_get_ResolvedLanguage), nullptr, nullptr, nullptr },
        { "number_rounder", reinterpret_cast<getter>(PercentFormatter_get_NumberRounder), reinterpret_cast<setter>(PercentFormatter_put_NumberRounder), nullptr, nullptr },
        { "is_zero_signed", reinterpret_cast<getter>(PercentFormatter_get_IsZeroSigned), reinterpret_cast<setter>(PercentFormatter_put_IsZeroSigned), nullptr, nullptr },
        { "significant_digits", reinterpret_cast<getter>(PercentFormatter_get_SignificantDigits), reinterpret_cast<setter>(PercentFormatter_put_SignificantDigits), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PercentFormatter[] = 
    {
        { Py_tp_new, _new_PercentFormatter },
        { Py_tp_dealloc, _dealloc_PercentFormatter },
        { Py_tp_methods, _methods_PercentFormatter },
        { Py_tp_getset, _getset_PercentFormatter },
        { },
    };

    static PyType_Spec type_spec_PercentFormatter =
    {
        "_winsdk_Windows_Globalization_NumberFormatting.PercentFormatter",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::PercentFormatter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PercentFormatter
    };

    // ----- PermilleFormatter class --------------------
    constexpr const char* const type_name_PermilleFormatter = "PermilleFormatter";

    static PyObject* _new_PermilleFormatter(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 2)
        {
            try
            {
                auto param0 = py::convert_to<winrt::Windows::Foundation::Collections::IIterable<winrt::hstring>>(args, 0);
                auto param1 = py::convert_to<winrt::hstring>(args, 1);

                winrt::Windows::Globalization::NumberFormatting::PermilleFormatter instance{ param0, param1 };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Globalization::NumberFormatting::PermilleFormatter instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_PermilleFormatter(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* PermilleFormatter_Format(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.Format(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_FormatDouble(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.FormatDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_FormatInt(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                return py::convert(self->obj.FormatInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_FormatUInt(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.FormatUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_ParseDouble(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_ParseInt(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_ParseUInt(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_get_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsDecimalPointAlwaysDisplayed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PermilleFormatter_put_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsDecimalPointAlwaysDisplayed(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PermilleFormatter_get_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IntegerDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PermilleFormatter_put_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.IntegerDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PermilleFormatter_get_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsGrouped());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PermilleFormatter_put_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsGrouped(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PermilleFormatter_get_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumeralSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PermilleFormatter_put_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NumeralSystem(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PermilleFormatter_get_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FractionDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PermilleFormatter_put_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.FractionDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PermilleFormatter_get_GeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_get_Languages(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_get_ResolvedGeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedGeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_get_ResolvedLanguage(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* PermilleFormatter_get_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberRounder());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PermilleFormatter_put_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::INumberRounder>(arg);

            self->obj.NumberRounder(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PermilleFormatter_get_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsZeroSigned());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PermilleFormatter_put_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsZeroSigned(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* PermilleFormatter_get_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SignificantDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int PermilleFormatter_put_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.SignificantDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_PermilleFormatter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::PermilleFormatter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_PermilleFormatter[] = {
        { "format", reinterpret_cast<PyCFunction>(PermilleFormatter_Format), METH_VARARGS, nullptr },
        { "format_double", reinterpret_cast<PyCFunction>(PermilleFormatter_FormatDouble), METH_VARARGS, nullptr },
        { "format_int", reinterpret_cast<PyCFunction>(PermilleFormatter_FormatInt), METH_VARARGS, nullptr },
        { "format_uint", reinterpret_cast<PyCFunction>(PermilleFormatter_FormatUInt), METH_VARARGS, nullptr },
        { "parse_double", reinterpret_cast<PyCFunction>(PermilleFormatter_ParseDouble), METH_VARARGS, nullptr },
        { "parse_int", reinterpret_cast<PyCFunction>(PermilleFormatter_ParseInt), METH_VARARGS, nullptr },
        { "parse_uint", reinterpret_cast<PyCFunction>(PermilleFormatter_ParseUInt), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_PermilleFormatter), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_PermilleFormatter[] = {
        { "is_decimal_point_always_displayed", reinterpret_cast<getter>(PermilleFormatter_get_IsDecimalPointAlwaysDisplayed), reinterpret_cast<setter>(PermilleFormatter_put_IsDecimalPointAlwaysDisplayed), nullptr, nullptr },
        { "integer_digits", reinterpret_cast<getter>(PermilleFormatter_get_IntegerDigits), reinterpret_cast<setter>(PermilleFormatter_put_IntegerDigits), nullptr, nullptr },
        { "is_grouped", reinterpret_cast<getter>(PermilleFormatter_get_IsGrouped), reinterpret_cast<setter>(PermilleFormatter_put_IsGrouped), nullptr, nullptr },
        { "numeral_system", reinterpret_cast<getter>(PermilleFormatter_get_NumeralSystem), reinterpret_cast<setter>(PermilleFormatter_put_NumeralSystem), nullptr, nullptr },
        { "fraction_digits", reinterpret_cast<getter>(PermilleFormatter_get_FractionDigits), reinterpret_cast<setter>(PermilleFormatter_put_FractionDigits), nullptr, nullptr },
        { "geographic_region", reinterpret_cast<getter>(PermilleFormatter_get_GeographicRegion), nullptr, nullptr, nullptr },
        { "languages", reinterpret_cast<getter>(PermilleFormatter_get_Languages), nullptr, nullptr, nullptr },
        { "resolved_geographic_region", reinterpret_cast<getter>(PermilleFormatter_get_ResolvedGeographicRegion), nullptr, nullptr, nullptr },
        { "resolved_language", reinterpret_cast<getter>(PermilleFormatter_get_ResolvedLanguage), nullptr, nullptr, nullptr },
        { "number_rounder", reinterpret_cast<getter>(PermilleFormatter_get_NumberRounder), reinterpret_cast<setter>(PermilleFormatter_put_NumberRounder), nullptr, nullptr },
        { "is_zero_signed", reinterpret_cast<getter>(PermilleFormatter_get_IsZeroSigned), reinterpret_cast<setter>(PermilleFormatter_put_IsZeroSigned), nullptr, nullptr },
        { "significant_digits", reinterpret_cast<getter>(PermilleFormatter_get_SignificantDigits), reinterpret_cast<setter>(PermilleFormatter_put_SignificantDigits), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_PermilleFormatter[] = 
    {
        { Py_tp_new, _new_PermilleFormatter },
        { Py_tp_dealloc, _dealloc_PermilleFormatter },
        { Py_tp_methods, _methods_PermilleFormatter },
        { Py_tp_getset, _getset_PermilleFormatter },
        { },
    };

    static PyType_Spec type_spec_PermilleFormatter =
    {
        "_winsdk_Windows_Globalization_NumberFormatting.PermilleFormatter",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::PermilleFormatter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_PermilleFormatter
    };

    // ----- SignificantDigitsNumberRounder class --------------------
    constexpr const char* const type_name_SignificantDigitsNumberRounder = "SignificantDigitsNumberRounder";

    static PyObject* _new_SignificantDigitsNumberRounder(PyTypeObject* type, PyObject* args, PyObject* kwds) noexcept
    {
        if (kwds != nullptr)
        {
            py::set_invalid_kwd_args_error();
            return nullptr;
        }

        Py_ssize_t arg_count = PyTuple_Size(args);
        if (arg_count == 0)
        {
            try
            {
                winrt::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder instance{  };
                return py::wrap(instance, type);
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static void _dealloc_SignificantDigitsNumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* SignificantDigitsNumberRounder_RoundDouble(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.RoundDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SignificantDigitsNumberRounder_RoundInt32(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.RoundInt32(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SignificantDigitsNumberRounder_RoundInt64(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                return py::convert(self->obj.RoundInt64(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SignificantDigitsNumberRounder_RoundSingle(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<float>(args, 0);

                return py::convert(self->obj.RoundSingle(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SignificantDigitsNumberRounder_RoundUInt32(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.RoundUInt32(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SignificantDigitsNumberRounder_RoundUInt64(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.RoundUInt64(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* SignificantDigitsNumberRounder_get_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SignificantDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SignificantDigitsNumberRounder_put_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<uint32_t>(arg);

            self->obj.SignificantDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* SignificantDigitsNumberRounder_get_RoundingAlgorithm(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.RoundingAlgorithm());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int SignificantDigitsNumberRounder_put_RoundingAlgorithm(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::RoundingAlgorithm>(arg);

            self->obj.RoundingAlgorithm(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_SignificantDigitsNumberRounder(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_SignificantDigitsNumberRounder[] = {
        { "round_double", reinterpret_cast<PyCFunction>(SignificantDigitsNumberRounder_RoundDouble), METH_VARARGS, nullptr },
        { "round_int32", reinterpret_cast<PyCFunction>(SignificantDigitsNumberRounder_RoundInt32), METH_VARARGS, nullptr },
        { "round_int64", reinterpret_cast<PyCFunction>(SignificantDigitsNumberRounder_RoundInt64), METH_VARARGS, nullptr },
        { "round_single", reinterpret_cast<PyCFunction>(SignificantDigitsNumberRounder_RoundSingle), METH_VARARGS, nullptr },
        { "round_uint32", reinterpret_cast<PyCFunction>(SignificantDigitsNumberRounder_RoundUInt32), METH_VARARGS, nullptr },
        { "round_uint64", reinterpret_cast<PyCFunction>(SignificantDigitsNumberRounder_RoundUInt64), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_SignificantDigitsNumberRounder), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_SignificantDigitsNumberRounder[] = {
        { "significant_digits", reinterpret_cast<getter>(SignificantDigitsNumberRounder_get_SignificantDigits), reinterpret_cast<setter>(SignificantDigitsNumberRounder_put_SignificantDigits), nullptr, nullptr },
        { "rounding_algorithm", reinterpret_cast<getter>(SignificantDigitsNumberRounder_get_RoundingAlgorithm), reinterpret_cast<setter>(SignificantDigitsNumberRounder_put_RoundingAlgorithm), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_SignificantDigitsNumberRounder[] = 
    {
        { Py_tp_new, _new_SignificantDigitsNumberRounder },
        { Py_tp_dealloc, _dealloc_SignificantDigitsNumberRounder },
        { Py_tp_methods, _methods_SignificantDigitsNumberRounder },
        { Py_tp_getset, _getset_SignificantDigitsNumberRounder },
        { },
    };

    static PyType_Spec type_spec_SignificantDigitsNumberRounder =
    {
        "_winsdk_Windows_Globalization_NumberFormatting.SignificantDigitsNumberRounder",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_SignificantDigitsNumberRounder
    };

    // ----- INumberFormatter interface --------------------
    constexpr const char* const type_name_INumberFormatter = "INumberFormatter";

    static PyObject* _new_INumberFormatter(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(type_name_INumberFormatter);
        return nullptr;
    }

    static void _dealloc_INumberFormatter(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatter* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* INumberFormatter_Format(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatter* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.Format(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_INumberFormatter(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::INumberFormatter>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_INumberFormatter[] = {
        { "format", reinterpret_cast<PyCFunction>(INumberFormatter_Format), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_INumberFormatter), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_INumberFormatter[] = {
        { }
    };

    static PyType_Slot _type_slots_INumberFormatter[] = 
    {
        { Py_tp_new, _new_INumberFormatter },
        { Py_tp_dealloc, _dealloc_INumberFormatter },
        { Py_tp_methods, _methods_INumberFormatter },
        { Py_tp_getset, _getset_INumberFormatter },
        { },
    };

    static PyType_Spec type_spec_INumberFormatter =
    {
        "_winsdk_Windows_Globalization_NumberFormatting.INumberFormatter",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatter),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_INumberFormatter
    };

    // ----- INumberFormatter2 interface --------------------
    constexpr const char* const type_name_INumberFormatter2 = "INumberFormatter2";

    static PyObject* _new_INumberFormatter2(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(type_name_INumberFormatter2);
        return nullptr;
    }

    static void _dealloc_INumberFormatter2(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatter2* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* INumberFormatter2_FormatDouble(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatter2* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.FormatDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberFormatter2_FormatInt(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatter2* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                return py::convert(self->obj.FormatInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberFormatter2_FormatUInt(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatter2* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.FormatUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_INumberFormatter2(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::INumberFormatter2>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_INumberFormatter2[] = {
        { "format_double", reinterpret_cast<PyCFunction>(INumberFormatter2_FormatDouble), METH_VARARGS, nullptr },
        { "format_int", reinterpret_cast<PyCFunction>(INumberFormatter2_FormatInt), METH_VARARGS, nullptr },
        { "format_uint", reinterpret_cast<PyCFunction>(INumberFormatter2_FormatUInt), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_INumberFormatter2), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_INumberFormatter2[] = {
        { }
    };

    static PyType_Slot _type_slots_INumberFormatter2[] = 
    {
        { Py_tp_new, _new_INumberFormatter2 },
        { Py_tp_dealloc, _dealloc_INumberFormatter2 },
        { Py_tp_methods, _methods_INumberFormatter2 },
        { Py_tp_getset, _getset_INumberFormatter2 },
        { },
    };

    static PyType_Spec type_spec_INumberFormatter2 =
    {
        "_winsdk_Windows_Globalization_NumberFormatting.INumberFormatter2",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatter2),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_INumberFormatter2
    };

    // ----- INumberFormatterOptions interface --------------------
    constexpr const char* const type_name_INumberFormatterOptions = "INumberFormatterOptions";

    static PyObject* _new_INumberFormatterOptions(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(type_name_INumberFormatterOptions);
        return nullptr;
    }

    static void _dealloc_INumberFormatterOptions(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* INumberFormatterOptions_get_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.FractionDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int INumberFormatterOptions_put_FractionDigits(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.FractionDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* INumberFormatterOptions_get_GeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.GeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* INumberFormatterOptions_get_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IntegerDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int INumberFormatterOptions_put_IntegerDigits(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.IntegerDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* INumberFormatterOptions_get_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsDecimalPointAlwaysDisplayed());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int INumberFormatterOptions_put_IsDecimalPointAlwaysDisplayed(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsDecimalPointAlwaysDisplayed(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* INumberFormatterOptions_get_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsGrouped());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int INumberFormatterOptions_put_IsGrouped(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsGrouped(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* INumberFormatterOptions_get_Languages(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.Languages());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* INumberFormatterOptions_get_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumeralSystem());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int INumberFormatterOptions_put_NumeralSystem(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::hstring>(arg);

            self->obj.NumeralSystem(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* INumberFormatterOptions_get_ResolvedGeographicRegion(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedGeographicRegion());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* INumberFormatterOptions_get_ResolvedLanguage(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.ResolvedLanguage());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyObject* _from_INumberFormatterOptions(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::INumberFormatterOptions>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_INumberFormatterOptions[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_INumberFormatterOptions), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_INumberFormatterOptions[] = {
        { "fraction_digits", reinterpret_cast<getter>(INumberFormatterOptions_get_FractionDigits), reinterpret_cast<setter>(INumberFormatterOptions_put_FractionDigits), nullptr, nullptr },
        { "geographic_region", reinterpret_cast<getter>(INumberFormatterOptions_get_GeographicRegion), nullptr, nullptr, nullptr },
        { "integer_digits", reinterpret_cast<getter>(INumberFormatterOptions_get_IntegerDigits), reinterpret_cast<setter>(INumberFormatterOptions_put_IntegerDigits), nullptr, nullptr },
        { "is_decimal_point_always_displayed", reinterpret_cast<getter>(INumberFormatterOptions_get_IsDecimalPointAlwaysDisplayed), reinterpret_cast<setter>(INumberFormatterOptions_put_IsDecimalPointAlwaysDisplayed), nullptr, nullptr },
        { "is_grouped", reinterpret_cast<getter>(INumberFormatterOptions_get_IsGrouped), reinterpret_cast<setter>(INumberFormatterOptions_put_IsGrouped), nullptr, nullptr },
        { "languages", reinterpret_cast<getter>(INumberFormatterOptions_get_Languages), nullptr, nullptr, nullptr },
        { "numeral_system", reinterpret_cast<getter>(INumberFormatterOptions_get_NumeralSystem), reinterpret_cast<setter>(INumberFormatterOptions_put_NumeralSystem), nullptr, nullptr },
        { "resolved_geographic_region", reinterpret_cast<getter>(INumberFormatterOptions_get_ResolvedGeographicRegion), nullptr, nullptr, nullptr },
        { "resolved_language", reinterpret_cast<getter>(INumberFormatterOptions_get_ResolvedLanguage), nullptr, nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_INumberFormatterOptions[] = 
    {
        { Py_tp_new, _new_INumberFormatterOptions },
        { Py_tp_dealloc, _dealloc_INumberFormatterOptions },
        { Py_tp_methods, _methods_INumberFormatterOptions },
        { Py_tp_getset, _getset_INumberFormatterOptions },
        { },
    };

    static PyType_Spec type_spec_INumberFormatterOptions =
    {
        "_winsdk_Windows_Globalization_NumberFormatting.INumberFormatterOptions",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::INumberFormatterOptions),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_INumberFormatterOptions
    };

    // ----- INumberParser interface --------------------
    constexpr const char* const type_name_INumberParser = "INumberParser";

    static PyObject* _new_INumberParser(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(type_name_INumberParser);
        return nullptr;
    }

    static void _dealloc_INumberParser(py::wrapper::Windows::Globalization::NumberFormatting::INumberParser* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* INumberParser_ParseDouble(py::wrapper::Windows::Globalization::NumberFormatting::INumberParser* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberParser_ParseInt(py::wrapper::Windows::Globalization::NumberFormatting::INumberParser* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberParser_ParseUInt(py::wrapper::Windows::Globalization::NumberFormatting::INumberParser* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<winrt::hstring>(args, 0);

                return py::convert(self->obj.ParseUInt(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_INumberParser(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::INumberParser>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_INumberParser[] = {
        { "parse_double", reinterpret_cast<PyCFunction>(INumberParser_ParseDouble), METH_VARARGS, nullptr },
        { "parse_int", reinterpret_cast<PyCFunction>(INumberParser_ParseInt), METH_VARARGS, nullptr },
        { "parse_uint", reinterpret_cast<PyCFunction>(INumberParser_ParseUInt), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_INumberParser), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_INumberParser[] = {
        { }
    };

    static PyType_Slot _type_slots_INumberParser[] = 
    {
        { Py_tp_new, _new_INumberParser },
        { Py_tp_dealloc, _dealloc_INumberParser },
        { Py_tp_methods, _methods_INumberParser },
        { Py_tp_getset, _getset_INumberParser },
        { },
    };

    static PyType_Spec type_spec_INumberParser =
    {
        "_winsdk_Windows_Globalization_NumberFormatting.INumberParser",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::INumberParser),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_INumberParser
    };

    // ----- INumberRounder interface --------------------
    constexpr const char* const type_name_INumberRounder = "INumberRounder";

    static PyObject* _new_INumberRounder(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(type_name_INumberRounder);
        return nullptr;
    }

    static void _dealloc_INumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounder* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* INumberRounder_RoundDouble(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<double>(args, 0);

                return py::convert(self->obj.RoundDouble(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberRounder_RoundInt32(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int32_t>(args, 0);

                return py::convert(self->obj.RoundInt32(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberRounder_RoundInt64(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<int64_t>(args, 0);

                return py::convert(self->obj.RoundInt64(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberRounder_RoundSingle(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<float>(args, 0);

                return py::convert(self->obj.RoundSingle(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberRounder_RoundUInt32(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint32_t>(args, 0);

                return py::convert(self->obj.RoundUInt32(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* INumberRounder_RoundUInt64(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounder* self, PyObject* args) noexcept
    {
        Py_ssize_t arg_count = PyTuple_Size(args);

        if (arg_count == 1)
        {
            try
            {
                auto param0 = py::convert_to<uint64_t>(args, 0);

                return py::convert(self->obj.RoundUInt64(param0));
            }
            catch (...)
            {
                py::to_PyErr();
                return nullptr;
            }
        }
        else
        {
            py::set_invalid_arg_count_error(arg_count);
            return nullptr;
        }
    }

    static PyObject* _from_INumberRounder(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::INumberRounder>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_INumberRounder[] = {
        { "round_double", reinterpret_cast<PyCFunction>(INumberRounder_RoundDouble), METH_VARARGS, nullptr },
        { "round_int32", reinterpret_cast<PyCFunction>(INumberRounder_RoundInt32), METH_VARARGS, nullptr },
        { "round_int64", reinterpret_cast<PyCFunction>(INumberRounder_RoundInt64), METH_VARARGS, nullptr },
        { "round_single", reinterpret_cast<PyCFunction>(INumberRounder_RoundSingle), METH_VARARGS, nullptr },
        { "round_uint32", reinterpret_cast<PyCFunction>(INumberRounder_RoundUInt32), METH_VARARGS, nullptr },
        { "round_uint64", reinterpret_cast<PyCFunction>(INumberRounder_RoundUInt64), METH_VARARGS, nullptr },
        { "_from", reinterpret_cast<PyCFunction>(_from_INumberRounder), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_INumberRounder[] = {
        { }
    };

    static PyType_Slot _type_slots_INumberRounder[] = 
    {
        { Py_tp_new, _new_INumberRounder },
        { Py_tp_dealloc, _dealloc_INumberRounder },
        { Py_tp_methods, _methods_INumberRounder },
        { Py_tp_getset, _getset_INumberRounder },
        { },
    };

    static PyType_Spec type_spec_INumberRounder =
    {
        "_winsdk_Windows_Globalization_NumberFormatting.INumberRounder",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounder),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_INumberRounder
    };

    // ----- INumberRounderOption interface --------------------
    constexpr const char* const type_name_INumberRounderOption = "INumberRounderOption";

    static PyObject* _new_INumberRounderOption(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(type_name_INumberRounderOption);
        return nullptr;
    }

    static void _dealloc_INumberRounderOption(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounderOption* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* INumberRounderOption_get_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounderOption* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.NumberRounder());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int INumberRounderOption_put_NumberRounder(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounderOption* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<winrt::Windows::Globalization::NumberFormatting::INumberRounder>(arg);

            self->obj.NumberRounder(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_INumberRounderOption(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::INumberRounderOption>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_INumberRounderOption[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_INumberRounderOption), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_INumberRounderOption[] = {
        { "number_rounder", reinterpret_cast<getter>(INumberRounderOption_get_NumberRounder), reinterpret_cast<setter>(INumberRounderOption_put_NumberRounder), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_INumberRounderOption[] = 
    {
        { Py_tp_new, _new_INumberRounderOption },
        { Py_tp_dealloc, _dealloc_INumberRounderOption },
        { Py_tp_methods, _methods_INumberRounderOption },
        { Py_tp_getset, _getset_INumberRounderOption },
        { },
    };

    static PyType_Spec type_spec_INumberRounderOption =
    {
        "_winsdk_Windows_Globalization_NumberFormatting.INumberRounderOption",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::INumberRounderOption),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_INumberRounderOption
    };

    // ----- ISignedZeroOption interface --------------------
    constexpr const char* const type_name_ISignedZeroOption = "ISignedZeroOption";

    static PyObject* _new_ISignedZeroOption(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(type_name_ISignedZeroOption);
        return nullptr;
    }

    static void _dealloc_ISignedZeroOption(py::wrapper::Windows::Globalization::NumberFormatting::ISignedZeroOption* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ISignedZeroOption_get_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::ISignedZeroOption* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.IsZeroSigned());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISignedZeroOption_put_IsZeroSigned(py::wrapper::Windows::Globalization::NumberFormatting::ISignedZeroOption* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<bool>(arg);

            self->obj.IsZeroSigned(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_ISignedZeroOption(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::ISignedZeroOption>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ISignedZeroOption[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_ISignedZeroOption), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ISignedZeroOption[] = {
        { "is_zero_signed", reinterpret_cast<getter>(ISignedZeroOption_get_IsZeroSigned), reinterpret_cast<setter>(ISignedZeroOption_put_IsZeroSigned), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ISignedZeroOption[] = 
    {
        { Py_tp_new, _new_ISignedZeroOption },
        { Py_tp_dealloc, _dealloc_ISignedZeroOption },
        { Py_tp_methods, _methods_ISignedZeroOption },
        { Py_tp_getset, _getset_ISignedZeroOption },
        { },
    };

    static PyType_Spec type_spec_ISignedZeroOption =
    {
        "_winsdk_Windows_Globalization_NumberFormatting.ISignedZeroOption",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::ISignedZeroOption),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ISignedZeroOption
    };

    // ----- ISignificantDigitsOption interface --------------------
    constexpr const char* const type_name_ISignificantDigitsOption = "ISignificantDigitsOption";

    static PyObject* _new_ISignificantDigitsOption(PyTypeObject* /* unused */, PyObject* /* unused */, PyObject* /* unused */)
    {
        py::set_invalid_activation_error(type_name_ISignificantDigitsOption);
        return nullptr;
    }

    static void _dealloc_ISignificantDigitsOption(py::wrapper::Windows::Globalization::NumberFormatting::ISignificantDigitsOption* self)
    {
        auto tp = Py_TYPE(self);
        self->obj = nullptr;
        tp->tp_free(self);
        Py_DECREF(tp);
    }

    static PyObject* ISignificantDigitsOption_get_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::ISignificantDigitsOption* self, void* /*unused*/) noexcept
    {
        try
        {
            return py::convert(self->obj.SignificantDigits());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static int ISignificantDigitsOption_put_SignificantDigits(py::wrapper::Windows::Globalization::NumberFormatting::ISignificantDigitsOption* self, PyObject* arg, void* /*unused*/) noexcept
    {
        if (arg == nullptr)
        {
            PyErr_SetString(PyExc_TypeError, "property delete not supported");
            return -1;
        }

        try
        {
            auto param0 = py::convert_to<int32_t>(arg);

            self->obj.SignificantDigits(param0);
            return 0;
        }
        catch (...)
        {
            py::to_PyErr();
            return -1;
        }
    }

    static PyObject* _from_ISignificantDigitsOption(PyObject* /*unused*/, PyObject* arg) noexcept
    {
        try
        {
            auto return_value = py::convert_to<winrt::Windows::Foundation::IInspectable>(arg);
            return py::convert(return_value.as<winrt::Windows::Globalization::NumberFormatting::ISignificantDigitsOption>());
        }
        catch (...)
        {
            py::to_PyErr();
            return nullptr;
        }
    }

    static PyMethodDef _methods_ISignificantDigitsOption[] = {
        { "_from", reinterpret_cast<PyCFunction>(_from_ISignificantDigitsOption), METH_O | METH_STATIC, nullptr },
        { }
    };

    static PyGetSetDef _getset_ISignificantDigitsOption[] = {
        { "significant_digits", reinterpret_cast<getter>(ISignificantDigitsOption_get_SignificantDigits), reinterpret_cast<setter>(ISignificantDigitsOption_put_SignificantDigits), nullptr, nullptr },
        { }
    };

    static PyType_Slot _type_slots_ISignificantDigitsOption[] = 
    {
        { Py_tp_new, _new_ISignificantDigitsOption },
        { Py_tp_dealloc, _dealloc_ISignificantDigitsOption },
        { Py_tp_methods, _methods_ISignificantDigitsOption },
        { Py_tp_getset, _getset_ISignificantDigitsOption },
        { },
    };

    static PyType_Spec type_spec_ISignificantDigitsOption =
    {
        "_winsdk_Windows_Globalization_NumberFormatting.ISignificantDigitsOption",
        sizeof(py::wrapper::Windows::Globalization::NumberFormatting::ISignificantDigitsOption),
        0,
        Py_TPFLAGS_DEFAULT,
        _type_slots_ISignificantDigitsOption
    };

    // ----- Windows.Globalization.NumberFormatting Initialization --------------------
    PyDoc_STRVAR(module_doc, "Windows::Globalization::NumberFormatting");

    static PyMethodDef module_methods[] = {
        {"_register_CurrencyFormatterMode", register_CurrencyFormatterMode, METH_O, "registers type"},
        {"_register_RoundingAlgorithm", register_RoundingAlgorithm, METH_O, "registers type"},
        {}};


    static int module_traverse(PyObject* module, visitproc visit, void* arg) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_VISIT(state->type_CurrencyFormatterMode);
        Py_VISIT(state->type_RoundingAlgorithm);
        Py_VISIT(state->type_CurrencyFormatter);
        Py_VISIT(state->type_DecimalFormatter);
        Py_VISIT(state->type_IncrementNumberRounder);
        Py_VISIT(state->type_NumeralSystemTranslator);
        Py_VISIT(state->type_PercentFormatter);
        Py_VISIT(state->type_PermilleFormatter);
        Py_VISIT(state->type_SignificantDigitsNumberRounder);
        Py_VISIT(state->type_INumberFormatter);
        Py_VISIT(state->type_INumberFormatter2);
        Py_VISIT(state->type_INumberFormatterOptions);
        Py_VISIT(state->type_INumberParser);
        Py_VISIT(state->type_INumberRounder);
        Py_VISIT(state->type_INumberRounderOption);
        Py_VISIT(state->type_ISignedZeroOption);
        Py_VISIT(state->type_ISignificantDigitsOption);

        return 0;
    }

    static int module_clear(PyObject* module) noexcept
    {
        auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));

        if (!state)
        {
            return 0;
        }

        Py_CLEAR(state->type_CurrencyFormatterMode);
        Py_CLEAR(state->type_RoundingAlgorithm);
        Py_CLEAR(state->type_CurrencyFormatter);
        Py_CLEAR(state->type_DecimalFormatter);
        Py_CLEAR(state->type_IncrementNumberRounder);
        Py_CLEAR(state->type_NumeralSystemTranslator);
        Py_CLEAR(state->type_PercentFormatter);
        Py_CLEAR(state->type_PermilleFormatter);
        Py_CLEAR(state->type_SignificantDigitsNumberRounder);
        Py_CLEAR(state->type_INumberFormatter);
        Py_CLEAR(state->type_INumberFormatter2);
        Py_CLEAR(state->type_INumberFormatterOptions);
        Py_CLEAR(state->type_INumberParser);
        Py_CLEAR(state->type_INumberRounder);
        Py_CLEAR(state->type_INumberRounderOption);
        Py_CLEAR(state->type_ISignedZeroOption);
        Py_CLEAR(state->type_ISignificantDigitsOption);

        return 0;
    }


    static PyModuleDef module_def
        = {PyModuleDef_HEAD_INIT,
           "_winsdk_Windows_Globalization_NumberFormatting",
           module_doc,
           sizeof(module_state),
           module_methods,
           nullptr,
           module_traverse,
           module_clear,
           nullptr};

} // py::cpp::Windows::Globalization::NumberFormatting

PyMODINIT_FUNC PyInit__winsdk_Windows_Globalization_NumberFormatting(void) noexcept
{
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    py::pyobj_handle module{PyModule_Create(&module_def)};

    if (!module)
    {
        return nullptr;
    }

    auto object_type = py::get_python_type<py::Object>();
    if (!object_type)
    {
        return nullptr;
    }

    py::pyobj_handle bases{PyTuple_Pack(1, object_type)};

    if (!bases)
    {
        return nullptr;
    }

    py::pyobj_handle collections_abc_module{PyImport_ImportModule("collections.abc")};

    if (!collections_abc_module)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "Sequence")};

    if (!sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle sequence_bases{PyTuple_Pack(2, object_type, sequence_type.get())};

    if (!sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableSequence")};

    if (!mutable_sequence_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_sequence_bases{PyTuple_Pack(2, object_type, mutable_sequence_type.get())};

    if (!mutable_sequence_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "Mapping")};

    if (!mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mapping_bases{PyTuple_Pack(2, object_type, mapping_type.get())};

    if (!mapping_bases)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_type{PyObject_GetAttrString(collections_abc_module.get(), "MutableMapping")};

    if (!mutable_mapping_type)
    {
        return nullptr;
    }

    py::pyobj_handle mutable_mapping_bases{PyTuple_Pack(2, object_type, mutable_mapping_type.get())};

    if (!mutable_mapping_bases)
    {
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module.get()));
    assert(state);

    state->type_CurrencyFormatter = py::register_python_type(module.get(), type_name_CurrencyFormatter, &type_spec_CurrencyFormatter, bases.get());
    if (!state->type_CurrencyFormatter)
    {
        return nullptr;
    }

    Py_INCREF(state->type_CurrencyFormatter);

    state->type_DecimalFormatter = py::register_python_type(module.get(), type_name_DecimalFormatter, &type_spec_DecimalFormatter, bases.get());
    if (!state->type_DecimalFormatter)
    {
        return nullptr;
    }

    Py_INCREF(state->type_DecimalFormatter);

    state->type_IncrementNumberRounder = py::register_python_type(module.get(), type_name_IncrementNumberRounder, &type_spec_IncrementNumberRounder, bases.get());
    if (!state->type_IncrementNumberRounder)
    {
        return nullptr;
    }

    Py_INCREF(state->type_IncrementNumberRounder);

    state->type_NumeralSystemTranslator = py::register_python_type(module.get(), type_name_NumeralSystemTranslator, &type_spec_NumeralSystemTranslator, bases.get());
    if (!state->type_NumeralSystemTranslator)
    {
        return nullptr;
    }

    Py_INCREF(state->type_NumeralSystemTranslator);

    state->type_PercentFormatter = py::register_python_type(module.get(), type_name_PercentFormatter, &type_spec_PercentFormatter, bases.get());
    if (!state->type_PercentFormatter)
    {
        return nullptr;
    }

    Py_INCREF(state->type_PercentFormatter);

    state->type_PermilleFormatter = py::register_python_type(module.get(), type_name_PermilleFormatter, &type_spec_PermilleFormatter, bases.get());
    if (!state->type_PermilleFormatter)
    {
        return nullptr;
    }

    Py_INCREF(state->type_PermilleFormatter);

    state->type_SignificantDigitsNumberRounder = py::register_python_type(module.get(), type_name_SignificantDigitsNumberRounder, &type_spec_SignificantDigitsNumberRounder, bases.get());
    if (!state->type_SignificantDigitsNumberRounder)
    {
        return nullptr;
    }

    Py_INCREF(state->type_SignificantDigitsNumberRounder);

    state->type_INumberFormatter = py::register_python_type(module.get(), type_name_INumberFormatter, &type_spec_INumberFormatter, bases.get());
    if (!state->type_INumberFormatter)
    {
        return nullptr;
    }

    Py_INCREF(state->type_INumberFormatter);

    state->type_INumberFormatter2 = py::register_python_type(module.get(), type_name_INumberFormatter2, &type_spec_INumberFormatter2, bases.get());
    if (!state->type_INumberFormatter2)
    {
        return nullptr;
    }

    Py_INCREF(state->type_INumberFormatter2);

    state->type_INumberFormatterOptions = py::register_python_type(module.get(), type_name_INumberFormatterOptions, &type_spec_INumberFormatterOptions, bases.get());
    if (!state->type_INumberFormatterOptions)
    {
        return nullptr;
    }

    Py_INCREF(state->type_INumberFormatterOptions);

    state->type_INumberParser = py::register_python_type(module.get(), type_name_INumberParser, &type_spec_INumberParser, bases.get());
    if (!state->type_INumberParser)
    {
        return nullptr;
    }

    Py_INCREF(state->type_INumberParser);

    state->type_INumberRounder = py::register_python_type(module.get(), type_name_INumberRounder, &type_spec_INumberRounder, bases.get());
    if (!state->type_INumberRounder)
    {
        return nullptr;
    }

    Py_INCREF(state->type_INumberRounder);

    state->type_INumberRounderOption = py::register_python_type(module.get(), type_name_INumberRounderOption, &type_spec_INumberRounderOption, bases.get());
    if (!state->type_INumberRounderOption)
    {
        return nullptr;
    }

    Py_INCREF(state->type_INumberRounderOption);

    state->type_ISignedZeroOption = py::register_python_type(module.get(), type_name_ISignedZeroOption, &type_spec_ISignedZeroOption, bases.get());
    if (!state->type_ISignedZeroOption)
    {
        return nullptr;
    }

    Py_INCREF(state->type_ISignedZeroOption);

    state->type_ISignificantDigitsOption = py::register_python_type(module.get(), type_name_ISignificantDigitsOption, &type_spec_ISignificantDigitsOption, bases.get());
    if (!state->type_ISignificantDigitsOption)
    {
        return nullptr;
    }

    Py_INCREF(state->type_ISignificantDigitsOption);


    return module.detach();
}

PyObject* py::py_type<winrt::Windows::Globalization::NumberFormatting::CurrencyFormatterMode>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Globalization::NumberFormatting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_CurrencyFormatterMode;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Globalization::NumberFormatting::CurrencyFormatterMode is not registered");
        return nullptr;
    }

    return python_type;
}

PyObject* py::py_type<winrt::Windows::Globalization::NumberFormatting::RoundingAlgorithm>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Globalization::NumberFormatting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_RoundingAlgorithm;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Globalization::NumberFormatting::RoundingAlgorithm is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::CurrencyFormatter>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Globalization::NumberFormatting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_CurrencyFormatter;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Globalization::NumberFormatting::CurrencyFormatter is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::DecimalFormatter>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Globalization::NumberFormatting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_DecimalFormatter;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Globalization::NumberFormatting::DecimalFormatter is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::IncrementNumberRounder>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Globalization::NumberFormatting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_IncrementNumberRounder;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Globalization::NumberFormatting::IncrementNumberRounder is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::NumeralSystemTranslator>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Globalization::NumberFormatting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_NumeralSystemTranslator;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Globalization::NumberFormatting::NumeralSystemTranslator is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::PercentFormatter>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Globalization::NumberFormatting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PercentFormatter;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Globalization::NumberFormatting::PercentFormatter is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::PermilleFormatter>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Globalization::NumberFormatting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_PermilleFormatter;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Globalization::NumberFormatting::PermilleFormatter is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Globalization::NumberFormatting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_SignificantDigitsNumberRounder;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Globalization::NumberFormatting::SignificantDigitsNumberRounder is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberFormatter>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Globalization::NumberFormatting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_INumberFormatter;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Globalization::NumberFormatting::INumberFormatter is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberFormatter2>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Globalization::NumberFormatting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_INumberFormatter2;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Globalization::NumberFormatting::INumberFormatter2 is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberFormatterOptions>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Globalization::NumberFormatting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_INumberFormatterOptions;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Globalization::NumberFormatting::INumberFormatterOptions is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberParser>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Globalization::NumberFormatting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_INumberParser;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Globalization::NumberFormatting::INumberParser is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberRounder>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Globalization::NumberFormatting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_INumberRounder;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Globalization::NumberFormatting::INumberRounder is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::INumberRounderOption>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Globalization::NumberFormatting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_INumberRounderOption;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Globalization::NumberFormatting::INumberRounderOption is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::ISignedZeroOption>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Globalization::NumberFormatting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_ISignedZeroOption;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Globalization::NumberFormatting::ISignedZeroOption is not registered");
        return nullptr;
    }

    return python_type;
}

PyTypeObject* py::winrt_type<winrt::Windows::Globalization::NumberFormatting::ISignificantDigitsOption>::get_python_type() noexcept {
    using namespace py::cpp::Windows::Globalization::NumberFormatting;

    PyObject* module = PyState_FindModule(&module_def);

    if (!module) {
        PyErr_SetString(PyExc_RuntimeError, "could not find module for Windows::Globalization::NumberFormatting");
        return nullptr;
    }

    auto state = reinterpret_cast<module_state*>(PyModule_GetState(module));
    assert(state);

    auto python_type = state->type_ISignificantDigitsOption;

    if (!python_type) {
        PyErr_SetString(PyExc_RuntimeError, "type winrt::Windows::Globalization::NumberFormatting::ISignificantDigitsOption is not registered");
        return nullptr;
    }

    return python_type;
}
