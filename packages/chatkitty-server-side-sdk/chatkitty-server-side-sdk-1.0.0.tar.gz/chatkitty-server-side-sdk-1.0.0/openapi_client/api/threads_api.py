"""
    ChatKitty Platform REST API

    Platform REST API OpenAPI specification (OAS).  See the Interactive Docs to try ChatKitty API methods without writing code,  and get the complete schema of resources exposed by the API.  # noqa: E501

    The version of the OpenAPI document: v1.15.10
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.api_error import ApiError
from openapi_client.model.authentication_error import AuthenticationError
from openapi_client.model.cursor_paged_model_message_resource import CursorPagedModelMessageResource
from openapi_client.model.message_resource import MessageResource
from openapi_client.model.reply_thread_resource import ReplyThreadResource
from openapi_client.model.send_channel_message_request import SendChannelMessageRequest
from openapi_client.model.send_channel_message_request1 import SendChannelMessageRequest1


class ThreadsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.retrieve_thread_endpoint = _Endpoint(
            settings={
                'response_type': (ReplyThreadResource,),
                'auth': [
                    'application_authorization'
                ],
                'endpoint_path': '/v1/threads/{id}',
                'operation_id': 'retrieve_thread',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/hal+json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.retrieve_thread_messages_endpoint = _Endpoint(
            settings={
                'response_type': (CursorPagedModelMessageResource,),
                'auth': [
                    'application_authorization'
                ],
                'endpoint_path': '/v1/threads/{id}/messages',
                'operation_id': 'retrieve_thread_messages',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'size',
                    'start',
                    'next',
                    'relation',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'relation',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('relation',): {

                        "SELF": "SELF",
                        "PREVIOUS": "PREVIOUS",
                        "NEXT": "NEXT"
                    },
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'size':
                        (int,),
                    'start':
                        (int,),
                    'next':
                        (int,),
                    'relation':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'size': 'size',
                    'start': 'start',
                    'next': 'next',
                    'relation': 'relation',
                },
                'location_map': {
                    'id': 'path',
                    'size': 'query',
                    'start': 'query',
                    'next': 'query',
                    'relation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/hal+json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.send_thread_message_endpoint = _Endpoint(
            settings={
                'response_type': (MessageResource,),
                'auth': [
                    'application_authorization'
                ],
                'endpoint_path': '/v1/threads/{id}/messages',
                'operation_id': 'send_thread_message',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'send_channel_message_request',
                ],
                'required': [
                    'id',
                    'send_channel_message_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (int,),
                    'send_channel_message_request':
                        (SendChannelMessageRequest,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'send_channel_message_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/hal+json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )

    def retrieve_thread(
        self,
        id,
        **kwargs
    ):
        """Retrieve a thread  # noqa: E501

        Returns a thread by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_thread(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int): Reply thread ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ReplyThreadResource
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.retrieve_thread_endpoint.call_with_http_info(**kwargs)

    def retrieve_thread_messages(
        self,
        id,
        **kwargs
    ):
        """Retrieve reply thread messages  # noqa: E501

        Retrieve a page of replies sent in this thread  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_thread_messages(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (int):

        Keyword Args:
            size (int): The size of the page to be returned. [optional]
            start (int): Start cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages. [optional]
            next (int): Next page cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch subsequent pages. [optional]
            relation (str): Page cursor relation. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CursorPagedModelMessageResource
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.retrieve_thread_messages_endpoint.call_with_http_info(**kwargs)

    def send_thread_message(
        self,
        id,
        send_channel_message_request,
        **kwargs
    ):
        """Send a reply thread message  # noqa: E501

        Sends a reply message in this thread as the system or on behalf of a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_thread_message(id, send_channel_message_request, async_req=True)
        >>> result = thread.get()

        Args:
            id (int):
            send_channel_message_request (SendChannelMessageRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MessageResource
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['send_channel_message_request'] = \
            send_channel_message_request
        return self.send_thread_message_endpoint.call_with_http_info(**kwargs)

